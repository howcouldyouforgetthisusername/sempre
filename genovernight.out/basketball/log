main() {
  Execution directory: genovernight.out/basketball
  Grammar.read {
    WARNING: Category not defined in the grammar: $VP; used in rule: $Intermediate1 -> that $VP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate53 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate56 -> $Intermediate55 $VP/NP (SelectFn 1)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate58 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP00 -> $Intermediate72 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP0 -> $Intermediate76 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate77 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate100 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate106 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate127 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate133 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate163 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate166 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate171 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate176 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate181 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate220 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate225 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate230 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate235 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $CP1 -> $Intermediate240 $VP/NP (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $BinaryOp; used in rule: $BinaryOpRight -> $BinaryOp $EntityNP2 (JoinFn betaReduce forward)
    Valid tags: [general, generate, geo440, geo880, parse, regex]
    Used tags: [general, generate]
    400 rules
  }
  Parser: 80 catUnaryRules (sorted), 320 nonCatUnaryRules (in trie)
  Dataset.read {
    Reading overnight/null.examples {
      Example overnight/null.examples:0 (0): [null] => null
    }
  }
  Learner.learn() {
    Iteration 0/0 {
      Processing iter=0.train: 1 examples {
        Examples {
          iter=0.train: example 0/1: overnight/null.examples:0 {
            Example: null {
              Tokens: [null]
              Lemmatized tokens: [null]
              POS tags: [UNK]
              NER tags: [UNK]
              NER values: [UNK]
              Dependency children: []
            }
            Parser.parse: parse {
              WARNING: Currently CatSizeBound is usable only when useSizeInsteadOfDepth = true.
              FloatingParser.infer() {
                SimpleWorld.createWorld: domain = basketball (961 entity/property pairs) 
                Parser.ensureExecuted 
              } [5.1s, cum. 5.1s]
            } [5.1s, cum. 5.1s]
            Parser.setEvaluation: 266 candidates {
              Pred@0000: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is at least number of points (over a season) of player kobe bryant")) [score=15.903, prob=0.118]
              Pred@0001: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is at least number of turnovers (over a season) of player kobe bryant")) [score=15.456, prob=0.076]
              Pred@0002: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is smaller than number of assists (over a season) of player kobe bryant")) [score=15.377, prob=0.070]
              Pred@0003: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is larger than number of turnovers (over a season) of player kobe bryant")) [score=15.178, prob=0.057]
              Pred@0004: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is at most number of points (over a season) of player kobe bryant")) [score=15.078, prob=0.052]
              Pred@0005: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is at least number of steals (over a season) of player kobe bryant")) [score=15.066, prob=0.051]
              Pred@0006: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is at most number of turnovers (over a season) of player kobe bryant")) [score=15.010, prob=0.048]
              Pred@0007: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is smaller than number of blocks (over a season) of player kobe bryant")) [score=14.958, prob=0.046]
              Pred@0008: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.3) (name en.player.32) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is larger than number of assists (over a season) of player kobe bryant")) [score=14.926, prob=0.045]
              Pred@0009: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.25) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is larger than number of blocks (over a season) of player kobe bryant")) [score=14.726, prob=0.036]
              Pred@0010: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is at least number of blocks (over a season) of player kobe bryant")) [score=14.683, prob=0.035]
              Pred@0011: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is smaller than number of played games (over a season) of player kobe bryant")) [score=14.477, prob=0.028]
              Pred@0012: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is at least number of assists (over a season) of player kobe bryant")) [score=14.318, prob=0.024]
              Pred@0013: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is smaller than number of points (over a season) of player kobe bryant")) [score=14.183, prob=0.021]
              Pred@0014: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is larger than number of steals (over a season) of player kobe bryant")) [score=14.158, prob=0.021]
              Pred@0015: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is smaller than number of turnovers (over a season) of player kobe bryant")) [score=13.951, prob=0.017]
              Pred@0016: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is at most number of assists (over a season) of player kobe bryant")) [score=13.865, prob=0.015]
              Pred@0017: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is larger than number of points (over a season) of player kobe bryant")) [score=13.508, prob=0.011]
              Pred@0018: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is at most number of blocks (over a season) of player kobe bryant")) [score=13.442, prob=0.010]
              Pred@0019: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_turnovers)))) (value (list (number 3 turnover) (number 6 turnover) (number 7 turnover) (number 9 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=13.394, prob=0.010]
              Pred@0020: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_points) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is number of points (over a season) of player kobe bryant")) [score=13.390, prob=0.010]
              Pred@0021: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_assists)))) (value (list (number 3 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=13.281, prob=0.009]
              Pred@0022: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is larger than number of played games (over a season) of player kobe bryant")) [score=13.245, prob=0.008]
              Pred@0023: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_points)))) (value (list (number 0 point) (number 5 point) (number 6 point) (number 8 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=13.110, prob=0.007]
              Pred@0024: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_games_played) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is number of played games (over a season) of player kobe bryant")) [score=12.936, prob=0.006]
              Pred@0025: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_assists) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is number of assists (over a season) of player kobe bryant")) [score=12.914, prob=0.006]
              Pred@0026: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is at most number of played games (over a season) of player kobe bryant")) [score=12.877, prob=0.006]
              Pred@0027: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is smaller than number of steals (over a season) of player kobe bryant")) [score=12.845, prob=0.006]
              Pred@0028: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_assists)))) (value (list (number 0 assist) (number 2 assist) (number 3 assist) (number 9 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=12.822, prob=0.005]
              Pred@0029: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_points)))) (value (list (number 3 point) (number 4 point) (number 7 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=12.755, prob=0.005]
              Pred@0030: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is at least number of played games (over a season) of player kobe bryant")) [score=12.703, prob=0.005]
              Pred@0031: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_games_played)))) (value (list (number 5 game) (number 6 game) (number 7 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=12.685, prob=0.005]
              Pred@0032: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_points)))) (value (list (number 0 point) (number 3 point) (number 9 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=12.670, prob=0.005]
              Pred@0033: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_steals)))) (value (list (number 0 steal) (number 2 steal) (number 4 steal) (number 5 steal) (number 6 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=12.627, prob=0.004]
              Pred@0034: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_assists)))) (value (list (number 0 assist) (number 6 assist) (number 8 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=12.576, prob=0.004]
              Pred@0035: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is smaller than number of fouls (over a season) of player kobe bryant")) [score=12.495, prob=0.004]
              Pred@0036: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_turnovers)))) (value (list (number 3 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=12.442, prob=0.004]
              Pred@0037: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_turnovers)))) (value (list (number 3 turnover) (number 5 turnover) (number 7 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=12.418, prob=0.004]
              Pred@0038: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is at most number of fouls (over a season) of player kobe bryant")) [score=12.382, prob=0.003]
              Pred@0039: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is larger than number of fouls (over a season) of player kobe bryant")) [score=12.377, prob=0.003]
              Pred@0040: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_blocks)))) (value (list (number 1 block) (number 3 block) (number 5 block) (number 7 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=12.376, prob=0.003]
              Pred@0041: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_blocks) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is number of blocks (over a season) of player kobe bryant")) [score=12.331, prob=0.003]
              Pred@0042: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_fouls)))) (value (list (number 1 foul) (number 6 foul) (number 8 foul) (number 9 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=12.269, prob=0.003]
              Pred@0043: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is at least number of fouls (over a season) of player kobe bryant")) [score=12.215, prob=0.003]
              Pred@0044: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_assists)))) (value (list (number 6 assist) (number 8 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=12.078, prob=0.003]
              Pred@0045: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_assists)))) (value (list (number 3 assist) (number 5 assist) (number 7 assist) (number 8 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=12.067, prob=0.003]
              Pred@0046: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_fouls)))) (value (list (number 1 foul) (number 4 foul) (number 7 foul) (number 8 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=11.947, prob=0.002]
              Pred@0047: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is at most number of steals (over a season) of player kobe bryant")) [score=11.907, prob=0.002]
              Pred@0048: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_turnovers) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is number of turnovers (over a season) of player kobe bryant")) [score=11.858, prob=0.002]
              Pred@0049: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_turnovers)))) (value (list (number 3 turnover) (number 4 turnover) (number 5 turnover) (number 6 turnover) (number 7 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=11.848, prob=0.002]
              Pred@0050: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_points)))) (value (list (number 3 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=11.836, prob=0.002]
              Pred@0051: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_blocks)))) (value (list (number 5 block) (number 9 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=11.808, prob=0.002]
              Pred@0052: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_blocks)))) (value (list (number 1 block) (number 3 block) (number 9 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=11.797, prob=0.002]
              Pred@0053: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_points)))) (value (list (number 0 point) (number 4 point) (number 5 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=11.726, prob=0.002]
              Pred@0054: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_turnovers)))) (value (list (number 1 turnover) (number 2 turnover) (number 3 turnover) (number 4 turnover) (number 6 turnover) (number 7 turnover) (number 8 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose team is los angeles lakers")) [score=11.667, prob=0.002]
              Pred@0055: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_games_played)))) (value (list (number 3 game) (number 5 game) (number 6 game) (number 7 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=11.667, prob=0.002]
              Pred@0056: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_assists)))) (value (list (number 4 assist) (number 6 assist) (number 8 assist) (number 9 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=11.635, prob=0.002]
              Pred@0057: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_points)))) (value (list (number 6 point) (number 8 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=11.570, prob=0.002]
              Pred@0058: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_assists)))) (value (list (number 0 assist) (number 4 assist) (number 5 assist) (number 7 assist) (number 9 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=11.533, prob=0.001]
              Pred@0059: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_points)))) (value (list (number 8 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=11.515, prob=0.001]
              Pred@0060: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_steals)))) (value (list (number 0 steal) (number 1 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=11.514, prob=0.001]
              Pred@0061: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_fouls)))) (value (list (number 0 foul) (number 4 foul) (number 6 foul) (number 8 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=11.421, prob=0.001]
              Pred@0062: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_blocks)))) (value (list (number 4 block) (number 8 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=11.412, prob=0.001]
              Pred@0063: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_assists)))) (value (list (number 0 assist) (number 2 assist) (number 3 assist) (number 4 assist) (number 5 assist) (number 6 assist) (number 7 assist) (number 8 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose team is los angeles lakers")) [score=11.387, prob=0.001]
              Pred@0064: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_games_played)))) (value (list (number 0 game) (number 1 game) (number 2 game) (number 4 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=11.374, prob=0.001]
              Pred@0065: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_turnovers)))) (value (list (number 2 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=11.356, prob=0.001]
              Pred@0066: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_fouls)))) (value (list (number 0 foul) (number 6 foul) (number 8 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=11.317, prob=0.001]
              Pred@0067: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_turnovers)))) (value (list (number 1 turnover) (number 4 turnover) (number 7 turnover) (number 9 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=11.316, prob=0.001]
              Pred@0068: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 assist)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.34) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is at most 3")) [score=11.303, prob=0.001]
              Pred@0069: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_steals)))) (value (list (number 0 steal) (number 4 steal) (number 5 steal) (number 6 steal) (number 7 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=11.297, prob=0.001]
              Pred@0070: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string num_rebounds)))) (value (list (number 1 rebound) (number 2 rebound) (number 6 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of turnovers (over a season) is 3")) [score=11.265, prob=0.001]
              Pred@0071: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_steals)))) (value (list (number 4 steal) (number 5 steal) (number 7 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=11.220, prob=0.001]
              Pred@0072: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_steals)))) (value (list (number 0 steal) (number 2 steal) (number 5 steal) (number 9 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=11.184, prob=0.001]
              Pred@0073: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_points)))) (value (list (number 0 point) (number 3 point) (number 4 point) (number 5 point) (number 6 point) (number 8 point) (number 9 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose team is los angeles lakers")) [score=11.180, prob=0.001]
              Pred@0074: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_fouls) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is number of fouls (over a season) of player kobe bryant")) [score=11.176, prob=0.001]
              Pred@0075: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_points)))) (value (list (number 0 point) (number 3 point) (number 4 point) (number 9 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=11.120, prob=9.90e-04]
              Pred@0076: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_turnovers)))) (value (list (number 1 turnover) (number 3 turnover) (number 4 turnover) (number 6 turnover) (number 8 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=11.041, prob=9.15e-04]
              Pred@0077: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_games_played)))) (value (list (number 3 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=11.029, prob=9.05e-04]
              Pred@0078: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_turnovers)))) (value (list (number 4 turnover) (number 8 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=11.005, prob=8.83e-04]
              Pred@0079: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 turnover)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.38) (name en.player.48) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is larger than 3")) [score=11.000, prob=8.78e-04]
              Pred@0080: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_fouls)))) (value (list (number 3 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=10.982, prob=8.63e-04]
              Pred@0081: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_fouls)))) (value (list (number 1 foul) (number 4 foul) (number 6 foul) (number 7 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=10.945, prob=8.31e-04]
              Pred@0082: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_blocks)))) (value (list (number 0 block) (number 1 block) (number 3 block) (number 4 block) (number 5 block) (number 7 block) (number 8 block) (number 9 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose team is los angeles lakers")) [score=10.914, prob=8.06e-04]
              Pred@0083: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of turnovers (over a season) is 3")) [score=10.888, prob=7.86e-04]
              Pred@0084: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_games_played)))) (value (list (number 1 game) (number 5 game) (number 6 game) (number 8 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=10.888, prob=7.86e-04]
              Pred@0085: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_blocks)))) (value (list (number 6 block) (number 7 block) (number 8 block) (number 9 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=10.859, prob=7.63e-04]
              Pred@0086: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_assists)))) (value (list (number 8 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=10.813, prob=7.29e-04]
              Pred@0087: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is smaller than number of rebounds (over a season) of player kobe bryant")) [score=10.786, prob=7.09e-04]
              Pred@0088: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string num_rebounds)))) (value (list (number 0 rebound) (number 1 rebound) (number 5 rebound) (number 6 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of assists (over a season) is 3")) [score=10.781, prob=7.06e-04]
              Pred@0089: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_fouls)))) (value (list (number 6 foul) (number 7 foul) (number 9 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=10.728, prob=6.69e-04]
              Pred@0090: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_games_played)))) (value (list (number 5 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=10.720, prob=6.64e-04]
              Pred@0091: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_fouls)))) (value (list (number 0 foul) (number 1 foul) (number 3 foul) (number 5 foul) (number 6 foul) (number 7 foul) (number 8 foul) (number 9 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose team is los angeles lakers")) [score=10.709, prob=6.56e-04]
              Pred@0092: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_blocks)))) (value (list (number 2 block) (number 4 block) (number 5 block) (number 6 block) (number 9 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=10.548, prob=5.59e-04]
              Pred@0093: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_assists)))) (value (list (number 2 assist) (number 3 assist) (number 4 assist) (number 5 assist) (number 7 assist) (number 8 assist) (number 9 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose position is point guard")) [score=10.519, prob=5.43e-04]
              Pred@0094: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_games_played)))) (value (list (number 2 game) (number 7 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=10.483, prob=5.24e-04]
              Pred@0095: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_blocks)))) (value (list (number 3 block) (number 5 block) (number 7 block) (number 8 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose season is 2004")) [score=10.479, prob=5.22e-04]
              Pred@0096: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is at most number of rebounds (over a season) of player kobe bryant")) [score=10.429, prob=4.96e-04]
              Pred@0097: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_assists)))) (value (list (number 5 assist) (number 6 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant whose season is 2004")) [score=10.417, prob=4.90e-04]
              Pred@0098: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string season)))) (value (list (date 2000 -1 -1) (date 2001 -1 -1) (date 2003 -1 -1) (date 2006 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of turnovers (over a season) is 3")) [score=10.412, prob=4.88e-04]
              Pred@0099: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_turnovers)))) (value (list (number 5 turnover) (number 6 turnover) (number 8 turnover) (number 9 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose season is 2004")) [score=10.411, prob=4.88e-04]
              Pred@0100: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of assists (over a season) is 3")) [score=10.410, prob=4.87e-04]
              Pred@0101: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is at least season of player kobe bryant")) [score=10.406, prob=4.85e-04]
              Pred@0102: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_steals)))) (value (list (number 2 steal) (number 3 steal) (number 5 steal) (number 9 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=10.404, prob=4.84e-04]
              Pred@0103: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 assist)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.3) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is larger than 3")) [score=10.382, prob=4.73e-04]
              Pred@0104: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_turnovers)))) (value (list (number 1 turnover) (number 3 turnover) (number 4 turnover) (number 5 turnover) (number 6 turnover) (number 7 turnover) (number 8 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant whose position is point guard")) [score=10.304, prob=4.38e-04]
              Pred@0105: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 point)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.29) (name en.player.38) (name en.player.45) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is at most 3")) [score=10.303, prob=4.38e-04]
              Pred@0106: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_games_played)))) (value (list (number 1 game) (number 3 game) (number 6 game) (number 8 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=10.267, prob=4.22e-04]
              Pred@0107: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 turnover)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is at most 3")) [score=10.187, prob=3.90e-04]
              Pred@0108: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string num_rebounds)))) (value (list (number 1 rebound) (number 8 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of fouls (over a season) is 3")) [score=10.186, prob=3.89e-04]
              Pred@0109: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of assists (over a season) is 3")) [score=10.181, prob=3.87e-04]
              Pred@0110: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_steals)))) (value (list (number 3 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=10.155, prob=3.77e-04]
              Pred@0111: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is at least number of rebounds (over a season) of player kobe bryant")) [score=10.112, prob=3.62e-04]
              Pred@0112: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_steals)))) (value (list (number 0 steal) (number 1 steal) (number 2 steal) (number 3 steal) (number 4 steal) (number 5 steal) (number 7 steal) (number 9 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose team is los angeles lakers")) [score=10.106, prob=3.59e-04]
              Pred@0113: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_points)))) (value (list (number 4 point) (number 6 point) (number 8 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose season is 2004")) [score=10.010, prob=3.26e-04]
              Pred@0114: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_points)))) (value (list (number 0 point) (number 1 point) (number 3 point) (number 4 point) (number 6 point) (number 8 point) (number 9 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant whose position is point guard")) [score=9.979, prob=3.16e-04]
              Pred@0115: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 game)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.25) (name en.player.27) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.49) (name en.player.51) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is larger than 3")) [score=9.978, prob=3.16e-04]
              Pred@0116: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_games_played)))) (value (list (number 1 game) (number 2 game) (number 3 game) (number 4 game) (number 5 game) (number 6 game) (number 7 game) (number 8 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose team is los angeles lakers")) [score=9.970, prob=3.14e-04]
              Pred@0117: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_fouls)))) (value (list (number 9 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=9.966, prob=3.12e-04]
              Pred@0118: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_steals)))) (value (list (number 1 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=9.959, prob=3.10e-04]
              Pred@0119: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_blocks)))) (value (list (number 3 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=9.914, prob=2.97e-04]
              Pred@0120: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string season)))) (value (list (date 2002 -1 -1) (date 2004 -1 -1) (date 2006 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of blocks (over a season) is 3")) [score=9.907, prob=2.94e-04]
              Pred@0121: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is larger than season of player kobe bryant")) [score=9.894, prob=2.91e-04]
              Pred@0122: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 point)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is at least 3")) [score=9.884, prob=2.88e-04]
              Pred@0123: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string season)))) (value (list (date 2001 -1 -1) (date 2003 -1 -1) (date 2008 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of played games (over a season) is 3")) [score=9.854, prob=2.79e-04]
              Pred@0124: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists) (string =) (number 3 assist)) (string season)))) (value (list (date 2000 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2006 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of assists (over a season) is 3")) [score=9.816, prob=2.69e-04]
              Pred@0125: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 point)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.29) (name en.player.38) (name en.player.45) (name en.player.51) (name en.player.54) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is smaller than 3")) [score=9.773, prob=2.58e-04]
              Pred@0126: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is at most season of player kobe bryant")) [score=9.767, prob=2.56e-04]
              Pred@0127: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 assist)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.29) (name en.player.32) (name en.player.34) (name en.player.38) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is smaller than 3")) [score=9.755, prob=2.53e-04]
              Pred@0128: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of points (over a season) is 3")) [score=9.748, prob=2.51e-04]
              Pred@0129: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_blocks)))) (value (list (number 0 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=9.743, prob=2.50e-04]
              Pred@0130: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 block)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.38) (name en.player.4) (name en.player.49) (name en.player.51) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is at most 3")) [score=9.735, prob=2.48e-04]
              Pred@0131: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of blocks (over a season) is 3")) [score=9.717, prob=2.43e-04]
              Pred@0132: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of played games (over a season) is 3")) [score=9.715, prob=2.43e-04]
              Pred@0133: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 assist)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.3) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is at least 3")) [score=9.694, prob=2.38e-04]
              Pred@0134: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string num_rebounds)))) (value (list (number 1 rebound) (number 2 rebound) (number 5 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of points (over a season) is 3")) [score=9.686, prob=2.36e-04]
              Pred@0135: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_fouls)))) (value (list (number 0 foul) (number 1 foul) (number 3 foul) (number 4 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose season is 2004")) [score=9.678, prob=2.34e-04]
              Pred@0136: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 block)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is at least 3")) [score=9.674, prob=2.33e-04]
              Pred@0137: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers) (string =) (number 3 turnover)) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of turnovers (over a season) is 3")) [score=9.643, prob=2.26e-04]
              Pred@0138: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_steals)))) (value (list (number 0 steal) (number 2 steal) (number 3 steal) (number 5 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose season is 2004")) [score=9.599, prob=2.17e-04]
              Pred@0139: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.29) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.49) (name en.player.51) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is smaller than season of player kobe bryant")) [score=9.581, prob=2.13e-04]
              Pred@0140: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string num_rebounds)))) (value (list (number 0 rebound) (number 2 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of played games (over a season) is 3")) [score=9.568, prob=2.10e-04]
              Pred@0141: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 block)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is larger than 3")) [score=9.542, prob=2.04e-04]
              Pred@0142: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_games_played)))) (value (list (number 0 game) (number 1 game) (number 7 game) (number 8 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose season is 2004")) [score=9.532, prob=2.02e-04]
              Pred@0143: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_fouls)))) (value (list (number 0 foul) (number 1 foul) (number 2 foul) (number 4 foul) (number 6 foul) (number 7 foul) (number 8 foul) (number 9 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant whose position is point guard")) [score=9.522, prob=2.00e-04]
              Pred@0144: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string team)))) (value (list (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of fouls (over a season) is 3")) [score=9.520, prob=2.00e-04]
              Pred@0145: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of steals (over a season) is 3")) [score=9.510, prob=1.98e-04]
              Pred@0146: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of points (over a season) is 3")) [score=9.487, prob=1.93e-04]
              Pred@0147: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 turnover)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is smaller than 3")) [score=9.449, prob=1.86e-04]
              Pred@0148: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of steals (over a season) is 3")) [score=9.327, prob=1.65e-04]
              Pred@0149: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string team) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.team.lakers en.team.cavaliers))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose team is los angeles lakers or cleveland cavaliers")) [score=9.285, prob=1.58e-04]
              Pred@0150: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of blocks (over a season) is 3")) [score=9.274, prob=1.56e-04]
              Pred@0151: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 turnover)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.38) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is at least 3")) [score=9.200, prob=1.45e-04]
              Pred@0152: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks) (string =) (number 3 block)) (string num_rebounds)))) (value (list (number 2 rebound) (number 5 rebound) (number 6 rebound) (number 8 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of blocks (over a season) is 3")) [score=9.186, prob=1.43e-04]
              Pred@0153: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 block)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.4) (name en.player.49) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is smaller than 3")) [score=9.160, prob=1.40e-04]
              Pred@0154: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string team)))) (value (list (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose team is los angeles lakers")) [score=9.138, prob=1.36e-04]
              Pred@0155: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_steals)))) (value (list (number 0 steal) (number 2 steal) (number 3 steal) (number 4 steal) (number 5 steal) (number 6 steal) (number 7 steal) (number 9 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant whose position is point guard")) [score=9.113, prob=1.33e-04]
              Pred@0156: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played) (string =) (number 3 game)) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of played games (over a season) is 3")) [score=9.079, prob=1.29e-04]
              Pred@0157: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string num_rebounds)))) (value (list (number 0 rebound) (number 1 rebound) (number 2 rebound) (number 5 rebound) (number 6 rebound) (number 8 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose team is los angeles lakers")) [score=9.072, prob=1.28e-04]
              Pred@0158: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string position)))) (value (list (name en.position.forward))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of fouls (over a season) is 3")) [score=9.067, prob=1.27e-04]
              Pred@0159: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_steals) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is number of steals (over a season) of player kobe bryant")) [score=9.054, prob=1.25e-04]
              Pred@0160: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is larger than number of rebounds (over a season) of player kobe bryant")) [score=9.042, prob=1.24e-04]
              Pred@0161: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 steal)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.25) (name en.player.32) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is at most 3")) [score=8.998, prob=1.19e-04]
              Pred@0162: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string num_rebounds)))) (value (list (number 3 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of rebounds (over a season) is 3")) [score=8.944, prob=1.12e-04]
              Pred@0163: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string team)))) (value (list (name en.team.cavaliers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose number of rebounds (over a season) is 3")) [score=8.930, prob=1.11e-04]
              Pred@0164: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls) (string =) (number 3 foul)) (string season)))) (value (list (date 2003 -1 -1) (date 2004 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of fouls (over a season) is 3")) [score=8.924, prob=1.10e-04]
              Pred@0165: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 foul)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is larger than 3")) [score=8.869, prob=1.04e-04]
              Pred@0166: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose team is los angeles lakers")) [score=8.835, prob=1.01e-04]
              Pred@0167: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is at most 2004 or 2010")) [score=8.820, prob=9.93e-05]
              Pred@0168: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 point)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is larger than 3")) [score=8.808, prob=9.81e-05]
              Pred@0169: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string num_rebounds)))) (value (list (number 0 rebound) (number 1 rebound) (number 2 rebound) (number 7 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose number of steals (over a season) is 3")) [score=8.800, prob=9.74e-05]
              Pred@0170: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string num_rebounds)))) (value (list (number 1 rebound) (number 2 rebound) (number 7 rebound) (number 8 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose season is 2004")) [score=8.736, prob=9.13e-05]
              Pred@0171: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is at least 2004 or 2010")) [score=8.730, prob=9.08e-05]
              Pred@0172: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals) (string =) (number 3 steal)) (string season)))) (value (list (date 2002 -1 -1) (date 2004 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of steals (over a season) is 3")) [score=8.727, prob=9.05e-05]
              Pred@0173: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_games_played)))) (value (list (number 1 game) (number 2 game) (number 3 game) (number 4 game) (number 5 game) (number 6 game) (number 7 game) (number 8 game) (number 9 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant whose position is point guard")) [score=8.704, prob=8.85e-05]
              Pred@0174: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose season is larger than 2004 or 2010")) [score=8.699, prob=8.80e-05]
              Pred@0175: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose season is larger than 2004")) [score=8.686, prob=8.69e-05]
              Pred@0176: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string position)))) (value (list (name en.position.forward))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose number of rebounds (over a season) is 3")) [score=8.656, prob=8.43e-05]
              Pred@0177: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string team) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose team is team of player kobe bryant")) [score=8.561, prob=7.66e-05]
              Pred@0178: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_blocks)))) (value (list (number 1 block) (number 2 block) (number 3 block) (number 4 block) (number 5 block) (number 6 block) (number 7 block) (number 8 block) (number 9 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant whose position is point guard")) [score=8.559, prob=7.65e-05]
              Pred@0179: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string num_rebounds)))) (value (list (number 0 rebound) (number 1 rebound) (number 2 rebound) (number 4 rebound) (number 5 rebound) (number 6 rebound) (number 8 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant whose position is point guard")) [score=8.495, prob=7.18e-05]
              Pred@0180: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds) (string =) (number 3 rebound)) (string season)))) (value (list (date 2006 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of rebounds (over a season) is 3")) [score=8.471, prob=7.01e-05]
              Pred@0181: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 foul)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.27) (name en.player.34) (name en.player.4) (name en.player.48) (name en.player.51) (name en.player.54) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is at most 3")) [score=8.447, prob=6.84e-05]
              Pred@0182: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 game)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is at least 3")) [score=8.392, prob=6.48e-05]
              Pred@0183: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points) (string =) (number 3 point)) (string season)))) (value (list (date 2001 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose number of points (over a season) is 3")) [score=8.388, prob=6.45e-05]
              Pred@0184: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 foul)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.27) (name en.player.34) (name en.player.48) (name en.player.51) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is smaller than 3")) [score=8.284, prob=5.81e-05]
              Pred@0185: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 game)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.48) (name en.player.49) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is at most 3")) [score=8.280, prob=5.79e-05]
              Pred@0186: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose season is 2004")) [score=8.220, prob=5.45e-05]
              Pred@0187: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_fouls) (string !=) (number 3 foul))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is not 3")) [score=8.194, prob=5.31e-05]
              Pred@0188: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 foul)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of fouls (over a season) is at least 3")) [score=8.171, prob=5.19e-05]
              Pred@0189: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team) (string =) en.team.lakers) (string season)))) (value (list (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose team is los angeles lakers")) [score=8.005, prob=4.40e-05]
              Pred@0190: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.29) (name en.player.34) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of assists (over a season)")) [score=7.984, prob=4.30e-05]
              Pred@0191: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.29) (name en.player.38) (name en.player.54) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of points (over a season)")) [score=7.983, prob=4.30e-05]
              Pred@0192: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_turnovers) (string !=) (number 3 turnover))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of turnovers (over a season) is not 3")) [score=7.954, prob=4.18e-05]
              Pred@0193: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string season)))) (value (list (date 2004 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose season is 2004")) [score=7.940, prob=4.12e-05]
              Pred@0194: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 game)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.48) (name en.player.49) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is smaller than 3")) [score=7.937, prob=4.11e-05]
              Pred@0195: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is smaller than 2004 or 2010")) [score=7.931, prob=4.08e-05]
              Pred@0196: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season) (string =) (date 2004 -1 -1)) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose season is 2004")) [score=7.833, prob=3.70e-05]
              Pred@0197: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string position) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose position is position of player kobe bryant")) [score=7.812, prob=3.62e-05]
              Pred@0198: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 rebound)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.3) (name en.player.4) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is at most 3")) [score=7.798, prob=3.57e-05]
              Pred@0199: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string position) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.position.point_guard en.position.forward))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose position is point guard or forward")) [score=7.795, prob=3.56e-05]
              Pred@0200: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 rebound)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is at least 3")) [score=7.764, prob=3.46e-05]
              Pred@0201: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string season)))) (value (list (date 2000 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant whose position is point guard")) [score=7.762, prob=3.45e-05]
              Pred@0202: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant whose position is point guard")) [score=7.630, prob=3.02e-05]
              Pred@0203: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of blocks (over a season)")) [score=7.605, prob=2.95e-05]
              Pred@0204: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string position) (string !=) en.position.point_guard)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.27) (name en.player.3) (name en.player.32) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose position is not point guard")) [score=7.487, prob=2.62e-05]
              Pred@0205: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 steal)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.49) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is at least 3")) [score=7.457, prob=2.54e-05]
              Pred@0206: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_games_played) (string !=) (number 3 game))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of played games (over a season) is not 3")) [score=7.445, prob=2.51e-05]
              Pred@0207: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.25) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose season is smaller than 2004")) [score=7.370, prob=2.33e-05]
              Pred@0208: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.49) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is at most 2004")) [score=7.353, prob=2.29e-05]
              Pred@0209: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.7))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of turnovers (over a season)")) [score=7.308, prob=2.19e-05]
              Pred@0210: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string team) (string !=) en.team.lakers)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose team is not los angeles lakers")) [score=7.263, prob=2.09e-05]
              Pred@0211: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string season) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is season of player kobe bryant")) [score=7.250, prob=2.07e-05]
              Pred@0212: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position) (string =) en.position.point_guard) (string position)))) (value (list (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant whose position is point guard")) [score=7.235, prob=2.03e-05]
              Pred@0213: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_points) (string !=) (number 3 point))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of points (over a season) is not 3")) [score=7.202, prob=1.97e-05]
              Pred@0214: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_rebounds) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is number of rebounds (over a season) of player kobe bryant")) [score=7.083, prob=1.75e-05]
              Pred@0215: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is at least 2004")) [score=7.070, prob=1.73e-05]
              Pred@0216: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_points)))) (value (list (number 0 point) (number 1 point) (number 3 point) (number 4 point) (number 5 point) (number 6 point) (number 7 point) (number 8 point) (number 9 point))) (type fb:type.any) (canonicalUtterance "number of points (over a season) of player kobe bryant")) [score=7.068, prob=1.72e-05]
              Pred@0217: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_assists) (string !=) (number 3 assist))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of assists (over a season) is not 3")) [score=6.925, prob=1.49e-05]
              Pred@0218: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_assists)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.25) (name en.player.48) (name en.player.51) (name en.player.54) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of assists (over a season)")) [score=6.913, prob=1.48e-05]
              Pred@0219: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_points)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of points (over a season)")) [score=6.850, prob=1.39e-05]
              Pred@0220: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_blocks) (string !=) (number 3 block))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of blocks (over a season) is not 3")) [score=6.829, prob=1.36e-05]
              Pred@0221: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.27) (name en.player.48) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of fouls (over a season)")) [score=6.827, prob=1.35e-05]
              Pred@0222: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_turnovers)))) (value (list (number 1 turnover) (number 2 turnover) (number 3 turnover) (number 4 turnover) (number 5 turnover) (number 6 turnover) (number 7 turnover) (number 8 turnover) (number 9 turnover))) (type fb:type.any) (canonicalUtterance "number of turnovers (over a season) of player kobe bryant")) [score=6.781, prob=1.29e-05]
              Pred@0223: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_turnovers)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.32) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of turnovers (over a season)")) [score=6.748, prob=1.25e-05]
              Pred@0224: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 steal)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.25) (name en.player.32) (name en.player.38) (name en.player.4) (name en.player.48) (name en.player.51) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is smaller than 3")) [score=6.661, prob=1.15e-05]
              Pred@0225: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string team) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has at most two team")) [score=6.642, prob=1.12e-05]
              Pred@0226: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 steal)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.49) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is larger than 3")) [score=6.549, prob=1.02e-05]
              Pred@0227: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_games_played)))) (value (list (number 0 game) (number 1 game) (number 2 game) (number 3 game) (number 4 game) (number 5 game) (number 6 game) (number 7 game) (number 8 game) (number 9 game))) (type fb:type.any) (canonicalUtterance "number of played games (over a season) of player kobe bryant")) [score=6.450, prob=9.28e-06]
              Pred@0228: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_blocks)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.32) (name en.player.38) (name en.player.45) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of blocks (over a season)")) [score=6.365, prob=8.53e-06]
              Pred@0229: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 rebound)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is larger than 3")) [score=6.320, prob=8.16e-06]
              Pred@0230: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.32) (name en.player.4) (name en.player.48) (name en.player.51) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of steals (over a season)")) [score=6.265, prob=7.71e-06]
              Pred@0231: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_blocks)))) (value (list (number 0 block) (number 1 block) (number 2 block) (number 3 block) (number 4 block) (number 5 block) (number 6 block) (number 7 block) (number 8 block) (number 9 block))) (type fb:type.any) (canonicalUtterance "number of blocks (over a season) of player kobe bryant")) [score=6.227, prob=7.42e-06]
              Pred@0232: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of played games (over a season)")) [score=6.217, prob=7.35e-06]
              Pred@0233: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_assists)))) (value (list (number 0 assist) (number 1 assist) (number 2 assist) (number 3 assist) (number 4 assist) (number 5 assist) (number 6 assist) (number 7 assist) (number 8 assist) (number 9 assist))) (type fb:type.any) (canonicalUtterance "number of assists (over a season) of player kobe bryant")) [score=6.214, prob=7.33e-06]
              Pred@0234: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.team.lakers en.team.cavaliers))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "los angeles lakers or cleveland cavaliers")) [score=6.111, prob=6.61e-06]
              Pred@0235: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_steals)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.34) (name en.player.37) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of steals (over a season)")) [score=5.952, prob=5.64e-06]
              Pred@0236: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_steals)))) (value (list (number 0 steal) (number 1 steal) (number 2 steal) (number 3 steal) (number 4 steal) (number 5 steal) (number 6 steal) (number 7 steal) (number 9 steal))) (type fb:type.any) (canonicalUtterance "number of steals (over a season) of player kobe bryant")) [score=5.927, prob=5.50e-06]
              Pred@0237: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string position) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has at most two position")) [score=5.917, prob=5.45e-06]
              Pred@0238: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_fouls)))) (value (list (number 0 foul) (number 1 foul) (number 2 foul) (number 3 foul) (number 4 foul) (number 5 foul) (number 6 foul) (number 7 foul) (number 8 foul) (number 9 foul))) (type fb:type.any) (canonicalUtterance "number of fouls (over a season) of player kobe bryant")) [score=5.609, prob=4.01e-06]
              Pred@0239: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_games_played)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.25) (name en.player.4) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of played games (over a season)")) [score=5.605, prob=3.99e-06]
              Pred@0240: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string position))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has the least number of position")) [score=5.554, prob=3.79e-06]
              Pred@0241: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string position) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has less than two position")) [score=5.553, prob=3.78e-06]
              Pred@0242: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string team))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has the least number of team")) [score=5.543, prob=3.75e-06]
              Pred@0243: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.3) (name en.player.45) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest season")) [score=5.536, prob=3.72e-06]
              Pred@0244: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_rebounds) (string !=) (number 3 rebound))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is not 3")) [score=5.454, prob=3.43e-06]
              Pred@0245: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string season)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.19) (name en.player.27) (name en.player.32) (name en.player.48) (name en.player.54) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest season")) [score=5.426, prob=3.34e-06]
              Pred@0246: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_fouls)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.25) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of fouls (over a season)")) [score=5.393, prob=3.22e-06]
              Pred@0247: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string position))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has the most number of position")) [score=5.040, prob=2.27e-06]
              Pred@0248: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string season) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.23) (name en.player.38) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose season is 2004 or 2010")) [score=5.013, prob=2.21e-06]
              Pred@0249: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 rebound)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.3) (name en.player.4) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose number of rebounds (over a season) is smaller than 3")) [score=4.815, prob=1.81e-06]
              Pred@0250: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string team)))) (value (list (name en.team.cavaliers) (name en.team.lakers))) (type fb:type.any) (canonicalUtterance "team of player kobe bryant")) [score=4.802, prob=1.79e-06]
              Pred@0251: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string num_steals) (string !=) (number 3 steal))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player whose number of steals (over a season) is not 3")) [score=4.765, prob=1.72e-06]
              Pred@0252: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string position)))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "position of player kobe bryant")) [score=4.660, prob=1.55e-06]
              Pred@0253: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the smallest number of rebounds (over a season)")) [score=4.529, prob=1.36e-06]
              Pred@0254: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string team))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has the most number of team")) [score=4.322, prob=1.11e-06]
              Pred@0255: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.position.point_guard en.position.forward))) (value (list (name en.position.forward) (name en.position.point_guard))) (type fb:type.any) (canonicalUtterance "point guard or forward")) [score=4.238, prob=1.02e-06]
              Pred@0256: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string season)))) (value (list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "season of player kobe bryant")) [score=4.223, prob=1.00e-06]
              Pred@0257: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string num_rebounds)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.37) (name en.player.38) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player that has the largest number of rebounds (over a season)")) [score=4.028, prob=8.24e-07]
              Pred@0258: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.player.kobe_bryant (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string player))) (string num_rebounds)))) (value (list (number 0 rebound) (number 1 rebound) (number 2 rebound) (number 3 rebound) (number 4 rebound) (number 5 rebound) (number 6 rebound) (number 7 rebound) (number 8 rebound) (number 9 rebound))) (type fb:type.any) (canonicalUtterance "number of rebounds (over a season) of player kobe bryant")) [score=3.770, prob=6.36e-07]
              Pred@0259: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.player.kobe_bryant en.player.lebron_james))) (value (list (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "kobe bryant or lebron james")) [score=3.737, prob=6.16e-07]
              Pred@0260: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string team) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.23) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant) (name en.player.lebron_james))) (type fb:type.any) (canonicalUtterance "player that has less than two team")) [score=3.675, prob=5.79e-07]
              Pred@0261: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string season) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string player))) (string player)))) (value (list (name en.player.18) (name en.player.19) (name en.player.25) (name en.player.27) (name en.player.29) (name en.player.3) (name en.player.32) (name en.player.34) (name en.player.37) (name en.player.38) (name en.player.4) (name en.player.45) (name en.player.48) (name en.player.49) (name en.player.51) (name en.player.54) (name en.player.7) (name en.player.kobe_bryant))) (type fb:type.any) (canonicalUtterance "player whose season is not 2004")) [score=3.503, prob=4.87e-07]
              Pred@0262: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.position) (string !type))))) (value (list (number 2 count))) (type fb:type.any) (canonicalUtterance "number of position")) [score=3.229, prob=3.71e-07]
              Pred@0263: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (value (list (date 2004 -1 -1) (date 2010 -1 -1))) (type fb:type.any) (canonicalUtterance "2004 or 2010")) [score=2.729, prob=2.25e-07]
              Pred@0264: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.team) (string !type))))) (value (list (number 2 count))) (type fb:type.any) (canonicalUtterance "number of team")) [score=2.373, prob=1.57e-07]
              Pred@0265: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.player) (string !type))))) (value (list (number 60 count))) (type fb:type.any) (canonicalUtterance "number of player")) [score=2.212, prob=1.34e-07]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=266 parsedNumCandidates=266 timeout=0 numTokens=1 parseTime=5118 maxCellSize=622 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=18620 numCells=590
            Cumulative(iter=0.train): correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=266 parsedNumCandidates=266 timeout=0 numTokens=1 parseTime=5118 maxCellSize=622 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=18620 numCells=590
          } [5.2s, cum. 5.2s]
        } [5.2s, cum. 5.2s]
        Stats for iter=0.train: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=266 parsedNumCandidates=266 timeout=0 numTokens=1 parseTime=5118 maxCellSize=622 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=18620 numCells=590
        Evaluation stats for iter=0.train {
          correct = 0/ << 0 ~ 0 >> /0 (1)
          oracle = 0/ << 0 ~ 0 >> /0 (1)
          partCorrect = 0/ << 0 ~ 0 >> /0 (1)
          partOracle = 0/ << 0 ~ 0 >> /0 (1)
          parsed = 1/ << 1 ~ 0 >> /1 (1)
          numCandidates = 266/ << 266 ~ 0 >> /266 (1)
          parsedNumCandidates = 266/ << 266 ~ 0 >> /266 (1)
          timeout = 0/ << 0 ~ 0 >> /0 (1)
          numTokens = 1/ << 1 ~ 0 >> /1 (1)
          parseTime = 5118/ << 5118 ~ 0 >> /5118 (1)
          maxCellSize = 622@$CP1:13/ << 622 ~ 0 >> /622@$CP1:13 (1)
          fallOffBeam = 0/ << 0 ~ 0 >> /0 (1)
          totalDerivs = 0/ << 0 ~ 0 >> /0 (1)
          numOfFeaturizedDerivs = 18620/ << 18620 ~ 0 >> /18620 (1)
          numCells = 590/ << 590 ~ 0 >> /590 (1)
        }
      } [5.2s, cum. 5.2s]
      StopWatchSet {
        FeatureExtractor.extractLocal	2.2s (0.0s x 18620)
        Executor.execute	1.3s (0.0s x 14361)
        Parser.parse	5.2s (5.2s x 1)
      }
      Params.write(genovernight.out/basketball/params.0) 
      StopWatchSet {
        FeatureExtractor.extractLocal	2.2s (0.0s x 18620)
        Executor.execute	1.3s (0.0s x 14361)
        Parser.parse	5.2s (5.2s x 1)
      }
      Params.write(genovernight.out/basketball/params.0) 
    } [5.2s, cum. 5.2s]
  } [5.2s, cum. 5.4s]
  Execution directory: genovernight.out/basketball
} [5.5s]
