main() {
  Execution directory: genovernight.out/recipes
  Grammar.read {
    WARNING: Category not defined in the grammar: $VP; used in rule: $Intermediate1 -> that $VP (SelectFn 0)
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate246 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r0 (lambda e (call edu.stanford.nlp.sempre.overnight.Simple...(200 total)
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate251 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r (lambda cp (call edu.stanford.nlp.sempre.overnight.Simple...(209 total)
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate252 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r (lambda cp (call edu.stanford.nlp.sempre.overnight.Simple...(209 total)
    WARNING: Category not defined in the grammar: $BinaryOp; used in rule: $BinaryOpRight -> $BinaryOp $EntityNP2 (JoinFn betaReduce forward)
    Valid tags: [general, generate, geo440, geo880, parse, regex]
    Used tags: [general, generate]
    363 rules
  }
  Parser: 72 catUnaryRules (sorted), 291 nonCatUnaryRules (in trie)
  Dataset.read {
    Reading overnight/null.examples {
      Example overnight/null.examples:0 (0): [null] => null
    }
  }
  Learner.learn() {
    Iteration 0/0 {
      Processing iter=0.train: 1 examples {
        Examples {
          iter=0.train: example 0/1: overnight/null.examples:0 {
            Example: null {
              Tokens: [null]
              Lemmatized tokens: [null]
              POS tags: [UNK]
              NER tags: [UNK]
              NER values: [UNK]
              Dependency children: []
            }
            Parser.parse: parse {
              WARNING: Currently CatSizeBound is usable only when useSizeInsteadOfDepth = true.
              FloatingParser.infer() {
                SimpleWorld.createWorld: domain = recipes (493 entity/property pairs) 
                Parser.ensureExecuted 
              }
            }
            Parser.setEvaluation: 124 candidates {
              Pred@0000: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.12) (name en.recipe.14) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is at least preparation time of rice pudding")) [score=13.911, prob=0.188]
              Pred@0001: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.26) (name en.recipe.27) (name en.recipe.31) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.5) (name en.recipe.52) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is smaller than preparation time of rice pudding")) [score=13.680, prob=0.149]
              Pred@0002: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.7) (name en.recipe.8))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is larger than posting date of rice pudding")) [score=13.155, prob=0.088]
              Pred@0003: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is larger than preparation time of rice pudding")) [score=12.814, prob=0.063]
              Pred@0004: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.26) (name en.recipe.27) (name en.recipe.31) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.5) (name en.recipe.52) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is at most preparation time of rice pudding")) [score=12.560, prob=0.049]
              Pred@0005: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.22) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.4) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.8) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is at most preparation time of rice pudding")) [score=12.453, prob=0.044]
              Pred@0006: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.12) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is larger than preparation time of rice pudding")) [score=12.450, prob=0.044]
              Pred@0007: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.59) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is at least posting date of rice pudding")) [score=12.187, prob=0.034]
              Pred@0008: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))) (value (list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.53) (name en.recipe.58) (name en.recipe.6) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is smaller than posting date of rice pudding")) [score=12.162, prob=0.033]
              Pred@0009: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.24) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is at most cooking time of rice pudding")) [score=11.833, prob=0.024]
              Pred@0010: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.7) (name en.recipe.8))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is larger than 2004 or 2010")) [score=11.702, prob=0.021]
              Pred@0011: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.50) (name en.recipe.51) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is at least preparation time of rice pudding")) [score=11.585, prob=0.018]
              Pred@0012: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1))))) (value (list (name en.meal.dinner) (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that recipe whose posting date is 2004 is for")) [score=11.574, prob=0.018]
              Pred@0013: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.22) (name en.recipe.31) (name en.recipe.32) (name en.recipe.4) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.8) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is smaller than preparation time of rice pudding")) [score=11.529, prob=0.017]
              Pred@0014: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.26) (name en.recipe.27) (name en.recipe.31) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.52) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is smaller than cooking time of rice pudding")) [score=11.499, prob=0.017]
              Pred@0015: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding)))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.13) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.3) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.4) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for meal that rice pudding is for")) [score=11.418, prob=0.016]
              Pred@0016: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding))) (value (list (name en.ingredient.milk))) (type fb:type.any) (canonicalUtterance "ingredient that rice pudding requires and that rice pudding requires")) [score=11.370, prob=0.015]
              Pred@0017: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding))) (value (list (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that rice pudding is for and that rice pudding is for")) [score=11.301, prob=0.014]
              Pred@0018: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))) (value (list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.51) (name en.recipe.53) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is at most posting date of rice pudding")) [score=11.278, prob=0.014]
              Pred@0019: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch)))) (value (list (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that recipe that is for lunch is for")) [score=11.141, prob=0.012]
              Pred@0020: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.12) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.25) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is larger than cooking time of rice pudding")) [score=11.042, prob=0.011]
              Pred@0021: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.12) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is at least cooking time of rice pudding")) [score=10.982, prob=0.010]
              Pred@0022: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time))))) (value (list (name en.recipe.14) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is preparation time of rice pudding")) [score=10.861, prob=0.009]
              Pred@0023: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string meal) (string =) en.meal.lunch))) (value (list (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is 2004 and that is for lunch")) [score=10.622, prob=0.007]
              Pred@0024: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date))))) (value (list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is posting date of rice pudding")) [score=10.144, prob=0.004]
              Pred@0025: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.21) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is larger than cooking time of rice pudding")) [score=10.134, prob=0.004]
              Pred@0026: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string posting_date) (string =) (date 2004 -1 -1)))) (value (list (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for lunch and whose posting date is 2004")) [score=10.130, prob=0.004]
              Pred@0027: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1))))) (value (list (name en.ingredient.milk) (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "ingredient that recipe whose posting date is 2004 requires")) [score=10.098, prob=0.004]
              Pred@0028: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is smaller than 2004 or 2010")) [score=10.054, prob=0.004]
              Pred@0029: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.28) (name en.recipe.31) (name en.recipe.34) (name en.recipe.35) (name en.recipe.38) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires ingredient that rice pudding requires")) [score=10.033, prob=0.004]
              Pred@0030: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))) (value (list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is 2004 and whose posting date is 2004")) [score=10.014, prob=0.004]
              Pred@0031: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time))))) (value (list (name en.recipe.28) (name en.recipe.50))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is preparation time of rice pudding")) [score=9.920, prob=0.003]
              Pred@0032: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.2) (name en.recipe.20) (name en.recipe.22) (name en.recipe.23) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.36) (name en.recipe.4) (name en.recipe.41) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is at most cooking time of rice pudding")) [score=9.875, prob=0.003]
              Pred@0033: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))) (value (list (name en.recipe.51) (name en.recipe.57) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires milk and whose posting date is 2004")) [score=9.811, prob=0.003]
              Pred@0034: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.59) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is at least 2004")) [score=9.649, prob=0.003]
              Pred@0035: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for less than two meal")) [score=9.627, prob=0.003]
              Pred@0036: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string meal) (string =) en.meal.lunch))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.13) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.3) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.4) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for lunch and that is for lunch")) [score=9.608, prob=0.003]
              Pred@0037: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk)))) (value (list (name en.meal.dinner) (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that recipe that requires milk is for")) [score=9.543, prob=0.002]
              Pred@0038: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.meal.dinner) (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that at least two recipe is for")) [score=9.502, prob=0.002]
              Pred@0039: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "meal that less than two recipe is for")) [score=9.368, prob=0.002]
              Pred@0040: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time))))) (value (list (name en.recipe.24) (name en.recipe.28) (name en.recipe.32) (name en.recipe.54))) (type fb:type.any) (canonicalUtterance "recipe whose preparation time is cooking time of rice pudding")) [score=9.271, prob=0.002]
              Pred@0041: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.22) (name en.recipe.23) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.4) (name en.recipe.41) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is smaller than cooking time of rice pudding")) [score=9.262, prob=0.002]
              Pred@0042: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.meal.dinner) (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that the most number of recipe is for")) [score=9.255, prob=0.002]
              Pred@0043: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is at most 2004 or 2010")) [score=9.243, prob=0.002]
              Pred@0044: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string requires) (string =) en.ingredient.milk))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.34) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for lunch and that requires milk")) [score=9.223, prob=0.002]
              Pred@0045: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.59) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is at least 2004 or 2010")) [score=8.995, prob=0.001]
              Pred@0046: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for at most two meal")) [score=8.963, prob=0.001]
              Pred@0047: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that is for at least two meal")) [score=8.939, prob=0.001]
              Pred@0048: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.7) (name en.recipe.8))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is larger than 2004")) [score=8.901, prob=0.001]
              Pred@0049: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk)))) (value (list (name en.ingredient.milk))) (type fb:type.any) (canonicalUtterance "ingredient that recipe that requires milk requires")) [score=8.835, prob=0.001]
              Pred@0050: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string requires) (string =) en.ingredient.milk))) (value (list (name en.recipe.51) (name en.recipe.57) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is 2004 and that requires milk")) [score=8.795, prob=0.001]
              Pred@0051: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string meal) (string =) en.meal.lunch))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.34) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires milk and that is for lunch")) [score=8.709, prob=0.001]
              Pred@0052: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))) (value (list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.21) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is at least cooking time of rice pudding")) [score=8.686, prob=0.001]
              Pred@0053: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (string meal) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for the most number of meal")) [score=8.674, prob=0.001]
              Pred@0054: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that is for more than two meal")) [score=8.643, prob=9.70e-04]
              Pred@0055: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.53) (name en.recipe.58) (name en.recipe.6) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is smaller than 2004")) [score=8.571, prob=9.02e-04]
              Pred@0056: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "meal that at most two recipe is for")) [score=8.437, prob=7.89e-04]
              Pred@0057: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch)))) (value (list (name en.ingredient.milk) (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "ingredient that recipe that is for lunch requires")) [score=8.313, prob=6.98e-04]
              Pred@0058: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string requires) (string =) en.ingredient.milk))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.28) (name en.recipe.31) (name en.recipe.34) (name en.recipe.35) (name en.recipe.38) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires milk and that requires milk")) [score=8.276, prob=6.72e-04]
              Pred@0059: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time))))) (value (list (name en.recipe.2) (name en.recipe.36) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose cooking time is cooking time of rice pudding")) [score=8.222, prob=6.37e-04]
              Pred@0060: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.ingredient.milk) (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "ingredient that at least two recipe requires")) [score=8.131, prob=5.81e-04]
              Pred@0061: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "ingredient that the most number of recipe requires")) [score=8.105, prob=5.66e-04]
              Pred@0062: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that has at least two cuisine")) [score=8.080, prob=5.52e-04]
              Pred@0063: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (string meal) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for the least number of meal")) [score=7.927, prob=4.74e-04]
              Pred@0064: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.meal.dinner) (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that more than two recipe is for")) [score=7.858, prob=4.42e-04]
              Pred@0065: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that is for two meal")) [score=7.836, prob=4.33e-04]
              Pred@0066: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.51) (name en.recipe.53) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is at most 2004")) [score=7.825, prob=4.28e-04]
              Pred@0067: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "meal that two recipe is for")) [score=7.784, prob=4.11e-04]
              Pred@0068: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cuisine))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.21) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.35) (name en.recipe.36) (name en.recipe.38) (name en.recipe.39) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose cuisine is cuisine of rice pudding")) [score=7.744, prob=3.95e-04]
              Pred@0069: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires less than two ingredient")) [score=7.650, prob=3.59e-04]
              Pred@0070: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (string requires) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires the most number of ingredient")) [score=7.585, prob=3.37e-04]
              Pred@0071: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "ingredient that less than two recipe requires")) [score=7.544, prob=3.23e-04]
              Pred@0072: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time))))) (value (list (name en.recipe.10) (name en.recipe.22) (name en.recipe.8))) (type fb:type.any) (canonicalUtterance "recipe that has the smallest preparation time")) [score=7.511, prob=3.13e-04]
              Pred@0073: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.ingredient.milk en.ingredient.spinach)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires milk or spinach")) [score=7.504, prob=3.11e-04]
              Pred@0074: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date))))) (value (list (name en.recipe.14) (name en.recipe.31) (name en.recipe.38) (name en.recipe.43) (name en.recipe.45) (name en.recipe.58) (name en.recipe.6))) (type fb:type.any) (canonicalUtterance "recipe that has the smallest posting date")) [score=7.355, prob=2.67e-04]
              Pred@0075: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.recipe.rice_pudding en.recipe.quiche)))) (value (list (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that rice pudding or quiche is for")) [score=7.162, prob=2.21e-04]
              Pred@0076: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is not 2004")) [score=7.135, prob=2.15e-04]
              Pred@0077: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (value (list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is 2004 or 2010")) [score=7.121, prob=2.12e-04]
              Pred@0078: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "ingredient that at most two recipe requires")) [score=7.118, prob=2.11e-04]
              Pred@0079: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string !=) en.recipe.rice_pudding))) (value (list (name en.meal.dinner))) (type fb:type.any) (canonicalUtterance "meal that rice pudding not is for")) [score=7.065, prob=2.00e-04]
              Pred@0080: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding))) (value (list (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that rice pudding is for")) [score=7.018, prob=1.91e-04]
              Pred@0081: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.recipe.rice_pudding en.recipe.quiche)))) (value (list (name en.ingredient.milk) (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "ingredient that rice pudding or quiche requires")) [score=6.818, prob=1.56e-04]
              Pred@0082: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))) (value (list (name en.recipe.11) (name en.recipe.14) (name en.recipe.15) (name en.recipe.18) (name en.recipe.2) (name en.recipe.20) (name en.recipe.22) (name en.recipe.25) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.30) (name en.recipe.31) (name en.recipe.35) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.41) (name en.recipe.43) (name en.recipe.46) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.57) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7))) (type fb:type.any) (canonicalUtterance "recipe that not is for lunch")) [score=6.811, prob=1.55e-04]
              Pred@0083: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires at most two ingredient")) [score=6.809, prob=1.55e-04]
              Pred@0084: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time))))) (value (list (name en.recipe.17) (name en.recipe.43))) (type fb:type.any) (canonicalUtterance "recipe that has the smallest cooking time")) [score=6.652, prob=1.32e-04]
              Pred@0085: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that requires more than two ingredient")) [score=6.628, prob=1.29e-04]
              Pred@0086: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)))) (value (list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe whose posting date is 2004")) [score=6.628, prob=1.29e-04]
              Pred@0087: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch))) (value (list (name en.recipe.10) (name en.recipe.12) (name en.recipe.13) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.3) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.4) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for lunch")) [score=6.619, prob=1.28e-04]
              Pred@0088: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that requires at least two ingredient")) [score=6.610, prob=1.27e-04]
              Pred@0089: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.meal.lunch en.meal.dinner)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that is for lunch or dinner")) [score=6.586, prob=1.24e-04]
              Pred@0090: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.meal.dinner) (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "meal that the least number of recipe is for")) [score=6.519, prob=1.16e-04]
              Pred@0091: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that requires two ingredient")) [score=6.409, prob=1.04e-04]
              Pred@0092: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string <=) (number 2)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that has at most two cuisine")) [score=6.336, prob=9.65e-05]
              Pred@0093: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time))))) (value (list (name en.recipe.4) (name en.recipe.43) (name en.recipe.59))) (type fb:type.any) (canonicalUtterance "recipe that has the largest preparation time")) [score=6.306, prob=9.37e-05]
              Pred@0094: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding))) (value (list (name en.ingredient.milk))) (type fb:type.any) (canonicalUtterance "ingredient that rice pudding requires")) [score=6.234, prob=8.72e-05]
              Pred@0095: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (string requires) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires the least number of ingredient")) [score=6.205, prob=8.47e-05]
              Pred@0096: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that has more than two cuisine")) [score=6.187, prob=8.32e-05]
              Pred@0097: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date))))) (value (list (name en.recipe.19) (name en.recipe.3) (name en.recipe.36) (name en.recipe.44) (name en.recipe.47) (name en.recipe.54) (name en.recipe.55))) (type fb:type.any) (canonicalUtterance "recipe that has the largest posting date")) [score=6.081, prob=7.48e-05]
              Pred@0098: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "ingredient that two recipe requires")) [score=6.013, prob=6.99e-05]
              Pred@0099: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "recipe that has two cuisine")) [score=5.893, prob=6.20e-05]
              Pred@0100: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.ingredient.milk) (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "ingredient that more than two recipe requires")) [score=5.832, prob=5.83e-05]
              Pred@0101: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string <) (number 2)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that has less than two cuisine")) [score=5.639, prob=4.81e-05]
              Pred@0102: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time))))) (value (list (number 16.182 en.minute))) (type fb:type.any) (canonicalUtterance "average preparation time of recipe")) [score=5.631, prob=4.77e-05]
              Pred@0103: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string !=) en.ingredient.milk))) (value (list (name en.recipe.13) (name en.recipe.15) (name en.recipe.18) (name en.recipe.2) (name en.recipe.20) (name en.recipe.25) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.52) (name en.recipe.53) (name en.recipe.55) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.9) (name en.recipe.quiche))) (type fb:type.any) (canonicalUtterance "recipe that not requires milk")) [score=5.607, prob=4.66e-05]
              Pred@0104: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string !=) en.recipe.rice_pudding))) (value (list (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "ingredient that rice pudding not requires")) [score=5.587, prob=4.57e-05]
              Pred@0105: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (string cuisine)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that has the least number of cuisine")) [score=5.445, prob=3.96e-05]
              Pred@0106: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (name en.ingredient.milk))) (type fb:type.any) (canonicalUtterance "ingredient that the least number of recipe requires")) [score=5.262, prob=3.30e-05]
              Pred@0107: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (string cuisine)))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that has the most number of cuisine")) [score=5.215, prob=3.15e-05]
              Pred@0108: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time))))) (value (list (number 356 en.minute))) (type fb:type.any) (canonicalUtterance "total preparation time of recipe")) [score=5.021, prob=2.59e-05]
              Pred@0109: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk))) (value (list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.28) (name en.recipe.31) (name en.recipe.34) (name en.recipe.35) (name en.recipe.38) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "recipe that requires milk")) [score=4.999, prob=2.54e-05]
              Pred@0110: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))) (value (list (number 15 en.minute))) (type fb:type.any) (canonicalUtterance "preparation time of rice pudding")) [score=4.974, prob=2.47e-05]
              Pred@0111: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time))))) (value (list (number 425 en.minute))) (type fb:type.any) (canonicalUtterance "total cooking time of recipe")) [score=4.766, prob=2.01e-05]
              Pred@0112: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time))))) (value (list (name en.recipe.21) (name en.recipe.27) (name en.recipe.59))) (type fb:type.any) (canonicalUtterance "recipe that has the largest cooking time")) [score=4.748, prob=1.97e-05]
              Pred@0113: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))) (value (list (date 2004 -1 -1))) (type fb:type.any) (canonicalUtterance "posting date of rice pudding")) [score=4.304, prob=1.27e-05]
              Pred@0114: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time))))) (value (list (number 17 en.minute))) (type fb:type.any) (canonicalUtterance "average cooking time of recipe")) [score=4.085, prob=1.02e-05]
              Pred@0115: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))) (value (list (number 18 en.minute))) (type fb:type.any) (canonicalUtterance "cooking time of rice pudding")) [score=3.591, prob=6.20e-06]
              Pred@0116: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))) (value (list (number 60 count))) (type fb:type.any) (canonicalUtterance "number of recipe")) [score=3.515, prob=5.75e-06]
              Pred@0117: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))) (value (list (number 2 count))) (type fb:type.any) (canonicalUtterance "number of meal")) [score=3.514, prob=5.74e-06]
              Pred@0118: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.recipe.rice_pudding en.recipe.quiche))) (value (list (name en.recipe.quiche) (name en.recipe.rice_pudding))) (type fb:type.any) (canonicalUtterance "rice pudding or quiche")) [score=3.095, prob=3.78e-06]
              Pred@0119: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cuisine)))) (value (list (name en.cuisine.chinese))) (type fb:type.any) (canonicalUtterance "cuisine of rice pudding")) [score=3.036, prob=3.56e-06]
              Pred@0120: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.ingredient.milk en.ingredient.spinach))) (value (list (name en.ingredient.milk) (name en.ingredient.spinach))) (type fb:type.any) (canonicalUtterance "milk or spinach")) [score=3.013, prob=3.48e-06]
              Pred@0121: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))) (value (list (number 2 count))) (type fb:type.any) (canonicalUtterance "number of ingredient")) [score=2.832, prob=2.90e-06]
              Pred@0122: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (value (list (date 2004 -1 -1) (date 2010 -1 -1))) (type fb:type.any) (canonicalUtterance "2004 or 2010")) [score=2.477, prob=2.04e-06]
              Pred@0123: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.meal.lunch en.meal.dinner))) (value (list (name en.meal.dinner) (name en.meal.lunch))) (type fb:type.any) (canonicalUtterance "lunch or dinner")) [score=1.886, prob=1.13e-06]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=124 parsedNumCandidates=124 timeout=0 numTokens=1 parseTime=727 maxCellSize=120 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=3568 numCells=448
            Cumulative(iter=0.train): correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=124 parsedNumCandidates=124 timeout=0 numTokens=1 parseTime=727 maxCellSize=120 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=3568 numCells=448
          }
        }
        Stats for iter=0.train: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=124 parsedNumCandidates=124 timeout=0 numTokens=1 parseTime=727 maxCellSize=120 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=3568 numCells=448
        Evaluation stats for iter=0.train {
          correct = 0/ << 0 ~ 0 >> /0 (1)
          oracle = 0/ << 0 ~ 0 >> /0 (1)
          partCorrect = 0/ << 0 ~ 0 >> /0 (1)
          partOracle = 0/ << 0 ~ 0 >> /0 (1)
          parsed = 1/ << 1 ~ 0 >> /1 (1)
          numCandidates = 124/ << 124 ~ 0 >> /124 (1)
          parsedNumCandidates = 124/ << 124 ~ 0 >> /124 (1)
          timeout = 0/ << 0 ~ 0 >> /0 (1)
          numTokens = 1/ << 1 ~ 0 >> /1 (1)
          parseTime = 727/ << 727 ~ 0 >> /727 (1)
          maxCellSize = 120@$CP1:6/ << 120 ~ 0 >> /120@$CP1:6 (1)
          fallOffBeam = 0/ << 0 ~ 0 >> /0 (1)
          totalDerivs = 0/ << 0 ~ 0 >> /0 (1)
          numOfFeaturizedDerivs = 3568/ << 3568 ~ 0 >> /3568 (1)
          numCells = 448/ << 448 ~ 0 >> /448 (1)
        }
      }
      StopWatchSet {
        FeatureExtractor.extractLocal	0.076s (0.0s x 3568)
        Executor.execute	0.326s (0.0s x 2492)
        Parser.parse	0.774s (0.774s x 1)
      }
      Params.write(genovernight.out/recipes/params.0) 
      StopWatchSet {
        FeatureExtractor.extractLocal	0.076s (0.0s x 3568)
        Executor.execute	0.326s (0.0s x 2492)
        Parser.parse	0.774s (0.774s x 1)
      }
      Params.write(genovernight.out/recipes/params.0) 
    }
  }
  Execution directory: genovernight.out/recipes
} [1.0s]
