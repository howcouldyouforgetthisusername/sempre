main() {
  Execution directory: genovernight.out/socialnetwork
  Grammar.read {
    WARNING: Category not defined in the grammar: $BinaryOp; used in rule: $BinaryOpRight -> $BinaryOp $EntityNP2 (JoinFn betaReduce forward)
    Valid tags: [general, generate, geo440, geo880, parse, regex]
    Used tags: [general, generate]
    402 rules
  }
  Parser: 85 catUnaryRules (sorted), 317 nonCatUnaryRules (in trie)
  Dataset.read {
    Reading overnight/null.examples {
      Example overnight/null.examples:0 (0): [null] => null
    }
  }
  Learner.learn() {
    Iteration 0/0 {
      Processing iter=0.train: 1 examples {
        Examples {
          iter=0.train: example 0/1: overnight/null.examples:0 {
            Example: null {
              Tokens: [null]
              Lemmatized tokens: [null]
              POS tags: [UNK]
              NER tags: [UNK]
              NER values: [UNK]
              Dependency children: []
            }
            Parser.parse: parse {
              WARNING: Currently CatSizeBound is usable only when useSizeInsteadOfDepth = true.
              FloatingParser.infer() {
                SimpleWorld.createWorld: domain = socialnetwork (1368 entity/property pairs) 
                Parser.ensureExecuted 
              } [4.7s, cum. 4.7s]
            } [4.7s, cum. 4.8s]
            Parser.setEvaluation: 629 candidates {
              Pred@0000: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.4) (name en.person.54) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose end date is at most 2004 is friends with")) [score=15.553, prob=0.060]
              Pred@0001: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose end date is at most 2004")) [score=15.141, prob=0.040]
              Pred@0002: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.3) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.54) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose end date is at most 2004")) [score=15.058, prob=0.037]
              Pred@0003: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is larger than end date of employee alice")) [score=14.629, prob=0.024]
              Pred@0004: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose end date is at most 2004")) [score=14.583, prob=0.023]
              Pred@0005: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at most end date of student alice")) [score=14.310, prob=0.017]
              Pred@0006: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.3) (name en.person.33) (name en.person.39) (name en.person.4) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose end date is at most 2004")) [score=14.276, prob=0.017]
              Pred@0007: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at most start date of student alice")) [score=14.192, prob=0.015]
              Pred@0008: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose end date is at least 2004")) [score=14.183, prob=0.015]
              Pred@0009: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose start date is larger than 2004")) [score=14.156, prob=0.015]
              Pred@0010: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose field of study is computer science")) [score=14.018, prob=0.013]
              Pred@0011: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose end date is at most 2004")) [score=13.975, prob=0.012]
              Pred@0012: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is larger than end date of employee alice")) [score=13.946, prob=0.012]
              Pred@0013: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at least end date of employee alice")) [score=13.938, prob=0.012]
              Pred@0014: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at most start date of employee alice")) [score=13.886, prob=0.011]
              Pred@0015: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is larger than start date of student alice")) [score=13.854, prob=0.011]
              Pred@0016: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.25) (name en.person.33) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose start date is smaller than 2004 is friends with")) [score=13.792, prob=0.010]
              Pred@0017: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at least end date of employee alice")) [score=13.781, prob=0.010]
              Pred@0018: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string job_title)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "job title that is job title of person whose height is 180 cm")) [score=13.773, prob=0.010]
              Pred@0019: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at most end date of employee alice")) [score=13.748, prob=0.010]
              Pred@0020: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at least end date of employee alice")) [score=13.744, prob=0.010]
              Pred@0021: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.4) (name en.person.51) (name en.person.54))) (type fb:type.any) (canonicalUtterance "person that student whose start date is larger than 2004 is friends with")) [score=13.680, prob=0.009]
              Pred@0022: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at least end date of student alice")) [score=13.661, prob=0.009]
              Pred@0023: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is smaller than start date of student alice")) [score=13.658, prob=0.009]
              Pred@0024: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose start date is larger than 2004")) [score=13.651, prob=0.009]
              Pred@0025: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.17) (name en.person.25) (name en.person.27) (name en.person.3) (name en.person.35) (name en.person.41) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose end date is larger than 2004")) [score=13.610, prob=0.009]
              Pred@0026: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is smaller than end date of employee alice")) [score=13.511, prob=0.008]
              Pred@0027: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at most end date of employee alice")) [score=13.496, prob=0.008]
              Pred@0028: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is smaller than end date of student alice")) [score=13.494, prob=0.008]
              Pred@0029: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at least end date of student alice")) [score=13.491, prob=0.008]
              Pred@0030: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose start date is smaller than 2004")) [score=13.430, prob=0.007]
              Pred@0031: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at least start date of student alice")) [score=13.402, prob=0.007]
              Pred@0032: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at most end date of employee alice")) [score=13.377, prob=0.007]
              Pred@0033: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at least start date of student alice")) [score=13.368, prob=0.007]
              Pred@0034: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at least end date of employee alice")) [score=13.362, prob=0.007]
              Pred@0035: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.51) (name en.person.56) (name en.person.58))) (type fb:type.any) (canonicalUtterance "person that employee whose start date is at least 2004 is friends with")) [score=13.318, prob=0.006]
              Pred@0036: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at least end date of student alice")) [score=13.298, prob=0.006]
              Pred@0037: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is smaller than end date of employee alice")) [score=13.291, prob=0.006]
              Pred@0038: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is larger than end date of student alice")) [score=13.282, prob=0.006]
              Pred@0039: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose university is not brown university")) [score=13.278, prob=0.006]
              Pred@0040: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at least start date of student alice")) [score=13.267, prob=0.006]
              Pred@0041: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose end date is at most 2004")) [score=13.253, prob=0.006]
              Pred@0042: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at most start date of employee alice")) [score=13.213, prob=0.006]
              Pred@0043: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose end date is larger than 2004")) [score=13.202, prob=0.006]
              Pred@0044: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at most end date of employee alice")) [score=13.185, prob=0.006]
              Pred@0045: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose end date is larger than 2004 is friends with")) [score=13.167, prob=0.006]
              Pred@0046: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at most end date of student alice")) [score=13.160, prob=0.006]
              Pred@0047: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "person that person whose height is 180 cm is friends with")) [score=13.152, prob=0.005]
              Pred@0048: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.25) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.41) (name en.person.44) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose job title is not software engineer")) [score=13.132, prob=0.005]
              Pred@0049: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose end date is at least 2004 is friends with")) [score=13.129, prob=0.005]
              Pred@0050: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is smaller than end date of student alice")) [score=13.127, prob=0.005]
              Pred@0051: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is larger than end date of student alice")) [score=13.119, prob=0.005]
              Pred@0052: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose end date is smaller than 2004")) [score=13.104, prob=0.005]
              Pred@0053: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at most end date of student alice")) [score=13.100, prob=0.005]
              Pred@0054: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose height is 180 cm")) [score=13.095, prob=0.005]
              Pred@0055: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.35) (name en.person.51))) (type fb:type.any) (canonicalUtterance "person that student whose end date is larger than 2004 is friends with")) [score=13.086, prob=0.005]
              Pred@0056: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at most start date of student alice")) [score=13.082, prob=0.005]
              Pred@0057: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at most start date of student alice")) [score=13.063, prob=0.005]
              Pred@0058: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is larger than start date of employee alice")) [score=13.060, prob=0.005]
              Pred@0059: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose start date is at least 2004")) [score=13.025, prob=0.005]
              Pred@0060: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.13) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose start date is smaller than 2004")) [score=12.981, prob=0.005]
              Pred@0061: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is smaller than start date of student alice")) [score=12.970, prob=0.005]
              Pred@0062: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is smaller than start date of student alice")) [score=12.948, prob=0.004]
              Pred@0063: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose start date is at least 2004")) [score=12.947, prob=0.004]
              Pred@0064: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))) (value (list (name en.field.computer_science))) (type fb:type.any) (canonicalUtterance "field of study of student alice whose field of study is computer science")) [score=12.944, prob=0.004]
              Pred@0065: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at most start date of student alice")) [score=12.931, prob=0.004]
              Pred@0066: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose start date is larger than 2004")) [score=12.930, prob=0.004]
              Pred@0067: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at least start date of employee alice")) [score=12.928, prob=0.004]
              Pred@0068: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.3) (name en.person.4) (name en.person.41) (name en.person.58) (name en.person.6) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose start date is smaller than 2004")) [score=12.908, prob=0.004]
              Pred@0069: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose start date is at most 2004")) [score=12.906, prob=0.004]
              Pred@0070: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose end date is larger than 2004")) [score=12.883, prob=0.004]
              Pred@0071: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose start date is larger than 2004")) [score=12.867, prob=0.004]
              Pred@0072: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose end date is at most 2004")) [score=12.866, prob=0.004]
              Pred@0073: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employment_end_date) (string =) (date 2004 -1 -1)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose end date is 2004")) [score=12.843, prob=0.004]
              Pred@0074: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is smaller than start date of employee alice")) [score=12.835, prob=0.004]
              Pred@0075: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at least start date of student alice")) [score=12.825, prob=0.004]
              Pred@0076: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.36) (name en.person.51) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose job title is not software engineer is friends with")) [score=12.773, prob=0.004]
              Pred@0077: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is smaller than end date of employee alice")) [score=12.765, prob=0.004]
              Pred@0078: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.36) (name en.person.4) (name en.person.51) (name en.person.56) (name en.person.58))) (type fb:type.any) (canonicalUtterance "person that employee whose start date is larger than 2004 is friends with")) [score=12.765, prob=0.004]
              Pred@0079: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose start date is larger than 2004")) [score=12.762, prob=0.004]
              Pred@0080: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is larger than start date of employee alice")) [score=12.750, prob=0.004]
              Pred@0081: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.34) (name en.person.35) (name en.person.4) (name en.person.51) (name en.person.54) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose field of study is not computer science is friends with")) [score=12.688, prob=0.003]
              Pred@0082: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.54) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose end date is smaller than 2004 is friends with")) [score=12.655, prob=0.003]
              Pred@0083: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that alice is friends with and whose height is 180 cm")) [score=12.646, prob=0.003]
              Pred@0084: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that is birthplace of alice")) [score=12.645, prob=0.003]
              Pred@0085: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose start date is at least 2004")) [score=12.640, prob=0.003]
              Pred@0086: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string height)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that is height of alice")) [score=12.614, prob=0.003]
              Pred@0087: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.35) (name en.person.51) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose start date is at most 2004 is friends with")) [score=12.594, prob=0.003]
              Pred@0088: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at least start date of employee alice")) [score=12.589, prob=0.003]
              Pred@0089: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.17) (name en.person.25) (name en.person.27) (name en.person.3) (name en.person.35) (name en.person.39) (name en.person.41) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose end date is at least 2004")) [score=12.581, prob=0.003]
              Pred@0090: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose start date is smaller than 2004")) [score=12.566, prob=0.003]
              Pred@0091: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is end date of employee alice")) [score=12.547, prob=0.003]
              Pred@0092: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at most end date of student alice")) [score=12.539, prob=0.003]
              Pred@0093: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose start date is at most 2004")) [score=12.528, prob=0.003]
              Pred@0094: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose field of study is not computer science")) [score=12.525, prob=0.003]
              Pred@0095: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is larger than start date of student alice")) [score=12.514, prob=0.003]
              Pred@0096: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at least start date of employee alice")) [score=12.475, prob=0.003]
              Pred@0097: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at least end date of student alice")) [score=12.473, prob=0.003]
              Pred@0098: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose job title is not software engineer")) [score=12.463, prob=0.003]
              Pred@0099: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is larger than start date of student alice")) [score=12.456, prob=0.003]
              Pred@0100: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose university is brown university")) [score=12.439, prob=0.003]
              Pred@0101: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at most start date of employee alice")) [score=12.439, prob=0.003]
              Pred@0102: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is larger than end date of student alice")) [score=12.435, prob=0.003]
              Pred@0103: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string field_of_study)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "field that is field of study of person whose height is 180 cm")) [score=12.434, prob=0.003]
              Pred@0104: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose end date is larger than 2004")) [score=12.432, prob=0.003]
              Pred@0105: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is smaller than start date of student alice")) [score=12.422, prob=0.003]
              Pred@0106: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose start date is smaller than 2004")) [score=12.410, prob=0.003]
              Pred@0107: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose end date is not 2004")) [score=12.379, prob=0.003]
              Pred@0108: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is larger than end date of employee alice")) [score=12.346, prob=0.002]
              Pred@0109: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with person whose height is 180 cm")) [score=12.340, prob=0.002]
              Pred@0110: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at least end date of student alice")) [score=12.336, prob=0.002]
              Pred@0111: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose end date is larger than 2004")) [score=12.333, prob=0.002]
              Pred@0112: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.18) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.33) (name en.person.4) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.58))) (type fb:type.any) (canonicalUtterance "person that employee whose end date is at most 2004 is friends with")) [score=12.317, prob=0.002]
              Pred@0113: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is smaller than end date of student alice")) [score=12.316, prob=0.002]
              Pred@0114: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.4) (name en.person.51) (name en.person.54))) (type fb:type.any) (canonicalUtterance "person that student whose start date is at least 2004 is friends with")) [score=12.294, prob=0.002]
              Pred@0115: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose end date is smaller than 2004")) [score=12.272, prob=0.002]
              Pred@0116: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose university is not brown university")) [score=12.258, prob=0.002]
              Pred@0117: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is smaller than end date of employee alice")) [score=12.243, prob=0.002]
              Pred@0118: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose field of study is not computer science")) [score=12.221, prob=0.002]
              Pred@0119: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose relationship status is person whose height is 180 cm")) [score=12.220, prob=0.002]
              Pred@0120: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is smaller than end date of student alice")) [score=12.194, prob=0.002]
              Pred@0121: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that is friends with alice")) [score=12.165, prob=0.002]
              Pred@0122: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at least start date of employee alice")) [score=12.158, prob=0.002]
              Pred@0123: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is larger than start date of employee alice")) [score=12.158, prob=0.002]
              Pred@0124: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose birthplace is person whose height is 180 cm")) [score=12.137, prob=0.002]
              Pred@0125: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))) (value (list (name en.person.3) (name en.person.6))) (type fb:type.any) (canonicalUtterance "person that is friends with alice and that is friends with alice")) [score=12.113, prob=0.002]
              Pred@0126: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.4) (name en.person.41) (name en.person.44) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose end date is not 2004")) [score=12.111, prob=0.002]
              Pred@0127: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is larger than end date of employee alice")) [score=12.109, prob=0.002]
              Pred@0128: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.35) (name en.person.51) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose start date is smaller than 2004 is friends with")) [score=12.083, prob=0.002]
              Pred@0129: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose end date is at least 2004")) [score=12.072, prob=0.002]
              Pred@0130: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose end date is at most 2004")) [score=12.069, prob=0.002]
              Pred@0131: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is smaller than start date of student alice")) [score=12.063, prob=0.002]
              Pred@0132: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose employer is not mckinsey")) [score=12.058, prob=0.002]
              Pred@0133: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose start date is at least 2004")) [score=12.050, prob=0.002]
              Pred@0134: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is smaller than end date of student alice")) [score=12.040, prob=0.002]
              Pred@0135: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))) (value (list (name en.relationship_status.married))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person that is friends with alice")) [score=12.032, prob=0.002]
              Pred@0136: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose field of study is not computer science")) [score=12.025, prob=0.002]
              Pred@0137: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employment_start_date) (string =) (date 2004 -1 -1)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose start date is 2004")) [score=12.015, prob=0.002]
              Pred@0138: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is larger than end date of student alice")) [score=12.014, prob=0.002]
              Pred@0139: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.3) (name en.person.33) (name en.person.4) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose end date is smaller than 2004")) [score=12.007, prob=0.002]
              Pred@0140: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose field of study is field of study of student alice")) [score=12.005, prob=0.002]
              Pred@0141: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.18) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.33) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.58))) (type fb:type.any) (canonicalUtterance "person that employee whose end date is smaller than 2004 is friends with")) [score=11.994, prob=0.002]
              Pred@0142: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthdate)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that is birthdate of alice")) [score=11.969, prob=0.002]
              Pred@0143: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at most start date of employee alice")) [score=11.923, prob=0.002]
              Pred@0144: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with alice and whose height is 180 cm")) [score=11.921, prob=0.002]
              Pred@0145: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.44) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose start date is at least 2004")) [score=11.919, prob=0.002]
              Pred@0146: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))) (value (list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2007 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of student alice whose field of study is computer science")) [score=11.894, prob=0.002]
              Pred@0147: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at least start date of employee alice")) [score=11.888, prob=0.002]
              Pred@0148: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose birthplace is new york")) [score=11.850, prob=0.001]
              Pred@0149: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose end date is larger than 2004")) [score=11.839, prob=0.001]
              Pred@0150: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose end date is not 2004")) [score=11.831, prob=0.001]
              Pred@0151: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is smaller than end date of employee alice")) [score=11.831, prob=0.001]
              Pred@0152: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is larger than birthdate of alice")) [score=11.829, prob=0.001]
              Pred@0153: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is person whose height is 180 cm")) [score=11.810, prob=0.001]
              Pred@0154: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.17) (name en.person.18) (name en.person.25) (name en.person.26) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose employer is not mckinsey")) [score=11.803, prob=0.001]
              Pred@0155: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.24) (name en.person.28) (name en.person.35) (name en.person.4) (name en.person.51))) (type fb:type.any) (canonicalUtterance "person that student whose end date is at least 2004 is friends with")) [score=11.791, prob=0.001]
              Pred@0156: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that alice is friends with and that alice is friends with")) [score=11.785, prob=0.001]
              Pred@0157: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is smaller than start date of employee alice")) [score=11.741, prob=0.001]
              Pred@0158: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that alice is friends with")) [score=11.728, prob=0.001]
              Pred@0159: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is start date of student alice")) [score=11.726, prob=0.001]
              Pred@0160: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice)))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthplace is city that is birthplace of alice")) [score=11.722, prob=0.001]
              Pred@0161: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is larger than end date of student alice")) [score=11.719, prob=0.001]
              Pred@0162: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at most end date of employee alice")) [score=11.691, prob=0.001]
              Pred@0163: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.51) (name en.person.54) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose university is not brown university is friends with")) [score=11.678, prob=0.001]
              Pred@0164: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is end date of employee alice")) [score=11.600, prob=0.001]
              Pred@0165: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose job title is software engineer")) [score=11.577, prob=0.001]
              Pred@0166: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with alice and that alice is friends with")) [score=11.576, prob=0.001]
              Pred@0167: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.13) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose start date is at most 2004")) [score=11.574, prob=0.001]
              Pred@0168: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose end date is not 2004 is friends with")) [score=11.527, prob=0.001]
              Pred@0169: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose end date is at least 2004")) [score=11.503, prob=0.001]
              Pred@0170: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person whose height is 180 cm")) [score=11.499, prob=0.001]
              Pred@0171: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is larger than start date of student alice")) [score=11.491, prob=0.001]
              Pred@0172: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.26) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at most birthdate of alice")) [score=11.474, prob=0.001]
              Pred@0173: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose end date is at least 2004")) [score=11.444, prob=9.93e-04]
              Pred@0174: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.33) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose start date is at most 2004 is friends with")) [score=11.418, prob=9.67e-04]
              Pred@0175: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose end date is smaller than 2004")) [score=11.413, prob=9.62e-04]
              Pred@0176: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that is gender of alice")) [score=11.404, prob=9.53e-04]
              Pred@0177: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))) (value (list (name en.field.computer_science) (name en.field.economics) (name en.field.history))) (type fb:type.any) (canonicalUtterance "field of study of student alice whose university is brown university")) [score=11.392, prob=9.42e-04]
              Pred@0178: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at least end date of employee alice")) [score=11.371, prob=9.23e-04]
              Pred@0179: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.35) (name en.person.51) (name en.person.54) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose end date is not 2004 is friends with")) [score=11.340, prob=8.95e-04]
              Pred@0180: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose start date is smaller than 2004")) [score=11.325, prob=8.81e-04]
              Pred@0181: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose end date is smaller than 2004")) [score=11.323, prob=8.80e-04]
              Pred@0182: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.42) (name en.person.44) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9))) (type fb:type.any) (canonicalUtterance "person whose height is at least 180 cm or 200 cm")) [score=11.302, prob=8.61e-04]
              Pred@0183: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.3) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.54) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose end date is smaller than 2004")) [score=11.302, prob=8.61e-04]
              Pred@0184: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose end date is 2004")) [score=11.300, prob=8.59e-04]
              Pred@0185: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is smaller than start date of employee alice")) [score=11.298, prob=8.58e-04]
              Pred@0186: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is smaller than start date of employee alice")) [score=11.275, prob=8.38e-04]
              Pred@0187: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at least birthdate of alice")) [score=11.267, prob=8.31e-04]
              Pred@0188: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose start date is larger than 2004")) [score=11.260, prob=8.25e-04]
              Pred@0189: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))) (value (list (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose height is smaller than 180 cm or 200 cm")) [score=11.249, prob=8.17e-04]
              Pred@0190: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))) (value (list (name en.job_title.ceo) (name en.job_title.program_manager) (name en.job_title.software_engineer))) (type fb:type.any) (canonicalUtterance "job title of employee alice whose end date is 2004")) [score=11.244, prob=8.12e-04]
              Pred@0191: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose start date is at most 2004")) [score=11.235, prob=8.05e-04]
              Pred@0192: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person that alice is friends with and that is friends with alice")) [score=11.197, prob=7.75e-04]
              Pred@0193: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose birthdate is 2004")) [score=11.195, prob=7.74e-04]
              Pred@0194: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is start date of student alice")) [score=11.193, prob=7.72e-04]
              Pred@0195: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at most 2004 or 2010")) [score=11.193, prob=7.72e-04]
              Pred@0196: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose university is not brown university")) [score=11.192, prob=7.71e-04]
              Pred@0197: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is start date of employee alice")) [score=11.184, prob=7.65e-04]
              Pred@0198: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose start date is not 2004")) [score=11.167, prob=7.52e-04]
              Pred@0199: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose start date is not 2004")) [score=11.147, prob=7.37e-04]
              Pred@0200: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of student whose end date is at least 2004")) [score=11.107, prob=7.08e-04]
              Pred@0201: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at most start date of student alice")) [score=11.091, prob=6.97e-04]
              Pred@0202: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at least start date of student alice")) [score=11.089, prob=6.96e-04]
              Pred@0203: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that is relationship status of alice")) [score=11.078, prob=6.88e-04]
              Pred@0204: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.20) (name en.person.30) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at most birthdate of alice")) [score=11.074, prob=6.85e-04]
              Pred@0205: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "city that is birthplace of person whose height is 180 cm")) [score=11.041, prob=6.63e-04]
              Pred@0206: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))) (value (list (name en.person.31) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that person that is friends with alice is friends with")) [score=11.035, prob=6.59e-04]
              Pred@0207: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at most end date of student alice")) [score=11.034, prob=6.58e-04]
              Pred@0208: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))) (value (list (name en.person.18) (name en.person.35) (name en.person.4) (name en.person.5) (name en.person.51))) (type fb:type.any) (canonicalUtterance "person whose height is smaller than height of alice")) [score=11.026, prob=6.53e-04]
              Pred@0209: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose start date is larger than 2004")) [score=10.981, prob=6.25e-04]
              Pred@0210: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is smaller than start date of employee alice")) [score=10.968, prob=6.17e-04]
              Pred@0211: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.33) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.58) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose employer is not mckinsey is friends with")) [score=10.952, prob=6.07e-04]
              Pred@0212: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose birthdate is person whose height is 180 cm")) [score=10.951, prob=6.06e-04]
              Pred@0213: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.14) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.34) (name en.person.35) (name en.person.4) (name en.person.51) (name en.person.54) (name en.person.56))) (type fb:type.any) (canonicalUtterance "person that student whose start date is not 2004 is friends with")) [score=10.946, prob=6.03e-04]
              Pred@0214: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is end date of student alice")) [score=10.942, prob=6.00e-04]
              Pred@0215: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.23) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at most birthdate of alice")) [score=10.934, prob=5.96e-04]
              Pred@0216: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose start date is 2004")) [score=10.912, prob=5.83e-04]
              Pred@0217: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at least birthdate of alice")) [score=10.906, prob=5.80e-04]
              Pred@0218: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))) (value (list (name en.job_title.software_engineer))) (type fb:type.any) (canonicalUtterance "job title of employee alice whose job title is software engineer")) [score=10.902, prob=5.77e-04]
              Pred@0219: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employer)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "company that is employer of person whose height is 180 cm")) [score=10.901, prob=5.77e-04]
              Pred@0220: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is larger than 2004 or 2010")) [score=10.895, prob=5.73e-04]
              Pred@0221: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))) (value (list (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of employee alice whose end date is 2004")) [score=10.873, prob=5.61e-04]
              Pred@0222: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at least 2004 or 2010")) [score=10.873, prob=5.61e-04]
              Pred@0223: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose start date is smaller than 2004")) [score=10.864, prob=5.56e-04]
              Pred@0224: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is larger than birthdate of alice")) [score=10.859, prob=5.53e-04]
              Pred@0225: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string logged_in)))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that alice is friends with and that is logged in")) [score=10.846, prob=5.46e-04]
              Pred@0226: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose employer is mckinsey")) [score=10.843, prob=5.44e-04]
              Pred@0227: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is larger than start date of employee alice")) [score=10.843, prob=5.44e-04]
              Pred@0228: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose job title is software engineer or program manager")) [score=10.843, prob=5.44e-04]
              Pred@0229: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at most 2004 or 2010")) [score=10.841, prob=5.43e-04]
              Pred@0230: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is larger than end date of employee alice")) [score=10.813, prob=5.28e-04]
              Pred@0231: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is end date of employee alice")) [score=10.793, prob=5.17e-04]
              Pred@0232: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is smaller than birthdate of alice")) [score=10.790, prob=5.16e-04]
              Pred@0233: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))) (value (list (date 2000 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of student alice whose field of study is computer science")) [score=10.778, prob=5.10e-04]
              Pred@0234: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose end date is not 2004")) [score=10.773, prob=5.07e-04]
              Pred@0235: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.25) (name en.person.3) (name en.person.35) (name en.person.4) (name en.person.41) (name en.person.49) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose start date is at most 2004")) [score=10.764, prob=5.03e-04]
              Pred@0236: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date))))) (value (list (name en.person.10) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is start date of student alice")) [score=10.756, prob=4.99e-04]
              Pred@0237: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose start date is at most 2004")) [score=10.747, prob=4.94e-04]
              Pred@0238: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose job title is not software engineer")) [score=10.731, prob=4.86e-04]
              Pred@0239: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose start date is at least 2004")) [score=10.724, prob=4.83e-04]
              Pred@0240: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of alice and that is birthplace of alice")) [score=10.723, prob=4.82e-04]
              Pred@0241: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and that is logged in")) [score=10.711, prob=4.77e-04]
              Pred@0242: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at least 2004 or 2010")) [score=10.693, prob=4.68e-04]
              Pred@0243: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that alice is friends with and whose birthdate is 2004")) [score=10.689, prob=4.67e-04]
              Pred@0244: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is start date of employee alice")) [score=10.682, prob=4.63e-04]
              Pred@0245: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose height is at least height of alice")) [score=10.668, prob=4.57e-04]
              Pred@0246: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person that is logged in")) [score=10.634, prob=4.41e-04]
              Pred@0247: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.17) (name en.person.18) (name en.person.26) (name en.person.27) (name en.person.3) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.44) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with employee whose start date is not 2004")) [score=10.614, prob=4.33e-04]
              Pred@0248: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose relationship status is single")) [score=10.603, prob=4.28e-04]
              Pred@0249: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and whose height is 180 cm")) [score=10.601, prob=4.27e-04]
              Pred@0250: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is start date of student alice")) [score=10.581, prob=4.18e-04]
              Pred@0251: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose end date is not 2004")) [score=10.555, prob=4.08e-04]
              Pred@0252: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))) (value (list (name en.job_title.ceo) (name en.job_title.program_manager) (name en.job_title.software_engineer))) (type fb:type.any) (canonicalUtterance "job title of employee alice whose employer is mckinsey")) [score=10.542, prob=4.03e-04]
              Pred@0253: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is larger than start date of student alice")) [score=10.541, prob=4.02e-04]
              Pred@0254: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm and whose gender is male")) [score=10.524, prob=3.95e-04]
              Pred@0255: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose field of study is not computer science")) [score=10.514, prob=3.92e-04]
              Pred@0256: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with alice and whose gender is male")) [score=10.483, prob=3.80e-04]
              Pred@0257: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and that alice is friends with")) [score=10.479, prob=3.78e-04]
              Pred@0258: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is start date of employee alice")) [score=10.471, prob=3.75e-04]
              Pred@0259: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has at most two field of study")) [score=10.469, prob=3.74e-04]
              Pred@0260: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.26) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at most 2004")) [score=10.443, prob=3.65e-04]
              Pred@0261: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose gender is male and whose height is 180 cm")) [score=10.442, prob=3.65e-04]
              Pred@0262: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is smaller than 2004 or 2010")) [score=10.415, prob=3.55e-04]
              Pred@0263: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose gender is person whose height is 180 cm")) [score=10.410, prob=3.53e-04]
              Pred@0264: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with person that is friends with alice")) [score=10.409, prob=3.53e-04]
              Pred@0265: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is end date of student alice")) [score=10.409, prob=3.52e-04]
              Pred@0266: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))) (value (list (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with person that alice is friends with")) [score=10.403, prob=3.50e-04]
              Pred@0267: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with alice and whose birthdate is 2004")) [score=10.373, prob=3.40e-04]
              Pred@0268: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at least birthdate of alice")) [score=10.362, prob=3.36e-04]
              Pred@0269: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at most 2004 or 2010")) [score=10.357, prob=3.35e-04]
              Pred@0270: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and that alice is friends with")) [score=10.354, prob=3.34e-04]
              Pred@0271: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is end date of student alice")) [score=10.352, prob=3.33e-04]
              Pred@0272: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))) (value (list (date 2004 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of employee alice whose end date is 2004")) [score=10.327, prob=3.25e-04]
              Pred@0273: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose birthdate is end date of employee alice")) [score=10.320, prob=3.23e-04]
              Pred@0274: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose job title is job title of employee alice")) [score=10.308, prob=3.19e-04]
              Pred@0275: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))) (value (list (name en.person.18) (name en.person.35) (name en.person.4) (name en.person.5) (name en.person.51) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose height is at most height of alice")) [score=10.306, prob=3.18e-04]
              Pred@0276: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))) (value (list (name en.university.berkeley) (name en.university.brown) (name en.university.ucla))) (type fb:type.any) (canonicalUtterance "university of student alice whose field of study is computer science")) [score=10.298, prob=3.16e-04]
              Pred@0277: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose employer is not mckinsey")) [score=10.291, prob=3.13e-04]
              Pred@0278: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))) (value (list (name en.job_title.ceo) (name en.job_title.program_manager))) (type fb:type.any) (canonicalUtterance "job title of employee alice whose start date is 2004")) [score=10.290, prob=3.13e-04]
              Pred@0279: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.6))) (type fb:type.any) (canonicalUtterance "person that is friends with alice and whose birthplace is new york")) [score=10.285, prob=3.11e-04]
              Pred@0280: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is larger than birthdate of alice")) [score=10.241, prob=2.98e-04]
              Pred@0281: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that employee whose start date is not 2004 is friends with")) [score=10.234, prob=2.96e-04]
              Pred@0282: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string university)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "university that is university of person whose height is 180 cm")) [score=10.229, prob=2.94e-04]
              Pred@0283: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.59) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at most birthdate of alice")) [score=10.226, prob=2.94e-04]
              Pred@0284: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that alice is friends with and whose gender is male")) [score=10.225, prob=2.93e-04]
              Pred@0285: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose height is larger than height of alice")) [score=10.223, prob=2.93e-04]
              Pred@0286: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is larger than 2004 or 2010")) [score=10.222, prob=2.92e-04]
              Pred@0287: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.16) (name en.person.20) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is smaller than birthdate of alice")) [score=10.215, prob=2.90e-04]
              Pred@0288: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose start date is larger than 2004")) [score=10.181, prob=2.81e-04]
              Pred@0289: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))) (value (list (date 2000 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2007 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of student alice whose university is brown university")) [score=10.167, prob=2.77e-04]
              Pred@0290: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person that is friends with student whose end date is not 2004")) [score=10.166, prob=2.76e-04]
              Pred@0291: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.4) (name en.person.41) (name en.person.49) (name en.person.5) (name en.person.51) (name en.person.54) (name en.person.6) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with person whose birthplace is new york")) [score=10.162, prob=2.75e-04]
              Pred@0292: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))) (value (list (date 2004 -1 -1) (date 2008 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of employee alice whose start date is 2004")) [score=10.113, prob=2.62e-04]
              Pred@0293: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of person that is friends with alice")) [score=10.093, prob=2.57e-04]
              Pred@0294: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))) (value (list (name en.person.3) (name en.person.6))) (type fb:type.any) (canonicalUtterance "person that is friends with alice and that is logged in")) [score=10.089, prob=2.56e-04]
              Pred@0295: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and that is friends with alice")) [score=10.060, prob=2.49e-04]
              Pred@0296: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at most start date of employee alice")) [score=10.050, prob=2.46e-04]
              Pred@0297: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose university is not brown university")) [score=10.046, prob=2.45e-04]
              Pred@0298: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person whose birthplace is new york")) [score=10.044, prob=2.45e-04]
              Pred@0299: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose end date is at least 2004")) [score=10.037, prob=2.43e-04]
              Pred@0300: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is start date of student alice")) [score=10.033, prob=2.42e-04]
              Pred@0301: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with more than two person")) [score=10.006, prob=2.36e-04]
              Pred@0302: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is logged in and whose height is 180 cm")) [score=10.004, prob=2.35e-04]
              Pred@0303: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.22) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "student whose end date is smaller than birthdate of alice")) [score=9.994, prob=2.33e-04]
              Pred@0304: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and that is friends with alice")) [score=9.968, prob=2.27e-04]
              Pred@0305: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))) (value (list (name en.field.computer_science) (name en.field.economics) (name en.field.history))) (type fb:type.any) (canonicalUtterance "field of study of student alice whose end date is 2004")) [score=9.964, prob=2.26e-04]
              Pred@0306: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))) (value (list (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person that alice is friends with")) [score=9.914, prob=2.15e-04]
              Pred@0307: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that alice is friends with and whose birthplace is new york")) [score=9.903, prob=2.13e-04]
              Pred@0308: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose job title is not software engineer")) [score=9.897, prob=2.11e-04]
              Pred@0309: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at least 2004 or 2010")) [score=9.857, prob=2.03e-04]
              Pred@0310: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose end date is larger than 2004")) [score=9.849, prob=2.01e-04]
              Pred@0311: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at least birthdate of alice")) [score=9.847, prob=2.01e-04]
              Pred@0312: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))) (value (list (name en.person.10) (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.31) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.4) (name en.person.42) (name en.person.49) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that person that is logged in is friends with")) [score=9.846, prob=2.01e-04]
              Pred@0313: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of employee whose start date is not 2004")) [score=9.845, prob=2.00e-04]
              Pred@0314: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose start date is at least 2004")) [score=9.829, prob=1.97e-04]
              Pred@0315: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is smaller than 2004 or 2010")) [score=9.826, prob=1.97e-04]
              Pred@0316: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))) (value (list (name en.person.16) (name en.person.19) (name en.person.24) (name en.person.36) (name en.person.49))) (type fb:type.any) (canonicalUtterance "person that person whose birthdate is 2004 is friends with")) [score=9.823, prob=1.96e-04]
              Pred@0317: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at most 2004 or 2010")) [score=9.823, prob=1.96e-04]
              Pred@0318: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))) (value (list (date 2000 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of employee alice whose job title is software engineer")) [score=9.815, prob=1.95e-04]
              Pred@0319: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is start date of employee alice")) [score=9.810, prob=1.94e-04]
              Pred@0320: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose start date is smaller than 2004")) [score=9.794, prob=1.91e-04]
              Pred@0321: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose end date is smaller than 2004")) [score=9.789, prob=1.90e-04]
              Pred@0322: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has at most two job title")) [score=9.784, prob=1.89e-04]
              Pred@0323: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))) (value (list (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of alice and that is relationship status of alice")) [score=9.772, prob=1.86e-04]
              Pred@0324: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))) (value (list (name en.company.google) (name en.company.mckinsey) (name en.company.toyota))) (type fb:type.any) (canonicalUtterance "employer of employee alice whose end date is 2004")) [score=9.752, prob=1.83e-04]
              Pred@0325: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and whose height is 180 cm")) [score=9.740, prob=1.81e-04]
              Pred@0326: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose gender is male and that is friends with alice")) [score=9.721, prob=1.77e-04]
              Pred@0327: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))) (value (list (name en.person.3) (name en.person.6))) (type fb:type.any) (canonicalUtterance "person that is logged in and that is friends with alice")) [score=9.716, prob=1.76e-04]
              Pred@0328: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose end date is smaller than 2004")) [score=9.703, prob=1.74e-04]
              Pred@0329: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is smaller than 2004 or 2010")) [score=9.694, prob=1.73e-04]
              Pred@0330: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of student whose start date is not 2004")) [score=9.686, prob=1.71e-04]
              Pred@0331: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.16) (name en.person.19) (name en.person.36) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that the most number of person is friends with")) [score=9.677, prob=1.69e-04]
              Pred@0332: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date))))) (value (list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.28) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.53) (name en.person.54) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose birthdate is end date of student alice")) [score=9.670, prob=1.68e-04]
              Pred@0333: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person whose gender is male")) [score=9.669, prob=1.68e-04]
              Pred@0334: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is end date of student alice")) [score=9.630, prob=1.62e-04]
              Pred@0335: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))) (value (list (date 2000 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of student alice whose university is brown university")) [score=9.624, prob=1.61e-04]
              Pred@0336: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and whose height is 180 cm")) [score=9.607, prob=1.58e-04]
              Pred@0337: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))) (value (list (name en.person.54))) (type fb:type.any) (canonicalUtterance "person that is friends with person whose birthdate is 2004")) [score=9.604, prob=1.58e-04]
              Pred@0338: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is smaller than 2004 or 2010")) [score=9.600, prob=1.57e-04]
              Pred@0339: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that is logged in and that alice is friends with")) [score=9.557, prob=1.50e-04]
              Pred@0340: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))) (value (list (name en.person.12) (name en.person.16) (name en.person.21) (name en.person.24) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.35) (name en.person.38) (name en.person.39) (name en.person.41) (name en.person.42) (name en.person.45) (name en.person.46) (name en.person.48) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at most birthdate of alice")) [score=9.530, prob=1.46e-04]
              Pred@0341: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has at most two university")) [score=9.520, prob=1.45e-04]
              Pred@0342: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of employee whose start date is not 2004")) [score=9.515, prob=1.44e-04]
              Pred@0343: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that alice is friends with and whose relationship status is single")) [score=9.504, prob=1.43e-04]
              Pred@0344: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is larger than start date of employee alice")) [score=9.498, prob=1.42e-04]
              Pred@0345: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose start date is not 2004")) [score=9.497, prob=1.42e-04]
              Pred@0346: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose start date is at most 2004")) [score=9.491, prob=1.41e-04]
              Pred@0347: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose end date is larger than 2004")) [score=9.467, prob=1.37e-04]
              Pred@0348: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))) (value (list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.2) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.5) (name en.person.54) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with person whose gender is male")) [score=9.458, prob=1.36e-04]
              Pred@0349: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of the least number of person")) [score=9.454, prob=1.36e-04]
              Pred@0350: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and that alice is friends with")) [score=9.430, prob=1.32e-04]
              Pred@0351: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))) (value (list (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person whose relationship status is single")) [score=9.423, prob=1.32e-04]
              Pred@0352: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose end date is not 2004")) [score=9.414, prob=1.30e-04]
              Pred@0353: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))) (value (list)) (type fb:type.any) (canonicalUtterance "person that is friends with alice and whose relationship status is single")) [score=9.412, prob=1.30e-04]
              Pred@0354: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))) (value (list (name en.person.6))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and that is friends with alice")) [score=9.397, prob=1.28e-04]
              Pred@0355: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.42) (name en.person.44) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9))) (type fb:type.any) (canonicalUtterance "person whose height is larger than 180 cm or 200 cm")) [score=9.390, prob=1.27e-04]
              Pred@0356: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of person that alice is friends with")) [score=9.390, prob=1.27e-04]
              Pred@0357: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of person whose birthdate is 2004")) [score=9.353, prob=1.23e-04]
              Pred@0358: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that at most two person is friends with")) [score=9.352, prob=1.22e-04]
              Pred@0359: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.56) (name en.person.59) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "student whose end date is larger than 2004 or 2010")) [score=9.326, prob=1.19e-04]
              Pred@0360: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))) (value (list (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.36) (name en.person.42) (name en.person.48) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that person whose birthplace is new york is friends with")) [score=9.320, prob=1.19e-04]
              Pred@0361: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at least 2004 or 2010")) [score=9.306, prob=1.17e-04]
              Pred@0362: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))) (value (list (name en.person.15) (name en.person.25))) (type fb:type.any) (canonicalUtterance "person that person that alice is friends with is friends with")) [score=9.303, prob=1.17e-04]
              Pred@0363: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university) (string =) en.university.brown) (string university)))) (value (list (name en.university.brown))) (type fb:type.any) (canonicalUtterance "university of student alice whose university is brown university")) [score=9.287, prob=1.15e-04]
              Pred@0364: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))))) (value (list (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose height is at most 180 cm or 200 cm")) [score=9.276, prob=1.13e-04]
              Pred@0365: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of more than two person")) [score=9.250, prob=1.11e-04]
              Pred@0366: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.33) (name en.person.38) (name en.person.59) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "student whose start date is birthdate of alice")) [score=9.217, prob=1.07e-04]
              Pred@0367: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))) (value (list (date 2004 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of employee alice whose start date is 2004")) [score=9.214, prob=1.07e-04]
              Pred@0368: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.14) (name en.person.20) (name en.person.30) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is smaller than birthdate of alice")) [score=9.210, prob=1.06e-04]
              Pred@0369: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))) (value (list (name en.gender.female))) (type fb:type.any) (canonicalUtterance "gender that is gender of alice and that is gender of alice")) [score=9.203, prob=1.06e-04]
              Pred@0370: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.31) (name en.person.36) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.59) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that at least two person is friends with")) [score=9.157, prob=1.01e-04]
              Pred@0371: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose field of study is computer science or history")) [score=9.156, prob=1.01e-04]
              Pred@0372: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))) (value (list (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of student alice whose end date is 2004")) [score=9.156, prob=1.01e-04]
              Pred@0373: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person whose gender is male and that alice is friends with")) [score=9.152, prob=1.00e-04]
              Pred@0374: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is end date of employee alice")) [score=9.152, prob=1.00e-04]
              Pred@0375: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.23) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at most 2004")) [score=9.136, prob=9.87e-05]
              Pred@0376: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice)))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.29) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose relationship status is relationship status that is relationship status of alice")) [score=9.135, prob=9.86e-05]
              Pred@0377: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.15) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.31) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that is friends with less than two person")) [score=9.130, prob=9.81e-05]
              Pred@0378: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))) (value (list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.2) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with person that is logged in")) [score=9.080, prob=9.33e-05]
              Pred@0379: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of person that is logged in")) [score=9.068, prob=9.22e-05]
              Pred@0380: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))) (value (list (name en.person.12) (name en.person.16) (name en.person.3) (name en.person.38) (name en.person.41) (name en.person.42) (name en.person.46) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose birthdate is smaller than birthdate of alice")) [score=9.052, prob=9.08e-05]
              Pred@0381: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is start date of employee alice")) [score=9.049, prob=9.05e-05]
              Pred@0382: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of person whose relationship status is single")) [score=9.041, prob=8.98e-05]
              Pred@0383: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))) (value (list)) (type fb:type.any) (canonicalUtterance "gender that is gender of person whose height is 180 cm")) [score=9.035, prob=8.92e-05]
              Pred@0384: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "city that is birthplace of less than two person")) [score=9.022, prob=8.81e-05]
              Pred@0385: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is larger than 2004 or 2010")) [score=9.002, prob=8.63e-05]
              Pred@0386: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the most number of job title")) [score=9.000, prob=8.61e-05]
              Pred@0387: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))) (value (list (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of employee alice whose employer is mckinsey")) [score=8.984, prob=8.48e-05]
              Pred@0388: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.42) (name en.person.44) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9))) (type fb:type.any) (canonicalUtterance "person whose height is at least 180 cm")) [score=8.980, prob=8.44e-05]
              Pred@0389: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose start date is at least 2004")) [score=8.979, prob=8.43e-05]
              Pred@0390: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace))))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthplace is birthplace of alice")) [score=8.960, prob=8.28e-05]
              Pred@0391: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.26) (name en.person.34) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.56) (name en.person.58) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and whose gender is male")) [score=8.949, prob=8.19e-05]
              Pred@0392: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at least birthdate of alice")) [score=8.926, prob=8.00e-05]
              Pred@0393: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is larger than 2004")) [score=8.914, prob=7.90e-05]
              Pred@0394: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.29) (name en.person.34) (name en.person.38) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.56) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and whose relationship status is single")) [score=8.913, prob=7.90e-05]
              Pred@0395: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))) (value (list (date 2000 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of employee alice whose employer is mckinsey")) [score=8.873, prob=7.59e-05]
              Pred@0396: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))) (value (list (name en.company.google) (name en.company.mckinsey) (name en.company.toyota))) (type fb:type.any) (canonicalUtterance "employer of employee alice whose job title is software engineer")) [score=8.868, prob=7.55e-05]
              Pred@0397: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose employer is employer of employee alice")) [score=8.835, prob=7.31e-05]
              Pred@0398: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is larger than birthdate of alice")) [score=8.828, prob=7.26e-05]
              Pred@0399: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "gender that is gender of two person")) [score=8.821, prob=7.21e-05]
              Pred@0400: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))) (value (list (date 2004 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of student alice whose end date is 2004")) [score=8.793, prob=7.01e-05]
              Pred@0401: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose employer is not mckinsey")) [score=8.776, prob=6.89e-05]
              Pred@0402: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.34) (name en.person.36) (name en.person.38) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and whose gender is male")) [score=8.774, prob=6.88e-05]
              Pred@0403: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and whose birthplace is new york")) [score=8.769, prob=6.84e-05]
              Pred@0404: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))) (value (list (name en.gender.female))) (type fb:type.any) (canonicalUtterance "gender that is gender of person that is friends with alice")) [score=8.766, prob=6.82e-05]
              Pred@0405: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has the most number of field of study")) [score=8.765, prob=6.81e-05]
              Pred@0406: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose end date is at least 2004")) [score=8.758, prob=6.76e-05]
              Pred@0407: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.23) (name en.person.28) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is birthdate of alice")) [score=8.721, prob=6.52e-05]
              Pred@0408: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))) (value (list (name en.company.google) (name en.company.mckinsey))) (type fb:type.any) (canonicalUtterance "employer of employee alice whose start date is 2004")) [score=8.697, prob=6.37e-05]
              Pred@0409: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))) (value (list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of employee alice whose job title is software engineer")) [score=8.687, prob=6.30e-05]
              Pred@0410: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))) (value (list (name en.person.11) (name en.person.34) (name en.person.44))) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and that is logged in")) [score=8.670, prob=6.19e-05]
              Pred@0411: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.55) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose employer is mckinsey or google")) [score=8.642, prob=6.02e-05]
              Pred@0412: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list (name en.person.11) (name en.person.34) (name en.person.44))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and whose birthdate is 2004")) [score=8.628, prob=5.94e-05]
              Pred@0413: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))) (value (list (name en.person.10) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.42) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that person whose gender is male is friends with")) [score=8.619, prob=5.88e-05]
              Pred@0414: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))) (value (list (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.34) (name en.person.36) (name en.person.42) (name en.person.48) (name en.person.49) (name en.person.51) (name en.person.54) (name en.person.57) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that person whose relationship status is single is friends with")) [score=8.617, prob=5.87e-05]
              Pred@0415: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose start date is at most 2004")) [score=8.611, prob=5.84e-05]
              Pred@0416: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing)))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york or beijing")) [score=8.581, prob=5.67e-05]
              Pred@0417: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))) (value (list (name en.person.10) (name en.person.13) (name en.person.16) (name en.person.2) (name en.person.27) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.34) (name en.person.39) (name en.person.42) (name en.person.44) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.55) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that is friends with person whose relationship status is single")) [score=8.580, prob=5.66e-05]
              Pred@0418: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of two person")) [score=8.553, prob=5.51e-05]
              Pred@0419: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.29) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and whose relationship status is single")) [score=8.536, prob=5.42e-05]
              Pred@0420: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))) (value (list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and whose gender is male")) [score=8.536, prob=5.42e-05]
              Pred@0421: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "city that is birthplace of at most two person")) [score=8.536, prob=5.42e-05]
              Pred@0422: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of the most number of person")) [score=8.524, prob=5.35e-05]
              Pred@0423: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.24) (name en.person.26) (name en.person.34) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.6) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is logged in and whose birthplace is new york")) [score=8.513, prob=5.29e-05]
              Pred@0424: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of student whose end date is not 2004")) [score=8.505, prob=5.25e-05]
              Pred@0425: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm))))) (value (list (name en.person.34))) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm or 200 cm")) [score=8.501, prob=5.23e-05]
              Pred@0426: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string logged_in)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.6) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is logged in and that is logged in")) [score=8.500, prob=5.22e-05]
              Pred@0427: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.20) (name en.person.30) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is smaller than 2004")) [score=8.477, prob=5.11e-05]
              Pred@0428: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))) (value (list (name en.person.15) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.24) (name en.person.26) (name en.person.27) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.41) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose height is smaller than 180 cm")) [score=8.475, prob=5.09e-05]
              Pred@0429: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.29) (name en.person.34) (name en.person.38) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.56) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and whose birthplace is new york")) [score=8.472, prob=5.08e-05]
              Pred@0430: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.16) (name en.person.19) (name en.person.36) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that more than two person is friends with")) [score=8.439, prob=4.92e-05]
              Pred@0431: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is friends with the most number of person")) [score=8.431, prob=4.88e-05]
              Pred@0432: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.33) (name en.person.36) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.56) (name en.person.59) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "student whose end date is larger than 2004")) [score=8.430, prob=4.87e-05]
              Pred@0433: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.42) (name en.person.44) (name en.person.48) (name en.person.49) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9))) (type fb:type.any) (canonicalUtterance "person whose height is larger than 180 cm")) [score=8.427, prob=4.86e-05]
              Pred@0434: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))) (value (list (name en.university.berkeley) (name en.university.brown) (name en.university.ucla))) (type fb:type.any) (canonicalUtterance "university of student alice whose end date is 2004")) [score=8.415, prob=4.80e-05]
              Pred@0435: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of person whose birthplace is new york")) [score=8.392, prob=4.69e-05]
              Pred@0436: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.16) (name en.person.26) (name en.person.37) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is birthdate of alice")) [score=8.389, prob=4.68e-05]
              Pred@0437: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 180 en.cm))))) (value (list (name en.person.15) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.24) (name en.person.26) (name en.person.27) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.41) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose height is at most 180 cm")) [score=8.389, prob=4.67e-05]
              Pred@0438: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is smaller than 2004 or 2010")) [score=8.383, prob=4.65e-05]
              Pred@0439: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.relationship_status.married))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of the most number of person")) [score=8.361, prob=4.55e-05]
              Pred@0440: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.23) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.47) (name en.person.52) (name en.person.56) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single and that is logged in")) [score=8.349, prob=4.49e-05]
              Pred@0441: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.38) (name en.person.4) (name en.person.43) (name en.person.45) (name en.person.51) (name en.person.55) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose university is brown university or ucla")) [score=8.311, prob=4.32e-05]
              Pred@0442: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of person whose birthdate is 2004")) [score=8.309, prob=4.32e-05]
              Pred@0443: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list (name en.person.11) (name en.person.34) (name en.person.44))) (type fb:type.any) (canonicalUtterance "person that is logged in and whose birthdate is 2004")) [score=8.298, prob=4.27e-05]
              Pred@0444: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of the least number of person")) [score=8.295, prob=4.26e-05]
              Pred@0445: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.24) (name en.person.26) (name en.person.34) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.6) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and that is logged in")) [score=8.289, prob=4.23e-05]
              Pred@0446: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that is friends with at most two person")) [score=8.285, prob=4.22e-05]
              Pred@0447: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose gender is male and whose birthdate is 2004")) [score=8.278, prob=4.19e-05]
              Pred@0448: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is larger than birthdate of alice")) [score=8.275, prob=4.17e-05]
              Pred@0449: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.26) (name en.person.34) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.56) (name en.person.58) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose gender is male and whose birthplace is new york")) [score=8.270, prob=4.15e-05]
              Pred@0450: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is friends with at least two person")) [score=8.256, prob=4.09e-05]
              Pred@0451: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is larger than 2004 or 2010")) [score=8.235, prob=4.01e-05]
              Pred@0452: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "city that is birthplace of two person")) [score=8.216, prob=3.93e-05]
              Pred@0453: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string field_of_study) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has less than two field of study")) [score=8.215, prob=3.93e-05]
              Pred@0454: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is at least 2004")) [score=8.210, prob=3.91e-05]
              Pred@0455: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.25) (name en.person.26) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.56) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is logged in and whose gender is male")) [score=8.209, prob=3.91e-05]
              Pred@0456: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of person whose gender is male")) [score=8.204, prob=3.89e-05]
              Pred@0457: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.city.beijing))) (type fb:type.any) (canonicalUtterance "city that is birthplace of the least number of person")) [score=8.196, prob=3.85e-05]
              Pred@0458: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at least 2004 or 2010")) [score=8.192, prob=3.84e-05]
              Pred@0459: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.2) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.31) (name en.person.4) (name en.person.48) (name en.person.51) (name en.person.54) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person that two person is friends with")) [score=8.188, prob=3.83e-05]
              Pred@0460: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice)))) (value (list (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.48) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose gender is gender that is gender of alice")) [score=8.178, prob=3.79e-05]
              Pred@0461: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and whose birthplace is new york")) [score=8.165, prob=3.74e-05]
              Pred@0462: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.city.beijing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of at least two person")) [score=8.155, prob=3.70e-05]
              Pred@0463: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and whose birthdate is 2004")) [score=8.140, prob=3.65e-05]
              Pred@0464: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.7))) (type fb:type.any) (canonicalUtterance "student whose start date is 2004 or 2010")) [score=8.086, prob=3.45e-05]
              Pred@0465: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string friend) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.11) (name en.person.12) (name en.person.15) (name en.person.19) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.56) (name en.person.57) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that is friends with the least number of person")) [score=8.082, prob=3.44e-05]
              Pred@0466: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.22) (name en.person.34) (name en.person.36) (name en.person.38) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose gender is male and whose relationship status is single")) [score=8.081, prob=3.44e-05]
              Pred@0467: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string gender) (string =) en.gender.male))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.25) (name en.person.26) (name en.person.28) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.38) (name en.person.39) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose gender is male and whose gender is male")) [score=8.073, prob=3.41e-05]
              Pred@0468: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york and whose birthdate is 2004")) [score=8.071, prob=3.40e-05]
              Pred@0469: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <=) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has at most two employer")) [score=8.067, prob=3.39e-05]
              Pred@0470: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of at most two person")) [score=8.028, prob=3.26e-05]
              Pred@0471: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of the most number of person")) [score=8.021, prob=3.24e-05]
              Pred@0472: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.23) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.47) (name en.person.52) (name en.person.56) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is logged in and whose relationship status is single")) [score=8.013, prob=3.21e-05]
              Pred@0473: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.22) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose field of study is not computer science")) [score=8.010, prob=3.20e-05]
              Pred@0474: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has at most two relationship status")) [score=7.987, prob=3.13e-05]
              Pred@0475: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has at most two birthplace")) [score=7.960, prob=3.04e-05]
              Pred@0476: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of employee whose start date is not 2004")) [score=7.955, prob=3.03e-05]
              Pred@0477: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice)))) (value (list (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of person that alice is friends with")) [score=7.942, prob=2.99e-05]
              Pred@0478: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))) (value (list (name en.person.11) (name en.person.34) (name en.person.44))) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 and whose relationship status is single")) [score=7.930, prob=2.95e-05]
              Pred@0479: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate))))) (value (list (name en.person.21) (name en.person.24) (name en.person.30) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.45) (name en.person.48) (name en.person.54) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose birthdate is birthdate of alice")) [score=7.924, prob=2.94e-05]
              Pred@0480: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string relationship_status)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has the most number of relationship status")) [score=7.804, prob=2.61e-05]
              Pred@0481: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of person that is logged in")) [score=7.799, prob=2.59e-05]
              Pred@0482: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.25) (name en.person.26) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.56) (name en.person.59) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose gender is male and that is logged in")) [score=7.779, prob=2.54e-05]
              Pred@0483: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has the most number of university")) [score=7.769, prob=2.52e-05]
              Pred@0484: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.11) (name en.person.17) (name en.person.21) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.32) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.5) (name en.person.50) (name en.person.53) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that the least number of person is friends with")) [score=7.753, prob=2.48e-05]
              Pred@0485: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string job_title) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has less than two job title")) [score=7.741, prob=2.45e-05]
              Pred@0486: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))) (value (list (name en.company.mckinsey))) (type fb:type.any) (canonicalUtterance "employer of employee alice whose employer is mckinsey")) [score=7.672, prob=2.28e-05]
              Pred@0487: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.20) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the smallest end date")) [score=7.668, prob=2.27e-05]
              Pred@0488: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))) (value (list (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of alice or bob")) [score=7.668, prob=2.27e-05]
              Pred@0489: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of person whose birthplace is new york")) [score=7.659, prob=2.25e-05]
              Pred@0490: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose university is university of student alice")) [score=7.653, prob=2.24e-05]
              Pred@0491: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string !=) en.person.alice))) (value (list (name en.relationship_status.married))) (type fb:type.any) (canonicalUtterance "relationship status that is not relationship status of alice")) [score=7.628, prob=2.18e-05]
              Pred@0492: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.44) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the largest end date")) [score=7.625, prob=2.18e-05]
              Pred@0493: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is larger than 2004")) [score=7.600, prob=2.12e-05]
              Pred@0494: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of at least two person")) [score=7.590, prob=2.10e-05]
              Pred@0495: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is larger than 2004")) [score=7.584, prob=2.09e-05]
              Pred@0496: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of at least two person")) [score=7.559, prob=2.04e-05]
              Pred@0497: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string gender)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has the most number of gender")) [score=7.555, prob=2.03e-05]
              Pred@0498: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string university) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has less than two university")) [score=7.537, prob=1.99e-05]
              Pred@0499: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.13) (name en.person.14) (name en.person.16) (name en.person.17) (name en.person.26) (name en.person.27) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is friends with two person")) [score=7.523, prob=1.97e-05]
              Pred@0500: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.43) (name en.person.44) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at least 2004")) [score=7.499, prob=1.92e-05]
              Pred@0501: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.22) (name en.person.26) (name en.person.37) (name en.person.38) (name en.person.43) (name en.person.45) (name en.person.54) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is smaller than 2004")) [score=7.470, prob=1.86e-05]
              Pred@0502: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at most 2004 or 2010")) [score=7.451, prob=1.83e-05]
              Pred@0503: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))) (value (list (name en.person.3) (name en.person.6))) (type fb:type.any) (canonicalUtterance "person that is friends with alice or bob")) [score=7.436, prob=1.80e-05]
              Pred@0504: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.59) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is smaller than 2004")) [score=7.423, prob=1.78e-05]
              Pred@0505: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.22) (name en.person.37) (name en.person.43) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has the largest start date")) [score=7.408, prob=1.75e-05]
              Pred@0506: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (string birthplace)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has the most number of birthplace")) [score=7.400, prob=1.74e-05]
              Pred@0507: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.53) (name en.person.55) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is 2004 or 2010")) [score=7.396, prob=1.73e-05]
              Pred@0508: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that less than two person is friends with")) [score=7.379, prob=1.70e-05]
              Pred@0509: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is birthdate of alice")) [score=7.378, prob=1.70e-05]
              Pred@0510: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string field_of_study))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has the least number of field of study")) [score=7.358, prob=1.67e-05]
              Pred@0511: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is at least 2004")) [score=7.356, prob=1.67e-05]
              Pred@0512: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))) (value (list)) (type fb:type.any) (canonicalUtterance "person whose height is 180 cm")) [score=7.333, prob=1.63e-05]
              Pred@0513: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string !=) en.person.alice))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that alice not is friends with")) [score=7.310, prob=1.59e-05]
              Pred@0514: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.31) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is 2004 or 2010")) [score=7.305, prob=1.58e-05]
              Pred@0515: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height))))) (value (list (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose height is height of alice")) [score=7.302, prob=1.58e-05]
              Pred@0516: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has at least two relationship status")) [score=7.264, prob=1.52e-05]
              Pred@0517: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.person.11) (name en.person.12) (name en.person.16) (name en.person.21) (name en.person.24) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.39) (name en.person.41) (name en.person.42) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.48) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at most 2004")) [score=7.260, prob=1.51e-05]
              Pred@0518: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string university) (string !=) en.university.brown)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose university is not brown university")) [score=7.259, prob=1.51e-05]
              Pred@0519: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <=) (number 2)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has at most two gender")) [score=7.240, prob=1.48e-05]
              Pred@0520: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_end_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.23) (name en.person.28) (name en.person.30) (name en.person.35) (name en.person.37) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is smaller than 2004")) [score=7.216, prob=1.45e-05]
              Pred@0521: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.30) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the smallest start date")) [score=7.201, prob=1.43e-05]
              Pred@0522: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.person.12) (name en.person.16) (name en.person.21) (name en.person.24) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.35) (name en.person.38) (name en.person.39) (name en.person.41) (name en.person.42) (name en.person.45) (name en.person.46) (name en.person.48) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.57) (name en.person.59) (name en.person.8) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "person whose birthdate is smaller than 2004")) [score=7.180, prob=1.40e-05]
              Pred@0523: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the largest start date")) [score=7.180, prob=1.40e-05]
              Pred@0524: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (value (list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004 or 2010")) [score=7.107, prob=1.30e-05]
              Pred@0525: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))) (value (list (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of person whose gender is male")) [score=7.102, prob=1.29e-05]
              Pred@0526: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has at least two birthplace")) [score=7.052, prob=1.23e-05]
              Pred@0527: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.43) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at least 2004")) [score=7.021, prob=1.19e-05]
              Pred@0528: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))) (value (list (name en.person.38) (name en.person.41) (name en.person.46) (name en.person.53) (name en.person.59))) (type fb:type.any) (canonicalUtterance "person that has the smallest birthdate")) [score=7.014, prob=1.18e-05]
              Pred@0529: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "gender that is gender of less than two person")) [score=7.002, prob=1.17e-05]
              Pred@0530: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose gender is male or female")) [score=6.993, prob=1.16e-05]
              Pred@0531: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of more than two person")) [score=6.991, prob=1.16e-05]
              Pred@0532: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of more than two person")) [score=6.979, prob=1.14e-05]
              Pred@0533: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.37) (name en.person.42) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose employer is not mckinsey")) [score=6.970, prob=1.13e-05]
              Pred@0534: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.person.10) (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is at least 2004")) [score=6.954, prob=1.11e-05]
              Pred@0535: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of less than two person")) [score=6.878, prob=1.03e-05]
              Pred@0536: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string max) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the most number of employer")) [score=6.875, prob=1.03e-05]
              Pred@0537: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.16) (name en.person.18) (name en.person.23) (name en.person.26) (name en.person.30) (name en.person.31) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.44) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose job title is not software engineer")) [score=6.841, prob=9.94e-06]
              Pred@0538: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.38) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "student that has the smallest end date")) [score=6.802, prob=9.57e-06]
              Pred@0539: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string =) en.person.alice))) (value (list (name en.person.3) (name en.person.6))) (type fb:type.any) (canonicalUtterance "person that is friends with alice")) [score=6.792, prob=9.47e-06]
              Pred@0540: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))) (value (list (name en.person.14) (name en.person.9))) (type fb:type.any) (canonicalUtterance "person that has the largest height")) [score=6.766, prob=9.22e-06]
              Pred@0541: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "gender that is gender of at most two person")) [score=6.751, prob=9.09e-06]
              Pred@0542: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.16) (name en.person.4) (name en.person.45) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has the smallest start date")) [score=6.737, prob=8.97e-06]
              Pred@0543: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose end date is not 2004")) [score=6.708, prob=8.71e-06]
              Pred@0544: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status))))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.29) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose relationship status is relationship status of alice")) [score=6.688, prob=8.53e-06]
              Pred@0545: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.38) (name en.person.4) (name en.person.45) (name en.person.51) (name en.person.59) (name en.person.7) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is at most 2004")) [score=6.673, prob=8.41e-06]
              Pred@0546: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string employment_start_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.42) (name en.person.5) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is at most 2004")) [score=6.608, prob=7.88e-06]
              Pred@0547: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (var s) (string employer) (string <) (number 2))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has less than two employer")) [score=6.604, prob=7.85e-06]
              Pred@0548: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))) (value (list (name en.person.10) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.22) (name en.person.23) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.31) (name en.person.32) (name en.person.36) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.56) (name en.person.58) (name en.person.6) (name en.person.9) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is larger than 2004")) [score=6.579, prob=7.65e-06]
              Pred@0549: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (var s) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string education_end_date)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.11) (name en.person.23) (name en.person.51) (name en.person.59) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "student that has the largest end date")) [score=6.553, prob=7.45e-06]
              Pred@0550: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))) (value (list (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of person whose birthdate is 2004")) [score=6.529, prob=7.28e-06]
              Pred@0551: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has more than two relationship status")) [score=6.491, prob=7.01e-06]
              Pred@0552: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose height is not 180 cm")) [score=6.474, prob=6.89e-06]
              Pred@0553: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.26) (name en.person.38) (name en.person.55) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is 2004 or 2010")) [score=6.456, prob=6.77e-06]
              Pred@0554: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is gender of person whose relationship status is single")) [score=6.415, prob=6.50e-06]
              Pred@0555: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string birthdate))))) (value (list (name en.person.19) (name en.person.36) (name en.person.6))) (type fb:type.any) (canonicalUtterance "person that has the largest birthdate")) [score=6.375, prob=6.24e-06]
              Pred@0556: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))) (value (list (name en.person.10) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.25) (name en.person.27) (name en.person.28) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.45) (name en.person.5) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.59) (name en.person.9))) (type fb:type.any) (canonicalUtterance "person whose birthplace is not new york")) [score=6.357, prob=6.13e-06]
              Pred@0557: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_start_date)))) (value (list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of student alice")) [score=6.333, prob=5.98e-06]
              Pred@0558: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single or married")) [score=6.265, prob=5.59e-06]
              Pred@0559: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose end date is not 2004")) [score=6.217, prob=5.33e-06]
              Pred@0560: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has at least two gender")) [score=6.204, prob=5.26e-06]
              Pred@0561: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) en.person.alice))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that alice is friends with")) [score=6.192, prob=5.20e-06]
              Pred@0562: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string gender))))) (value (list (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.48) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose gender is gender of alice")) [score=6.189, prob=5.18e-06]
              Pred@0563: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) en.person.alice))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of alice")) [score=6.140, prob=4.94e-06]
              Pred@0564: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string friend)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))) (value (list (name en.person.14))) (type fb:type.any) (canonicalUtterance "person that alice or bob is friends with")) [score=6.137, prob=4.92e-06]
              Pred@0565: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has more than two gender")) [score=6.100, prob=4.74e-06]
              Pred@0566: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string field_of_study)))) (value (list (name en.field.computer_science) (name en.field.economics) (name en.field.history))) (type fb:type.any) (canonicalUtterance "field of study of student alice")) [score=6.068, prob=4.59e-06]
              Pred@0567: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))) (value (list (name en.person.10) (name en.person.12) (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.3) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.39) (name en.person.42) (name en.person.43) (name en.person.48) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose relationship status is not single")) [score=6.055, prob=4.53e-06]
              Pred@0568: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string !=) en.person.alice))) (value (list (name en.city.beijing))) (type fb:type.any) (canonicalUtterance "city that is not birthplace of alice")) [score=5.893, prob=3.85e-06]
              Pred@0569: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))) (value (list (name en.person.4) (name en.person.5))) (type fb:type.any) (canonicalUtterance "person that has the smallest height")) [score=5.868, prob=3.76e-06]
              Pred@0570: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has more than two birthplace")) [score=5.755, prob=3.36e-06]
              Pred@0571: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student whose start date is not 2004")) [score=5.742, prob=3.31e-06]
              Pred@0572: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string birthplace)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "city that is birthplace of alice or bob")) [score=5.688, prob=3.14e-06]
              Pred@0573: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string job_title))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the least number of job title")) [score=5.661, prob=3.06e-06]
              Pred@0574: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has two birthplace")) [score=5.630, prob=2.96e-06]
              Pred@0575: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string job_title)))) (value (list (name en.job_title.ceo) (name en.job_title.program_manager) (name en.job_title.software_engineer))) (type fb:type.any) (canonicalUtterance "job title of employee alice")) [score=5.612, prob=2.91e-06]
              Pred@0576: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that not is friends with alice")) [score=5.598, prob=2.87e-06]
              Pred@0577: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has less than two relationship status")) [score=5.568, prob=2.78e-06]
              Pred@0578: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_end_date)))) (value (list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of employee alice")) [score=5.563, prob=2.77e-06]
              Pred@0579: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has less than two birthplace")) [score=5.560, prob=2.76e-06]
              Pred@0580: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employment_start_date)))) (value (list (date 2000 -1 -1) (date 2001 -1 -1) (date 2002 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2007 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "start date of employee alice")) [score=5.503, prob=2.61e-06]
              Pred@0581: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.20) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee whose start date is not 2004")) [score=5.433, prob=2.43e-06]
              Pred@0582: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string university))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string student))) (string student)))) (value (list (name en.person.10) (name en.person.11) (name en.person.16) (name en.person.19) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.26) (name en.person.33) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.43) (name en.person.45) (name en.person.50) (name en.person.51) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.59) (name en.person.7) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "student that has the least number of university")) [score=5.399, prob=2.35e-06]
              Pred@0583: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string relationship_status)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has the least number of relationship status")) [score=5.262, prob=2.05e-06]
              Pred@0584: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string <) (number 2)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has less than two gender")) [score=5.246, prob=2.02e-06]
              Pred@0585: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))) (value (list (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.24) (name en.person.26) (name en.person.29) (name en.person.34) (name en.person.35) (name en.person.38) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthplace is new york")) [score=5.244, prob=2.01e-06]
              Pred@0586: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.job_title.software_engineer en.job_title.program_manager))) (value (list (name en.job_title.program_manager) (name en.job_title.software_engineer))) (type fb:type.any) (canonicalUtterance "software engineer or program manager")) [score=5.186, prob=1.90e-06]
              Pred@0587: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has two relationship status")) [score=5.110, prob=1.76e-06]
              Pred@0588: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string relationship_status)) (string =) en.person.alice))) (value (list (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status that is relationship status of alice")) [score=5.063, prob=1.68e-06]
              Pred@0589: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string !=) en.person.alice))) (value (list (name en.gender.male))) (type fb:type.any) (canonicalUtterance "gender that is not gender of alice")) [score=5.034, prob=1.63e-06]
              Pred@0590: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string education_end_date)))) (value (list (date 2000 -1 -1) (date 2003 -1 -1) (date 2004 -1 -1) (date 2005 -1 -1) (date 2006 -1 -1) (date 2008 -1 -1) (date 2009 -1 -1))) (type fb:type.any) (canonicalUtterance "end date of student alice")) [score=4.950, prob=1.50e-06]
              Pred@0591: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string gender)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has the least number of gender")) [score=4.833, prob=1.34e-06]
              Pred@0592: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) en.person.alice))) (value (list (name en.gender.female))) (type fb:type.any) (canonicalUtterance "gender that is gender of alice")) [score=4.798, prob=1.29e-06]
              Pred@0593: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))) (value (list (name en.person.11) (name en.person.34) (name en.person.44) (name en.person.7))) (type fb:type.any) (canonicalUtterance "person whose birthdate is 2004")) [score=4.778, prob=1.26e-06]
              Pred@0594: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (string birthplace)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.34) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.7) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person that has the least number of birthplace")) [score=4.740, prob=1.22e-06]
              Pred@0595: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single))) (value (list (name en.person.11) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.19) (name en.person.22) (name en.person.23) (name en.person.29) (name en.person.30) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.52) (name en.person.54) (name en.person.56) (name en.person.59) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose relationship status is single")) [score=4.737, prob=1.21e-06]
              Pred@0596: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string logged_in)))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.17) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.3) (name en.person.30) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.37) (name en.person.40) (name en.person.41) (name en.person.43) (name en.person.44) (name en.person.47) (name en.person.5) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.59) (name en.person.6) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person that is logged in")) [score=4.702, prob=1.17e-06]
              Pred@0597: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) en.gender.male))) (value (list (name en.person.10) (name en.person.11) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.17) (name en.person.20) (name en.person.22) (name en.person.25) (name en.person.26) (name en.person.28) (name en.person.33) (name en.person.34) (name en.person.36) (name en.person.38) (name en.person.39) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.49) (name en.person.5) (name en.person.54) (name en.person.56) (name en.person.58) (name en.person.59) (name en.person.7) (name en.person.8))) (type fb:type.any) (canonicalUtterance "person whose gender is male")) [score=4.623, prob=1.08e-06]
              Pred@0598: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))) (value (list (number 6857 en.cm))) (type fb:type.any) (canonicalUtterance "total height of person")) [score=4.580, prob=1.04e-06]
              Pred@0599: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string student))) (string university)))) (value (list (name en.university.berkeley) (name en.university.brown) (name en.university.ucla))) (type fb:type.any) (canonicalUtterance "university of student alice")) [score=4.470, prob=9.28e-07]
              Pred@0600: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string gender)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob)))) (value (list (name en.gender.female))) (type fb:type.any) (canonicalUtterance "gender that is gender of alice or bob")) [score=4.468, prob=9.27e-07]
              Pred@0601: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))) (value (list (name en.person.15) (name en.person.16) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.21) (name en.person.23) (name en.person.24) (name en.person.27) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.37) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.48) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.55) (name en.person.57) (name en.person.6) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose gender is not male")) [score=4.407, prob=8.72e-07]
              Pred@0602: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))) (value (list (name en.person.10) (name en.person.12) (name en.person.13) (name en.person.14) (name en.person.15) (name en.person.16) (name en.person.17) (name en.person.18) (name en.person.19) (name en.person.2) (name en.person.20) (name en.person.21) (name en.person.22) (name en.person.23) (name en.person.24) (name en.person.25) (name en.person.26) (name en.person.27) (name en.person.28) (name en.person.29) (name en.person.3) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.33) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.38) (name en.person.39) (name en.person.4) (name en.person.40) (name en.person.41) (name en.person.42) (name en.person.43) (name en.person.45) (name en.person.46) (name en.person.47) (name en.person.48) (name en.person.49) (name en.person.5) (name en.person.50) (name en.person.51) (name en.person.52) (name en.person.53) (name en.person.54) (name en.person.55) (name en.person.56) (name en.person.57) (name en.person.58) (name en.person.59) (name en.person.6) (name en.person.8) (name en.person.9) (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "person whose birthdate is not 2004")) [score=4.400, prob=8.66e-07]
              Pred@0603: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string gender) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "person that has two gender")) [score=4.261, prob=7.53e-07]
              Pred@0604: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty ((lambda s (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (var s) (string min) (string employer))) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.domain (string employee))) (string employee)))) (value (list (name en.person.10) (name en.person.12) (name en.person.14) (name en.person.16) (name en.person.18) (name en.person.20) (name en.person.23) (name en.person.26) (name en.person.28) (name en.person.30) (name en.person.31) (name en.person.32) (name en.person.35) (name en.person.36) (name en.person.37) (name en.person.42) (name en.person.43) (name en.person.44) (name en.person.5) (name en.person.53) (name en.person.55) (name en.person.58) (name en.person.7) (name en.person.alice))) (type fb:type.any) (canonicalUtterance "employee that has the least number of employer")) [score=4.212, prob=7.18e-07]
              Pred@0605: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.city) (string !type))))) (value (list (number 2 count))) (type fb:type.any) (canonicalUtterance "number of city")) [score=4.090, prob=6.35e-07]
              Pred@0606: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.university) (string !type))))) (value (list (number 3 count))) (type fb:type.any) (canonicalUtterance "number of university")) [score=4.027, prob=5.96e-07]
              Pred@0607: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.company) (string !type))))) (value (list (number 3 count))) (type fb:type.any) (canonicalUtterance "number of company")) [score=3.904, prob=5.27e-07]
              Pred@0608: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.university.brown en.university.ucla))) (value (list (name en.university.brown) (name en.university.ucla))) (type fb:type.any) (canonicalUtterance "brown university or ucla")) [score=3.880, prob=5.15e-07]
              Pred@0609: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.field.computer_science en.field.history))) (value (list (name en.field.computer_science) (name en.field.history))) (type fb:type.any) (canonicalUtterance "computer science or history")) [score=3.736, prob=4.46e-07]
              Pred@0610: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.company.mckinsey en.company.google))) (value (list (name en.company.google) (name en.company.mckinsey))) (type fb:type.any) (canonicalUtterance "mckinsey or google")) [score=3.694, prob=4.28e-07]
              Pred@0611: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))) (value (list (number 60 count))) (type fb:type.any) (canonicalUtterance "number of person")) [score=3.671, prob=4.18e-07]
              Pred@0612: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.relationship_status) (string !type))))) (value (list (number 2 count))) (type fb:type.any) (canonicalUtterance "number of relationship status")) [score=3.620, prob=3.97e-07]
              Pred@0613: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthplace)))) (value (list (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "birthplace of alice")) [score=3.403, prob=3.20e-07]
              Pred@0614: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 180 en.cm) (number 200 en.cm)))) (value (list (number 180 en.cm) (number 200 en.cm))) (type fb:type.any) (canonicalUtterance "180 cm or 200 cm")) [score=3.401, prob=3.19e-07]
              Pred@0615: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.job_title) (string !type))))) (value (list (number 3 count))) (type fb:type.any) (canonicalUtterance "number of job title")) [score=3.357, prob=3.05e-07]
              Pred@0616: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.city.new_york en.city.bejing))) (value (list (name en.city.bejing) (name en.city.new_york))) (type fb:type.any) (canonicalUtterance "new york or beijing")) [score=3.319, prob=2.94e-07]
              Pred@0617: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.gender.male en.gender.female))) (value (list (name en.gender.female) (name en.gender.male))) (type fb:type.any) (canonicalUtterance "male or female")) [score=3.260, prob=2.77e-07]
              Pred@0618: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string employee))) (string employer)))) (value (list (name en.company.google) (name en.company.mckinsey) (name en.company.toyota))) (type fb:type.any) (canonicalUtterance "employer of employee alice")) [score=3.227, prob=2.68e-07]
              Pred@0619: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string height)))) (value (list (number 157 en.cm))) (type fb:type.any) (canonicalUtterance "height of alice")) [score=3.189, prob=2.58e-07]
              Pred@0620: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.gender) (string !type))))) (value (list (number 2 count))) (type fb:type.any) (canonicalUtterance "number of gender")) [score=3.183, prob=2.57e-07]
              Pred@0621: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string relationship_status)))) (value (list (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "relationship status of alice")) [score=3.068, prob=2.29e-07]
              Pred@0622: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string birthdate)))) (value (list (date 2003 -1 -1))) (type fb:type.any) (canonicalUtterance "birthdate of alice")) [score=3.067, prob=2.28e-07]
              Pred@0623: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string height))))) (value (list (number 180.447 en.cm))) (type fb:type.any) (canonicalUtterance "average height of person")) [score=3.010, prob=2.16e-07]
              Pred@0624: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (value (list (date 2004 -1 -1) (date 2010 -1 -1))) (type fb:type.any) (canonicalUtterance "2004 or 2010")) [score=2.624, prob=1.47e-07]
              Pred@0625: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.person.alice (string gender)))) (value (list (name en.gender.female))) (type fb:type.any) (canonicalUtterance "gender of alice")) [score=2.530, prob=1.33e-07]
              Pred@0626: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.relationship_status.single en.relationship_status.married))) (value (list (name en.relationship_status.married) (name en.relationship_status.single))) (type fb:type.any) (canonicalUtterance "single or married")) [score=2.395, prob=1.17e-07]
              Pred@0627: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.alice en.person.bob))) (value (list (name en.person.alice) (name en.person.bob))) (type fb:type.any) (canonicalUtterance "alice or bob")) [score=2.367, prob=1.13e-07]
              Pred@0628: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.field) (string !type))))) (value (list (number 3 count))) (type fb:type.any) (canonicalUtterance "number of field")) [score=2.327, prob=1.09e-07]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=629 parsedNumCandidates=629 timeout=0 numTokens=1 parseTime=4799 maxCellSize=591 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=45402 numCells=570
            Cumulative(iter=0.train): correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=629 parsedNumCandidates=629 timeout=0 numTokens=1 parseTime=4799 maxCellSize=591 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=45402 numCells=570
          } [4.9s, cum. 4.9s]
        } [4.9s, cum. 4.9s]
        Stats for iter=0.train: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=629 parsedNumCandidates=629 timeout=0 numTokens=1 parseTime=4799 maxCellSize=591 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=45402 numCells=570
        Evaluation stats for iter=0.train {
          correct = 0/ << 0 ~ 0 >> /0 (1)
          oracle = 0/ << 0 ~ 0 >> /0 (1)
          partCorrect = 0/ << 0 ~ 0 >> /0 (1)
          partOracle = 0/ << 0 ~ 0 >> /0 (1)
          parsed = 1/ << 1 ~ 0 >> /1 (1)
          numCandidates = 629/ << 629 ~ 0 >> /629 (1)
          parsedNumCandidates = 629/ << 629 ~ 0 >> /629 (1)
          timeout = 0/ << 0 ~ 0 >> /0 (1)
          numTokens = 1/ << 1 ~ 0 >> /1 (1)
          parseTime = 4799/ << 4799 ~ 0 >> /4799 (1)
          maxCellSize = 591@$CP1:9/ << 591 ~ 0 >> /591@$CP1:9 (1)
          fallOffBeam = 0/ << 0 ~ 0 >> /0 (1)
          totalDerivs = 0/ << 0 ~ 0 >> /0 (1)
          numOfFeaturizedDerivs = 45402/ << 45402 ~ 0 >> /45402 (1)
          numCells = 570/ << 570 ~ 0 >> /570 (1)
        }
      } [4.9s, cum. 4.9s]
      StopWatchSet {
        FeatureExtractor.extractLocal	1.1s (0.0s x 45402)
        Executor.execute	2.5s (0.0s x 40762)
        Parser.parse	4.9s (4.9s x 1)
      }
      Params.write(genovernight.out/socialnetwork/params.0) 
      StopWatchSet {
        FeatureExtractor.extractLocal	1.1s (0.0s x 45402)
        Executor.execute	2.5s (0.0s x 40762)
        Parser.parse	4.9s (4.9s x 1)
      }
      Params.write(genovernight.out/socialnetwork/params.0) 
    } [5.0s, cum. 5.0s]
  } [5.0s, cum. 5.2s]
  Execution directory: genovernight.out/socialnetwork
} [5.2s]
