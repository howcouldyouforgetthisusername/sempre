main() {
  Execution directory: genovernight.out/restaurants
  Grammar.read {
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate246 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r0 (lambda e (call edu.stanford.nlp.sempre.overnight.Simple...(200 total)
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate251 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r (lambda cp (call edu.stanford.nlp.sempre.overnight.Simple...(209 total)
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate252 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r (lambda cp (call edu.stanford.nlp.sempre.overnight.Simple...(209 total)
    WARNING: Category not defined in the grammar: $BinaryOp; used in rule: $BinaryOpRight -> $BinaryOp $EntityNP2 (JoinFn betaReduce forward)
    Valid tags: [general, generate, geo440, geo880, parse, regex]
    Used tags: [general, generate]
    398 rules
  }
  Parser: 87 catUnaryRules (sorted), 311 nonCatUnaryRules (in trie)
  Dataset.read {
    Reading overnight/null.examples {
      Example overnight/null.examples:0 (0): [null] => null
    }
  }
  Learner.learn() {
    Iteration 0/0 {
      Processing iter=0.train: 1 examples {
        Examples {
          iter=0.train: example 0/1: overnight/null.examples:0 {
            Example: null {
              Tokens: [null]
              Lemmatized tokens: [null]
              POS tags: [UNK]
              NER tags: [UNK]
              NER values: [UNK]
              Dependency children: []
            }
            Parser.parse: parse {
              WARNING: Currently CatSizeBound is usable only when useSizeInsteadOfDepth = true.
              FloatingParser.infer() {
                SimpleWorld.createWorld: domain = restaurants (727 entity/property pairs) 
                Parser.ensureExecuted 
              } [1.1s, cum. 1.1s]
            } [1.1s, cum. 1.1s]
            Parser.setEvaluation: 339 candidates {
              Pred@0000: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and whose star rating is 3 stars")) [score=13.904, prob=0.128]
              Pred@0001: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant whose star rating is 3 stars")) [score=13.438, prob=0.080]
              Pred@0002: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and whose star rating is 3 stars")) [score=12.950, prob=0.049]
              Pred@0003: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant whose star rating is 3 stars serves")) [score=12.366, prob=0.027]
              Pred@0004: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is at least star rating of thai cafe")) [score=12.314, prob=0.026]
              Pred@0005: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and whose neighborhood is midtown west")) [score=12.259, prob=0.025]
              Pred@0006: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant whose price rating is 2 dollar signs")) [score=12.227, prob=0.024]
              Pred@0007: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.35) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs")) [score=12.198, prob=0.023]
              Pred@0008: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and whose star rating is 3 stars")) [score=12.149, prob=0.022]
              Pred@0009: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.14) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.35))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and whose price rating is 2 dollar signs")) [score=12.007, prob=0.019]
              Pred@0010: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.48) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and whose cuisine is thai")) [score=11.981, prob=0.019]
              Pred@0011: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string credit)))) (value (list (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that takes credit cards")) [score=11.936, prob=0.018]
              Pred@0012: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and whose star rating is 3 stars")) [score=11.879, prob=0.017]
              Pred@0013: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is at least 3 stars or 5 stars")) [score=11.840, prob=0.016]
              Pred@0014: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant whose price rating is 2 dollar signs")) [score=11.786, prob=0.015]
              Pred@0015: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that has outdoor seating")) [score=11.778, prob=0.015]
              Pred@0016: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs")) [score=11.710, prob=0.014]
              Pred@0017: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and whose star rating is 3 stars")) [score=11.640, prob=0.013]
              Pred@0018: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))) (value (list (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant whose star rating is 3 stars")) [score=11.638, prob=0.013]
              Pred@0019: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.35) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and whose star rating is 3 stars")) [score=11.588, prob=0.013]
              Pred@0020: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that takes credit cards")) [score=11.418, prob=0.011]
              Pred@0021: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and whose cuisine is thai")) [score=11.360, prob=0.010]
              Pred@0022: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string groups)))) (value (list (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that is good for groups")) [score=11.293, prob=0.009]
              Pred@0023: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.35))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and whose neighborhood is midtown west")) [score=11.250, prob=0.009]
              Pred@0024: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is smaller than 3 stars or 5 stars")) [score=11.218, prob=0.009]
              Pred@0025: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant whose cuisine is thai")) [score=11.186, prob=0.008]
              Pred@0026: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and whose star rating is 3 stars")) [score=11.168, prob=0.008]
              Pred@0027: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string waiter)))) (value (list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that has waiter service")) [score=11.166, prob=0.008]
              Pred@0028: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.48) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and whose star rating is 3 stars")) [score=11.163, prob=0.008]
              Pred@0029: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))) (value (list (name en.neighborhood.midtown_west))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant whose neighborhood is midtown west")) [score=11.126, prob=0.008]
              Pred@0030: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.56) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and whose price rating is 2 dollar signs")) [score=11.096, prob=0.008]
              Pred@0031: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and whose neighborhood is midtown west")) [score=11.090, prob=0.008]
              Pred@0032: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string credit)))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.53))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that takes credit cards")) [score=11.052, prob=0.007]
              Pred@0033: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is at least 2 dollar signs or 3 dollar signs")) [score=10.988, prob=0.007]
              Pred@0034: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string groups)))) (value (list (name en.restaurant.12) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that is good for groups")) [score=10.924, prob=0.007]
              Pred@0035: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.7))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and whose star rating is 3 stars")) [score=10.920, prob=0.006]
              Pred@0036: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that has outdoor seating")) [score=10.864, prob=0.006]
              Pred@0037: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is at most 3 stars or 5 stars")) [score=10.767, prob=0.006]
              Pred@0038: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string takeout)))) (value (list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that has take-out")) [score=10.765, prob=0.006]
              Pred@0039: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.59))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is smaller than star rating of thai cafe")) [score=10.729, prob=0.005]
              Pred@0040: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string credit)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that takes credit cards")) [score=10.721, prob=0.005]
              Pred@0041: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant whose neighborhood is midtown west")) [score=10.661, prob=0.005]
              Pred@0042: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that has outdoor seating")) [score=10.604, prob=0.005]
              Pred@0043: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and whose star rating is 3 stars")) [score=10.570, prob=0.005]
              Pred@0044: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and whose neighborhood is midtown west")) [score=10.570, prob=0.005]
              Pred@0045: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and whose price rating is 2 dollar signs")) [score=10.545, prob=0.004]
              Pred@0046: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and whose neighborhood is midtown west")) [score=10.486, prob=0.004]
              Pred@0047: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string outdoor)))) (value (list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that has outdoor seating")) [score=10.455, prob=0.004]
              Pred@0048: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.16) (name en.restaurant.47) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and whose neighborhood is midtown west")) [score=10.437, prob=0.004]
              Pred@0049: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.50) (name en.restaurant.56))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and whose price rating is 2 dollar signs")) [score=10.431, prob=0.004]
              Pred@0050: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string waiter)))) (value (list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that has waiter service")) [score=10.427, prob=0.004]
              Pred@0051: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is larger than 3 stars or 5 stars")) [score=10.415, prob=0.004]
              Pred@0052: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and whose star rating is 3 stars")) [score=10.404, prob=0.004]
              Pred@0053: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that takes credit cards")) [score=10.374, prob=0.004]
              Pred@0054: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that has waiter service")) [score=10.363, prob=0.004]
              Pred@0055: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.16) (name en.restaurant.47) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and whose cuisine is thai")) [score=10.358, prob=0.004]
              Pred@0056: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that is good for groups")) [score=10.292, prob=0.003]
              Pred@0057: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))) (value (list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is at most 2 dollar signs or 3 dollar signs")) [score=10.281, prob=0.003]
              Pred@0058: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string kids)))) (value (list (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that is good for kids")) [score=10.261, prob=0.003]
              Pred@0059: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.13) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.50))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and whose price rating is 2 dollar signs")) [score=10.232, prob=0.003]
              Pred@0060: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno)))) (value (list (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of thai cafe or pizzeria juno")) [score=10.198, prob=0.003]
              Pred@0061: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))) (value (list (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant whose cuisine is thai")) [score=10.194, prob=0.003]
              Pred@0062: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))) (value (list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is at most price rating of thai cafe")) [score=10.182, prob=0.003]
              Pred@0063: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))) (value (list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is smaller than 2 dollar signs")) [score=10.172, prob=0.003]
              Pred@0064: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string kids)))) (value (list (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that is good for kids")) [score=10.153, prob=0.003]
              Pred@0065: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string groups)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.56) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that is good for groups")) [score=10.143, prob=0.003]
              Pred@0066: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.7) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and whose star rating is 3 stars")) [score=10.094, prob=0.003]
              Pred@0067: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and whose price rating is 2 dollar signs")) [score=10.084, prob=0.003]
              Pred@0068: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string reserve)))) (value (list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that takes reservations")) [score=10.073, prob=0.003]
              Pred@0069: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is at least 2 dollar signs")) [score=10.053, prob=0.003]
              Pred@0070: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.48) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and whose cuisine is thai")) [score=10.045, prob=0.003]
              Pred@0071: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and whose cuisine is thai")) [score=10.037, prob=0.003]
              Pred@0072: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe)))) (value (list (name en.restaurant.10) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.23) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.54) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is neighborhood that is neighborhood of thai cafe")) [score=10.023, prob=0.003]
              Pred@0073: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.7) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that has delivery")) [score=10.020, prob=0.003]
              Pred@0074: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string credit)))) (value (list (name en.restaurant.2) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that takes credit cards")) [score=10.000, prob=0.003]
              Pred@0075: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is at most star rating of thai cafe")) [score=9.989, prob=0.003]
              Pred@0076: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is larger than price rating of thai cafe")) [score=9.907, prob=0.002]
              Pred@0077: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that has waiter service")) [score=9.891, prob=0.002]
              Pred@0078: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))) (value (list (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe")) [score=9.890, prob=0.002]
              Pred@0079: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and whose cuisine is thai")) [score=9.881, prob=0.002]
              Pred@0080: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that is good for groups")) [score=9.861, prob=0.002]
              Pred@0081: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and whose price rating is 2 dollar signs")) [score=9.854, prob=0.002]
              Pred@0082: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.56) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and whose price rating is 2 dollar signs")) [score=9.838, prob=0.002]
              Pred@0083: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string credit)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that takes credit cards")) [score=9.806, prob=0.002]
              Pred@0084: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that has take-out")) [score=9.806, prob=0.002]
              Pred@0085: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string takeout)))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that has take-out")) [score=9.799, prob=0.002]
              Pred@0086: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.27) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is cuisine that is cuisine of thai cafe")) [score=9.765, prob=0.002]
              Pred@0087: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string groups)))) (value (list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that is good for groups")) [score=9.735, prob=0.002]
              Pred@0088: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and whose cuisine is thai")) [score=9.701, prob=0.002]
              Pred@0089: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string credit)))) (value (list (name en.restaurant.16) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that takes credit cards")) [score=9.667, prob=0.002]
              Pred@0090: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe))) (value (list (name en.food.breakfast))) (type fb:type.any) (canonicalUtterance "meal that thai cafe serves and that thai cafe serves")) [score=9.664, prob=0.002]
              Pred@0091: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.7))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars and that serves lunch")) [score=9.645, prob=0.002]
              Pred@0092: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and whose star rating is 3 stars")) [score=9.614, prob=0.002]
              Pred@0093: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and whose neighborhood is midtown west")) [score=9.601, prob=0.002]
              Pred@0094: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe)))) (value (list (name en.restaurant.10) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.6) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that serves meal that thai cafe serves")) [score=9.600, prob=0.002]
              Pred@0095: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant whose price rating is 2 dollar signs serves")) [score=9.593, prob=0.002]
              Pred@0096: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string credit)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that takes credit cards")) [score=9.593, prob=0.002]
              Pred@0097: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is at least price rating of thai cafe")) [score=9.568, prob=0.002]
              Pred@0098: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is smaller than 2 dollar signs or 3 dollar signs")) [score=9.560, prob=0.002]
              Pred@0099: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and whose cuisine is thai")) [score=9.545, prob=0.002]
              Pred@0100: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is larger than 2 dollar signs")) [score=9.535, prob=0.002]
              Pred@0101: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.48) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that has outdoor seating")) [score=9.525, prob=0.002]
              Pred@0102: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that takes reservations")) [score=9.524, prob=0.002]
              Pred@0103: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that serves lunch")) [score=9.518, prob=0.002]
              Pred@0104: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and whose price rating is 2 dollar signs")) [score=9.506, prob=0.002]
              Pred@0105: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string groups)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that is good for groups")) [score=9.505, prob=0.002]
              Pred@0106: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string takeout)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.50) (name en.restaurant.56))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that has take-out")) [score=9.480, prob=0.002]
              Pred@0107: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is larger than star rating of thai cafe")) [score=9.466, prob=0.002]
              Pred@0108: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.53))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and whose neighborhood is midtown west")) [score=9.437, prob=0.001]
              Pred@0109: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string waiter)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.34) (name en.restaurant.39))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that has waiter service")) [score=9.386, prob=0.001]
              Pred@0110: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.16) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and whose cuisine is thai")) [score=9.369, prob=0.001]
              Pred@0111: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string waiter)))) (value (list (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that has waiter service")) [score=9.351, prob=0.001]
              Pred@0112: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that has outdoor seating")) [score=9.345, prob=0.001]
              Pred@0113: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that has take-out")) [score=9.344, prob=0.001]
              Pred@0114: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant whose cuisine is thai serves")) [score=9.332, prob=0.001]
              Pred@0115: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string takeout)))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that has take-out")) [score=9.322, prob=0.001]
              Pred@0116: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and whose neighborhood is midtown west")) [score=9.318, prob=0.001]
              Pred@0117: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant whose neighborhood is midtown west serves")) [score=9.295, prob=0.001]
              Pred@0118: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string kids)))) (value (list (name en.restaurant.13) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.50))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that is good for kids")) [score=9.255, prob=0.001]
              Pred@0119: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string credit)))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that takes credit cards")) [score=9.247, prob=0.001]
              Pred@0120: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno)))) (value (list (name en.cuisine.french) (name en.cuisine.italian))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of thai cafe or pizzeria juno")) [score=9.247, prob=0.001]
              Pred@0121: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.cuisine.italian))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of the most number of restaurant")) [score=9.246, prob=0.001]
              Pred@0122: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is larger than 3 stars")) [score=9.198, prob=0.001]
              Pred@0123: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string delivery)))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.53) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that has delivery")) [score=9.125, prob=0.001]
              Pred@0124: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.48))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and whose cuisine is thai")) [score=9.123, prob=0.001]
              Pred@0125: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string takeout)))) (value (list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that has take-out")) [score=9.093, prob=0.001]
              Pred@0126: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string waiter)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.38) (name en.restaurant.56))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that has waiter service")) [score=9.062, prob=0.001]
              Pred@0127: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string credit)))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.59) (name en.restaurant.7))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that takes credit cards")) [score=8.978, prob=9.29e-04]
              Pred@0128: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that has outdoor seating")) [score=8.951, prob=9.04e-04]
              Pred@0129: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is at least 3 stars")) [score=8.898, prob=8.57e-04]
              Pred@0130: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string kids)))) (value (list (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that is good for kids")) [score=8.881, prob=8.43e-04]
              Pred@0131: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string !=) (number 3 en.star)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is not 3 stars")) [score=8.870, prob=8.34e-04]
              Pred@0132: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.38) (name en.restaurant.56))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and whose price rating is 2 dollar signs")) [score=8.866, prob=8.31e-04]
              Pred@0133: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string credit)))) (value (list (name en.restaurant.13) (name en.restaurant.18) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that takes credit cards")) [score=8.855, prob=8.21e-04]
              Pred@0134: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.34) (name en.restaurant.39))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and whose cuisine is thai")) [score=8.847, prob=8.15e-04]
              Pred@0135: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that serves lunch")) [score=8.837, prob=8.07e-04]
              Pred@0136: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string waiter)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that has waiter service")) [score=8.813, prob=7.88e-04]
              Pred@0137: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of the least number of restaurant")) [score=8.779, prob=7.61e-04]
              Pred@0138: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string waiter)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.46) (name en.restaurant.52))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that has waiter service")) [score=8.775, prob=7.58e-04]
              Pred@0139: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string groups)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that is good for groups")) [score=8.773, prob=7.57e-04]
              Pred@0140: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string outdoor)))) (value (list (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.28) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that has outdoor seating")) [score=8.752, prob=7.41e-04]
              Pred@0141: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.neighborhood.chelsea))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of the least number of restaurant")) [score=8.732, prob=7.27e-04]
              Pred@0142: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string takeout)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.52) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that has take-out")) [score=8.722, prob=7.19e-04]
              Pred@0143: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string takeout)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that has take-out")) [score=8.715, prob=7.14e-04]
              Pred@0144: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that has delivery")) [score=8.709, prob=7.10e-04]
              Pred@0145: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))) (value (list)) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is smaller than price rating of thai cafe")) [score=8.696, prob=7.01e-04]
              Pred@0146: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign))))) (value (list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs or 3 dollar signs")) [score=8.691, prob=6.97e-04]
              Pred@0147: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string !=) en.restaurant.thai_cafe))) (value (list (name en.cuisine.french) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is not cuisine of thai cafe")) [score=8.669, prob=6.82e-04]
              Pred@0148: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string groups)))) (value (list (name en.restaurant.2) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that is good for groups")) [score=8.668, prob=6.81e-04]
              Pred@0149: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that has delivery")) [score=8.657, prob=6.74e-04]
              Pred@0150: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that is good for kids")) [score=8.656, prob=6.73e-04]
              Pred@0151: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of restaurant that has delivery")) [score=8.652, prob=6.70e-04]
              Pred@0152: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is at most 2 dollar signs")) [score=8.631, prob=6.57e-04]
              Pred@0153: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string waiter)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that has waiter service")) [score=8.623, prob=6.51e-04]
              Pred@0154: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that is good for groups serves")) [score=8.588, prob=6.29e-04]
              Pred@0155: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that takes credit cards serves")) [score=8.574, prob=6.20e-04]
              Pred@0156: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno)))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that thai cafe or pizzeria juno serves")) [score=8.552, prob=6.06e-04]
              Pred@0157: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.52) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that has outdoor seating")) [score=8.509, prob=5.81e-04]
              Pred@0158: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.53) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and whose neighborhood is midtown west")) [score=8.496, prob=5.74e-04]
              Pred@0159: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string takeout)))) (value (list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that has take-out")) [score=8.495, prob=5.73e-04]
              Pred@0160: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string credit)))) (value (list (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that takes credit cards")) [score=8.495, prob=5.73e-04]
              Pred@0161: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and whose neighborhood is midtown west")) [score=8.483, prob=5.66e-04]
              Pred@0162: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that serves lunch")) [score=8.475, prob=5.62e-04]
              Pred@0163: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that serves lunch")) [score=8.467, prob=5.57e-04]
              Pred@0164: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string kids)))) (value (list (name en.restaurant.13) (name en.restaurant.18) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that is good for kids")) [score=8.467, prob=5.57e-04]
              Pred@0165: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string takeout)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.51) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that has take-out")) [score=8.452, prob=5.49e-04]
              Pred@0166: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string kids)))) (value (list (name en.restaurant.11) (name en.restaurant.18) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that is good for kids")) [score=8.420, prob=5.31e-04]
              Pred@0167: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string groups)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that is good for groups")) [score=8.415, prob=5.29e-04]
              Pred@0168: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that has waiter service serves")) [score=8.403, prob=5.23e-04]
              Pred@0169: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and whose neighborhood is midtown west")) [score=8.380, prob=5.11e-04]
              Pred@0170: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that has outdoor seating")) [score=8.364, prob=5.03e-04]
              Pred@0171: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string groups)))) (value (list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that is good for groups")) [score=8.335, prob=4.88e-04]
              Pred@0172: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that takes reservations")) [score=8.329, prob=4.85e-04]
              Pred@0173: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string groups)))) (value (list (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that is good for groups")) [score=8.313, prob=4.78e-04]
              Pred@0174: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and whose price rating is 2 dollar signs")) [score=8.289, prob=4.67e-04]
              Pred@0175: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string kids)))) (value (list (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.48))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that is good for kids")) [score=8.269, prob=4.57e-04]
              Pred@0176: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.15) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.55) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and whose cuisine is thai")) [score=8.269, prob=4.57e-04]
              Pred@0177: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that has outdoor seating")) [score=8.263, prob=4.54e-04]
              Pred@0178: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string kids)))) (value (list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that is good for kids")) [score=8.261, prob=4.53e-04]
              Pred@0179: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that the least number of restaurant serves")) [score=8.258, prob=4.52e-04]
              Pred@0180: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string kids)))) (value (list (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.28) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that is good for kids")) [score=8.242, prob=4.45e-04]
              Pred@0181: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.46) (name en.restaurant.52))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that has outdoor seating")) [score=8.220, prob=4.35e-04]
              Pred@0182: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that has outdoor seating serves")) [score=8.218, prob=4.34e-04]
              Pred@0183: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string outdoor)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that has outdoor seating")) [score=8.214, prob=4.33e-04]
              Pred@0184: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string reserve)))) (value (list (name en.restaurant.14) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west and that takes reservations")) [score=8.202, prob=4.28e-04]
              Pred@0185: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that has take-out serves")) [score=8.172, prob=4.15e-04]
              Pred@0186: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that has delivery")) [score=8.139, prob=4.01e-04]
              Pred@0187: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is at most 3 stars")) [score=8.137, prob=4.01e-04]
              Pred@0188: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string groups)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that is good for groups")) [score=8.108, prob=3.89e-04]
              Pred@0189: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string waiter)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that has waiter service")) [score=8.099, prob=3.86e-04]
              Pred@0190: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of two restaurant")) [score=8.098, prob=3.85e-04]
              Pred@0191: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of at least two restaurant")) [score=8.097, prob=3.85e-04]
              Pred@0192: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "meal that less than two restaurant serves")) [score=8.082, prob=3.79e-04]
              Pred@0193: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe))) (value (list (name en.cuisine.italian))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe")) [score=8.048, prob=3.66e-04]
              Pred@0194: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string reserve)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs and that takes reservations")) [score=8.018, prob=3.56e-04]
              Pred@0195: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and whose price rating is 2 dollar signs")) [score=8.011, prob=3.53e-04]
              Pred@0196: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string waiter)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that has waiter service")) [score=8.000, prob=3.49e-04]
              Pred@0197: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string reserve)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that takes reservations")) [score=7.998, prob=3.49e-04]
              Pred@0198: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating))))) (value (list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is star rating of thai cafe")) [score=7.978, prob=3.42e-04]
              Pred@0199: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of restaurant that is good for kids")) [score=7.941, prob=3.29e-04]
              Pred@0200: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that serves lunch")) [score=7.929, prob=3.25e-04]
              Pred@0201: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of less than two restaurant")) [score=7.898, prob=3.15e-04]
              Pred@0202: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string credit)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that takes credit cards")) [score=7.873, prob=3.08e-04]
              Pred@0203: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that serves lunch")) [score=7.869, prob=3.06e-04]
              Pred@0204: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string reserve)))) (value (list (name en.restaurant.15) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that takes reservations")) [score=7.861, prob=3.04e-04]
              Pred@0205: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that has delivery serves")) [score=7.846, prob=2.99e-04]
              Pred@0206: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that has outdoor seating")) [score=7.808, prob=2.88e-04]
              Pred@0207: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string neighborhood))))) (value (list (name en.restaurant.10) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.23) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.54) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is neighborhood of thai cafe")) [score=7.807, prob=2.88e-04]
              Pred@0208: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string waiter)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that has waiter service")) [score=7.795, prob=2.85e-04]
              Pred@0209: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.51) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that serves lunch")) [score=7.744, prob=2.70e-04]
              Pred@0210: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.40) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and whose cuisine is thai")) [score=7.706, prob=2.60e-04]
              Pred@0211: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star))))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars or 5 stars")) [score=7.701, prob=2.59e-04]
              Pred@0212: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string reserve)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that takes reservations")) [score=7.683, prob=2.55e-04]
              Pred@0213: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that has delivery")) [score=7.679, prob=2.53e-04]
              Pred@0214: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "meal that at most two restaurant serves")) [score=7.674, prob=2.52e-04]
              Pred@0215: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that more than two restaurant serves")) [score=7.671, prob=2.51e-04]
              Pred@0216: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string takeout)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that has take-out")) [score=7.658, prob=2.48e-04]
              Pred@0217: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string waiter)))) (value (list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that has waiter service")) [score=7.642, prob=2.44e-04]
              Pred@0218: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string groups)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that is good for groups")) [score=7.630, prob=2.41e-04]
              Pred@0219: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string credit)))) (value (list (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that takes credit cards")) [score=7.626, prob=2.40e-04]
              Pred@0220: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (string meals) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.54))) (type fb:type.any) (canonicalUtterance "restaurant that serves the most number of meal")) [score=7.610, prob=2.36e-04]
              Pred@0221: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of less than two restaurant")) [score=7.606, prob=2.35e-04]
              Pred@0222: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating))))) (value (list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is price rating of thai cafe")) [score=7.601, prob=2.34e-04]
              Pred@0223: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that at least two restaurant serves")) [score=7.589, prob=2.32e-04]
              Pred@0224: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and whose neighborhood is midtown west")) [score=7.575, prob=2.28e-04]
              Pred@0225: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.59))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is smaller than 3 stars")) [score=7.542, prob=2.21e-04]
              Pred@0226: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.40) (name en.restaurant.55))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that has delivery")) [score=7.529, prob=2.18e-04]
              Pred@0227: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string takeout)))) (value (list (name en.restaurant.11) (name en.restaurant.18) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that has take-out")) [score=7.520, prob=2.16e-04]
              Pred@0228: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of at least two restaurant")) [score=7.519, prob=2.16e-04]
              Pred@0229: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string !=) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is not 2 dollar signs")) [score=7.515, prob=2.15e-04]
              Pred@0230: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string reserve)))) (value (list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that takes reservations")) [score=7.497, prob=2.11e-04]
              Pred@0231: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that serves lunch serves")) [score=7.495, prob=2.11e-04]
              Pred@0232: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that is good for kids serves")) [score=7.459, prob=2.03e-04]
              Pred@0233: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that serves lunch")) [score=7.380, prob=1.88e-04]
              Pred@0234: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve))))) (value (list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that restaurant that takes reservations serves")) [score=7.380, prob=1.88e-04]
              Pred@0235: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string kids)))) (value (list (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that is good for kids")) [score=7.374, prob=1.87e-04]
              Pred@0236: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string takeout)))) (value (list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that has take-out")) [score=7.333, prob=1.79e-04]
              Pred@0237: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups and that serves lunch")) [score=7.325, prob=1.78e-04]
              Pred@0238: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating and that has delivery")) [score=7.302, prob=1.74e-04]
              Pred@0239: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that serves less than two meal")) [score=7.285, prob=1.71e-04]
              Pred@0240: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)))) (value (list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose star rating is 3 stars")) [score=7.282, prob=1.70e-04]
              Pred@0241: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string delivery)))) (value (list (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that has delivery")) [score=7.274, prob=1.69e-04]
              Pred@0242: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.7))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that has delivery")) [score=7.258, prob=1.66e-04]
              Pred@0243: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string reserve)))) (value (list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out and that takes reservations")) [score=7.222, prob=1.60e-04]
              Pred@0244: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string kids)))) (value (list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch and that is good for kids")) [score=7.216, prob=1.59e-04]
              Pred@0245: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of at most two restaurant")) [score=7.203, prob=1.57e-04]
              Pred@0246: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string reserve)))) (value (list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that takes reservations")) [score=7.177, prob=1.53e-04]
              Pred@0247: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.7))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that serves lunch")) [score=7.087, prob=1.40e-04]
              Pred@0248: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that serves lunch")) [score=7.069, prob=1.38e-04]
              Pred@0249: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that has delivery")) [score=7.063, prob=1.37e-04]
              Pred@0250: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string !=) en.restaurant.thai_cafe))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west))) (type fb:type.any) (canonicalUtterance "neighborhood that is not neighborhood of thai cafe")) [score=7.037, prob=1.33e-04]
              Pred@0251: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "restaurant that has at least two neighborhood")) [score=7.025, prob=1.32e-04]
              Pred@0252: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of the most number of restaurant")) [score=7.021, prob=1.31e-04]
              Pred@0253: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.59) (name en.restaurant.7))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards and that serves lunch")) [score=7.004, prob=1.29e-04]
              Pred@0254: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.food.lunch en.food.dinner)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch or dinner")) [score=6.976, prob=1.25e-04]
              Pred@0255: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string waiter)))) (value (list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that has waiter service")) [score=6.966, prob=1.24e-04]
              Pred@0256: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (string cuisine)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has the most number of cuisine")) [score=6.905, prob=1.17e-04]
              Pred@0257: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of more than two restaurant")) [score=6.807, prob=1.06e-04]
              Pred@0258: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string takeout)))) (value (list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that has take-out")) [score=6.802, prob=1.05e-04]
              Pred@0259: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating))))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.40) (name en.restaurant.49) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has the largest star rating")) [score=6.774, prob=1.03e-04]
              Pred@0260: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating))))) (value (list (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47))) (type fb:type.any) (canonicalUtterance "restaurant that has the largest price rating")) [score=6.755, prob=1.01e-04]
              Pred@0261: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string reserve)))) (value (list (name en.restaurant.15) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.55) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai and that takes reservations")) [score=6.753, prob=1.00e-04]
              Pred@0262: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that serves lunch")) [score=6.750, prob=1.00e-04]
              Pred@0263: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.56) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose price rating is 2 dollar signs")) [score=6.641, prob=8.97e-05]
              Pred@0264: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.neighborhood.midtown_west en.neighborhood.chelsea)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west or chelsea")) [score=6.585, prob=8.48e-05]
              Pred@0265: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string kids)))) (value (list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that is good for kids")) [score=6.581, prob=8.45e-05]
              Pred@0266: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string outdoor)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that has outdoor seating")) [score=6.559, prob=8.26e-05]
              Pred@0267: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string delivery)))) (value (list (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids and that has delivery")) [score=6.476, prob=7.61e-05]
              Pred@0268: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string !=) en.cuisine.thai))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is not thai")) [score=6.461, prob=7.49e-05]
              Pred@0269: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string groups)))) (value (list (name en.restaurant.15) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that is good for groups")) [score=6.424, prob=7.23e-05]
              Pred@0270: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating))))) (value (list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has the smallest price rating")) [score=6.345, prob=6.67e-05]
              Pred@0271: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string reserve)))) (value (list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service and that takes reservations")) [score=6.332, prob=6.59e-05]
              Pred@0272: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.food.dinner))) (type fb:type.any) (canonicalUtterance "meal that the most number of restaurant serves")) [score=6.331, prob=6.58e-05]
              Pred@0273: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that serves at most two meal")) [score=6.329, prob=6.57e-05]
              Pred@0274: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of two restaurant")) [score=6.256, prob=6.11e-05]
              Pred@0275: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of at most two restaurant")) [score=6.253, prob=6.09e-05]
              Pred@0276: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55) (name en.restaurant.6))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai")) [score=6.224, prob=5.91e-05]
              Pred@0277: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (string meals) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (name en.restaurant.20) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.57) (name en.restaurant.8) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that serves the least number of meal")) [score=6.202, prob=5.79e-05]
              Pred@0278: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes credit cards")) [score=6.148, prob=5.48e-05]
              Pred@0279: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string kids)))) (value (list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that is good for kids")) [score=6.116, prob=5.31e-05]
              Pred@0280: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "meal that two restaurant serves")) [score=6.109, prob=5.27e-05]
              Pred@0281: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.cuisine.thai en.cuisine.italian)))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is thai or italian")) [score=6.079, prob=5.11e-05]
              Pred@0282: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "restaurant that has more than two cuisine")) [score=6.069, prob=5.06e-05]
              Pred@0283: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "restaurant that has at least two cuisine")) [score=6.067, prob=5.05e-05]
              Pred@0284: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.54))) (type fb:type.any) (canonicalUtterance "restaurant that serves more than two meal")) [score=6.004, prob=4.75e-05]
              Pred@0285: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that serves lunch")) [score=5.995, prob=4.70e-05]
              Pred@0286: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string cuisine))))) (value (list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.27) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose cuisine is cuisine of thai cafe")) [score=5.962, prob=4.55e-05]
              Pred@0287: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (string neighborhood)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has the least number of neighborhood")) [score=5.959, prob=4.54e-05]
              Pred@0288: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (string neighborhood)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has the most number of neighborhood")) [score=5.954, prob=4.51e-05]
              Pred@0289: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is not midtown west")) [score=5.941, prob=4.46e-05]
              Pred@0290: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that has delivery")) [score=5.940, prob=4.45e-05]
              Pred@0291: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string delivery)))) (value (list (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that has delivery")) [score=5.864, prob=4.13e-05]
              Pred@0292: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of more than two restaurant")) [score=5.858, prob=4.10e-05]
              Pred@0293: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.29) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves two meal")) [score=5.845, prob=4.05e-05]
              Pred@0294: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string !=) en.food.lunch))) (value (list (name en.restaurant.10) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.6) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that not serves lunch")) [score=5.811, prob=3.91e-05]
              Pred@0295: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string reserve)))) (value (list (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery and that takes reservations")) [score=5.772, prob=3.76e-05]
              Pred@0296: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves at least two meal")) [score=5.760, prob=3.72e-05]
              Pred@0297: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "restaurant that has more than two neighborhood")) [score=5.733, prob=3.62e-05]
              Pred@0298: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe))) (value (list (name en.cuisine.italian))) (type fb:type.any) (canonicalUtterance "cuisine that is cuisine of thai cafe")) [score=5.707, prob=3.53e-05]
              Pred@0299: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))) (value (list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant whose neighborhood is midtown west")) [score=5.645, prob=3.31e-05]
              Pred@0300: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string reserve)))) (value (list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations and that takes reservations")) [score=5.640, prob=3.30e-05]
              Pred@0301: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)))) (value (list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for groups")) [score=5.474, prob=2.79e-05]
              Pred@0302: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe))) (value (list (name en.food.breakfast))) (type fb:type.any) (canonicalUtterance "meal that thai cafe serves")) [score=5.371, prob=2.52e-05]
              Pred@0303: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string !=) en.restaurant.thai_cafe))) (value (list (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "meal that thai cafe not serves")) [score=5.298, prob=2.34e-05]
              Pred@0304: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))) (value (list (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood that is neighborhood of thai cafe")) [score=5.194, prob=2.11e-05]
              Pred@0305: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (string cuisine)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has the least number of cuisine")) [score=5.169, prob=2.06e-05]
              Pred@0306: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)))) (value (list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.8))) (type fb:type.any) (canonicalUtterance "restaurant that has outdoor seating")) [score=5.152, prob=2.02e-05]
              Pred@0307: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating))))) (value (list (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.36) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.58))) (type fb:type.any) (canonicalUtterance "restaurant that has the smallest star rating")) [score=5.148, prob=2.02e-05]
              Pred@0308: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating))))) (value (list (number 2.500 en.dollar_sign))) (type fb:type.any) (canonicalUtterance "average price rating of restaurant")) [score=4.990, prob=1.72e-05]
              Pred@0309: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating))))) (value (list (number 15 en.star))) (type fb:type.any) (canonicalUtterance "total star rating of restaurant")) [score=4.930, prob=1.62e-05]
              Pred@0310: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "restaurant that has two neighborhood")) [score=4.857, prob=1.51e-05]
              Pred@0311: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating))))) (value (list (number 2.500 en.star))) (type fb:type.any) (canonicalUtterance "average star rating of restaurant")) [score=4.739, prob=1.34e-05]
              Pred@0312: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string <) (number 2)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has less than two neighborhood")) [score=4.696, prob=1.28e-05]
              Pred@0313: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))) (value (list (number 2 en.dollar_sign) (number 3 en.dollar_sign))) (type fb:type.any) (canonicalUtterance "2 dollar signs or 3 dollar signs")) [score=4.628, prob=1.20e-05]
              Pred@0314: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating))))) (value (list (number 10 en.dollar_sign))) (type fb:type.any) (canonicalUtterance "total price rating of restaurant")) [score=4.614, prob=1.18e-05]
              Pred@0315: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno))) (value (list (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "thai cafe or pizzeria juno")) [score=4.465, prob=1.02e-05]
              Pred@0316: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string <) (number 2)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has less than two cuisine")) [score=4.429, prob=9.83e-06]
              Pred@0317: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that has take-out")) [score=4.399, prob=9.53e-06]
              Pred@0318: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)))) (value (list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that is good for kids")) [score=4.229, prob=8.04e-06]
              Pred@0319: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))) (type fb:type.any) (canonicalUtterance "restaurant that has waiter service")) [score=4.195, prob=7.77e-06]
              Pred@0320: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "restaurant that has two cuisine")) [score=4.156, prob=7.48e-06]
              Pred@0321: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)))) (value (list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that takes reservations")) [score=4.096, prob=7.04e-06]
              Pred@0322: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))) (value (list (number 3 en.star) (number 5 en.star))) (type fb:type.any) (canonicalUtterance "3 stars or 5 stars")) [score=3.834, prob=5.42e-06]
              Pred@0323: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)))) (value (list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has delivery")) [score=3.713, prob=4.80e-06]
              Pred@0324: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 30 en.review) (number 40 en.review)))) (value (list (number 30 en.review) (number 40 en.review))) (type fb:type.any) (canonicalUtterance "30 reviews or 40 reviews")) [score=3.665, prob=4.58e-06]
              Pred@0325: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string neighborhood)))) (value (list (name en.neighborhood.tribeca))) (type fb:type.any) (canonicalUtterance "neighborhood of thai cafe")) [score=3.661, prob=4.56e-06]
              Pred@0326: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))) (value (list (number 3 en.star))) (type fb:type.any) (canonicalUtterance "star rating of thai cafe")) [score=3.575, prob=4.18e-06]
              Pred@0327: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type))))) (value (list (number 3 count))) (type fb:type.any) (canonicalUtterance "number of cuisine")) [score=3.518, prob=3.95e-06]
              Pred@0328: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string <=) (number 2)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has at most two cuisine")) [score=3.510, prob=3.92e-06]
              Pred@0329: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string <=) (number 2)))) (value (list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))) (type fb:type.any) (canonicalUtterance "restaurant that has at most two neighborhood")) [score=3.319, prob=3.24e-06]
              Pred@0330: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch))) (value (list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))) (type fb:type.any) (canonicalUtterance "restaurant that serves lunch")) [score=3.081, prob=2.55e-06]
              Pred@0331: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.food.lunch en.food.dinner))) (value (list (name en.food.dinner) (name en.food.lunch))) (type fb:type.any) (canonicalUtterance "lunch or dinner")) [score=3.050, prob=2.47e-06]
              Pred@0332: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type))))) (value (list (number 3 count))) (type fb:type.any) (canonicalUtterance "number of neighborhood")) [score=3.017, prob=2.39e-06]
              Pred@0333: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))) (value (list (number 1 en.dollar_sign))) (type fb:type.any) (canonicalUtterance "price rating of thai cafe")) [score=2.945, prob=2.23e-06]
              Pred@0334: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))) (value (list (number 3 count))) (type fb:type.any) (canonicalUtterance "number of meal")) [score=2.904, prob=2.14e-06]
              Pred@0335: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.cuisine.thai en.cuisine.italian))) (value (list (name en.cuisine.italian) (name en.cuisine.thai))) (type fb:type.any) (canonicalUtterance "thai or italian")) [score=2.880, prob=2.09e-06]
              Pred@0336: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string cuisine)))) (value (list (name en.cuisine.italian))) (type fb:type.any) (canonicalUtterance "cuisine of thai cafe")) [score=2.774, prob=1.88e-06]
              Pred@0337: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.neighborhood.midtown_west en.neighborhood.chelsea))) (value (list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west))) (type fb:type.any) (canonicalUtterance "midtown west or chelsea")) [score=2.670, prob=1.69e-06]
              Pred@0338: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))) (value (list (number 60 count))) (type fb:type.any) (canonicalUtterance "number of restaurant")) [score=2.505, prob=1.44e-06]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=339 parsedNumCandidates=339 timeout=0 numTokens=1 parseTime=1138 maxCellSize=173 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=7157 numCells=524
            Cumulative(iter=0.train): correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=339 parsedNumCandidates=339 timeout=0 numTokens=1 parseTime=1138 maxCellSize=173 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=7157 numCells=524
          } [1.2s, cum. 1.2s]
        } [1.2s, cum. 1.2s]
        Stats for iter=0.train: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=339 parsedNumCandidates=339 timeout=0 numTokens=1 parseTime=1138 maxCellSize=173 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=7157 numCells=524
        Evaluation stats for iter=0.train {
          correct = 0/ << 0 ~ 0 >> /0 (1)
          oracle = 0/ << 0 ~ 0 >> /0 (1)
          partCorrect = 0/ << 0 ~ 0 >> /0 (1)
          partOracle = 0/ << 0 ~ 0 >> /0 (1)
          parsed = 1/ << 1 ~ 0 >> /1 (1)
          numCandidates = 339/ << 339 ~ 0 >> /339 (1)
          parsedNumCandidates = 339/ << 339 ~ 0 >> /339 (1)
          timeout = 0/ << 0 ~ 0 >> /0 (1)
          numTokens = 1/ << 1 ~ 0 >> /1 (1)
          parseTime = 1138/ << 1138 ~ 0 >> /1138 (1)
          maxCellSize = 173@$CP1:7/ << 173 ~ 0 >> /173@$CP1:7 (1)
          fallOffBeam = 0/ << 0 ~ 0 >> /0 (1)
          totalDerivs = 0/ << 0 ~ 0 >> /0 (1)
          numOfFeaturizedDerivs = 7157/ << 7157 ~ 0 >> /7157 (1)
          numCells = 524/ << 524 ~ 0 >> /524 (1)
        }
      } [1.2s, cum. 1.2s]
      StopWatchSet {
        FeatureExtractor.extractLocal	0.153s (0.0s x 7157)
        Executor.execute	0.586s (0.0s x 5765)
        Parser.parse	1.2s (1.2s x 1)
      }
      Params.write(genovernight.out/restaurants/params.0) 
      StopWatchSet {
        FeatureExtractor.extractLocal	0.153s (0.0s x 7157)
        Executor.execute	0.586s (0.0s x 5765)
        Parser.parse	1.2s (1.2s x 1)
      }
      Params.write(genovernight.out/restaurants/params.0) 
    } [1.2s, cum. 1.2s]
  } [1.2s, cum. 1.4s]
  Execution directory: genovernight.out/restaurants
} [1.4s]
