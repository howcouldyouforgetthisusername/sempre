main() {
  Execution directory: genovernight.out/blocks
  Grammar.read {
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate246 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r0 (lambda e (call edu.stanford.nlp.sempre.overnight.Simple...(200 total)
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate251 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r (lambda cp (call edu.stanford.nlp.sempre.overnight.Simple...(209 total)
    WARNING: Category not defined in the grammar: $Rel0NP; used in rule: $Intermediate252 -> $Rel0NP (JoinFn betaReduce forward (arg0 (lambda r (lambda cp (call edu.stanford.nlp.sempre.overnight.Simple...(209 total)
    WARNING: Category not defined in the grammar: $BinaryOp; used in rule: $BinaryOpRight -> $BinaryOp $EntityNP2 (JoinFn betaReduce forward)
    Valid tags: [general, generate, geo440, geo880, parse, regex]
    Used tags: [general, generate]
    368 rules
  }
  Parser: 78 catUnaryRules (sorted), 290 nonCatUnaryRules (in trie)
  Dataset.read {
    Reading overnight/null.examples {
      Example overnight/null.examples:0 (0): [null] => null
    }
  }
  Learner.learn() {
    Iteration 0/0 {
      Processing iter=0.train: 1 examples {
        Examples {
          iter=0.train: example 0/1: overnight/null.examples:0 {
            Example: null {
              Tokens: [null]
              Lemmatized tokens: [null]
              POS tags: [UNK]
              NER tags: [UNK]
              NER values: [UNK]
              Dependency children: []
            }
            Parser.parse: parse {
              WARNING: Currently CatSizeBound is usable only when useSizeInsteadOfDepth = true.
              FloatingParser.infer() {
                SimpleWorld.createWorld: domain = blocks (818 entity/property pairs) 
                Parser.ensureExecuted 
              }
            }
            Parser.setEvaluation: 511 candidates {
              Pred@0000: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list (name en.block.46) (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that is left of block 1")) [score=12.154, prob=0.030]
              Pred@0001: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and whose width is 3 inches")) [score=12.109, prob=0.029]
              Pred@0002: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and whose width is 3 inches")) [score=12.014, prob=0.026]
              Pred@0003: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.30))) (type fb:type.any) (canonicalUtterance "block that is below block 1 and whose width is 3 inches")) [score=11.806, prob=0.021]
              Pred@0004: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that block 1 is left of")) [score=11.716, prob=0.019]
              Pred@0005: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.30))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and whose length is 3 inches")) [score=11.658, prob=0.018]
              Pred@0006: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.10) (name en.block.33))) (type fb:type.any) (canonicalUtterance "block that is left of block that is left of block 1")) [score=11.651, prob=0.018]
              Pred@0007: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that is left of block 1")) [score=11.468, prob=0.015]
              Pred@0008: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and whose shape is a pyramid")) [score=11.371, prob=0.014]
              Pred@0009: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and whose shape is a pyramid")) [score=11.349, prob=0.013]
              Pred@0010: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and whose length is 3 inches")) [score=11.267, prob=0.012]
              Pred@0011: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.12) (name en.block.14) (name en.block.16) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.53) (name en.block.54) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.7) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is above block whose shape is a pyramid")) [score=11.157, prob=0.011]
              Pred@0012: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and whose height is 3 inches")) [score=11.064, prob=0.010]
              Pred@0013: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.11) (name en.block.16) (name en.block.19) (name en.block.28) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is smaller than length of block 1")) [score=11.062, prob=0.010]
              Pred@0014: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.30) (name en.block.34) (name en.block.52))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and whose shape is a pyramid")) [score=11.043, prob=0.010]
              Pred@0015: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.30))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and whose width is 3 inches")) [score=10.991, prob=0.009]
              Pred@0016: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.53))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and whose height is 3 inches")) [score=10.962, prob=0.009]
              Pred@0017: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.53))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and whose width is 3 inches")) [score=10.912, prob=0.009]
              Pred@0018: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and whose width is 3 inches")) [score=10.895, prob=0.009]
              Pred@0019: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is left of block whose shape is a pyramid")) [score=10.894, prob=0.009]
              Pred@0020: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and whose length is 3 inches")) [score=10.889, prob=0.009]
              Pred@0021: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is at least length of block 1")) [score=10.836, prob=0.008]
              Pred@0022: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.55) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is above block whose width is 3 inches")) [score=10.727, prob=0.007]
              Pred@0023: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that is left of block 1")) [score=10.715, prob=0.007]
              Pred@0024: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.30) (name en.block.38))) (type fb:type.any) (canonicalUtterance "block that is below block 1 and whose length is 3 inches")) [score=10.705, prob=0.007]
              Pred@0025: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that block 1 is above")) [score=10.704, prob=0.007]
              Pred@0026: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))) (value (list (name en.block.5))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that is left of block 1")) [score=10.688, prob=0.007]
              Pred@0027: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that is left of block 1")) [score=10.667, prob=0.007]
              Pred@0028: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is at least height of block 1")) [score=10.666, prob=0.007]
              Pred@0029: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that is left of block 1")) [score=10.641, prob=0.007]
              Pred@0030: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.28) (name en.block.30) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is at most length of block 1")) [score=10.631, prob=0.007]
              Pred@0031: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.2) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.50) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is at least width of block 1")) [score=10.603, prob=0.006]
              Pred@0032: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.23))) (type fb:type.any) (canonicalUtterance "block that is right of block that is left of block 1")) [score=10.596, prob=0.006]
              Pred@0033: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.13) (name en.block.24) (name en.block.26) (name en.block.33) (name en.block.39) (name en.block.46) (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that is left of block whose length is 3 inches")) [score=10.587, prob=0.006]
              Pred@0034: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.55))) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that is below block 1")) [score=10.544, prob=0.006]
              Pred@0035: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.44) (name en.block.53))) (type fb:type.any) (canonicalUtterance "block whose color is red and whose width is 3 inches")) [score=10.510, prob=0.006]
              Pred@0036: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.28) (name en.block.30) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is smaller than height of block 1")) [score=10.505, prob=0.006]
              Pred@0037: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block that block whose shape is a pyramid is left of")) [score=10.502, prob=0.006]
              Pred@0038: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.12) (name en.block.15) (name en.block.18) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.33) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.52) (name en.block.53) (name en.block.56) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block whose shape is a pyramid is below")) [score=10.499, prob=0.006]
              Pred@0039: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that block 1 is left of")) [score=10.455, prob=0.006]
              Pred@0040: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that block 1 is left of")) [score=10.445, prob=0.005]
              Pred@0041: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and whose width is 3 inches")) [score=10.423, prob=0.005]
              Pred@0042: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and whose length is 3 inches")) [score=10.413, prob=0.005]
              Pred@0043: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is larger than length of block 1")) [score=10.404, prob=0.005]
              Pred@0044: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and whose width is 3 inches")) [score=10.401, prob=0.005]
              Pred@0045: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and whose width is 3 inches")) [score=10.396, prob=0.005]
              Pred@0046: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.15) (name en.block.17) (name en.block.25) (name en.block.30) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.56) (name en.block.8) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block that is above block whose length is 3 inches")) [score=10.393, prob=0.005]
              Pred@0047: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and whose shape is a pyramid")) [score=10.390, prob=0.005]
              Pred@0048: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.10) (name en.block.17) (name en.block.5) (name en.block.8) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is above block that is left of block 1")) [score=10.383, prob=0.005]
              Pred@0049: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.14) (name en.block.2) (name en.block.29) (name en.block.33) (name en.block.37) (name en.block.4) (name en.block.41) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block whose length is 3 inches is left of")) [score=10.380, prob=0.005]
              Pred@0050: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that is left of block 1")) [score=10.376, prob=0.005]
              Pred@0051: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.45) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and whose shape is a pyramid")) [score=10.364, prob=0.005]
              Pred@0052: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that is right of block 1")) [score=10.361, prob=0.005]
              Pred@0053: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.4))) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and whose shape is a pyramid")) [score=10.352, prob=0.005]
              Pred@0054: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.30) (name en.block.34) (name en.block.52))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and whose length is 3 inches")) [score=10.350, prob=0.005]
              Pred@0055: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))) (value (list (name en.block.30))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that is below block 1")) [score=10.345, prob=0.005]
              Pred@0056: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is smaller than 3 inches or 6 inches")) [score=10.342, prob=0.005]
              Pred@0057: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.21) (name en.block.22) (name en.block.25) (name en.block.26) (name en.block.28) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.42) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block that is right of block whose shape is a pyramid")) [score=10.301, prob=0.005]
              Pred@0058: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that is left of block 1")) [score=10.280, prob=0.005]
              Pred@0059: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.54) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is larger than height of block 1")) [score=10.250, prob=0.004]
              Pred@0060: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list (name en.block.33))) (type fb:type.any) (canonicalUtterance "block that is below block 1 and whose height is 3 inches")) [score=10.224, prob=0.004]
              Pred@0061: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and whose length is 3 inches")) [score=10.191, prob=0.004]
              Pred@0062: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.12) (name en.block.17) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.47) (name en.block.50) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that is right of block whose width is 3 inches")) [score=10.169, prob=0.004]
              Pred@0063: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is at least length of block 1")) [score=10.121, prob=0.004]
              Pred@0064: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that is above block 1")) [score=10.106, prob=0.004]
              Pred@0065: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that block 1 is right of")) [score=10.084, prob=0.004]
              Pred@0066: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that is above block 1")) [score=10.079, prob=0.004]
              Pred@0067: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and whose width is 3 inches")) [score=10.065, prob=0.004]
              Pred@0068: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that block 1 is left of")) [score=10.061, prob=0.004]
              Pred@0069: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.30) (name en.block.55))) (type fb:type.any) (canonicalUtterance "block that is below block 1 and whose shape is a pyramid")) [score=10.057, prob=0.004]
              Pred@0070: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list (name en.block.4))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that block 1 is left of")) [score=10.050, prob=0.004]
              Pred@0071: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and whose height is 3 inches")) [score=10.035, prob=0.004]
              Pred@0072: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string color) (string =) en.color.red))) (value (list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.44) (name en.block.53))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and whose color is red")) [score=10.029, prob=0.004]
              Pred@0073: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that block 1 is below")) [score=10.017, prob=0.004]
              Pred@0074: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.15) (name en.block.18) (name en.block.26) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.58))) (type fb:type.any) (canonicalUtterance "block whose length is smaller than length of block 1")) [score=10.014, prob=0.004]
              Pred@0075: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.16) (name en.block.21) (name en.block.26) (name en.block.27) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.52) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block that block whose length is 3 inches is above")) [score=10.002, prob=0.004]
              Pred@0076: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.29) (name en.block.37) (name en.block.5) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that block that is below block 1 is left of")) [score=9.996, prob=0.003]
              Pred@0077: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that is below block 1")) [score=9.976, prob=0.003]
              Pred@0078: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and whose color is red")) [score=9.968, prob=0.003]
              Pred@0079: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.41) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is left of block that block 1 is left of")) [score=9.955, prob=0.003]
              Pred@0080: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.30) (name en.block.31) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is smaller than width of block 1")) [score=9.948, prob=0.003]
              Pred@0081: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.23) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.52) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is larger than width of block 1")) [score=9.936, prob=0.003]
              Pred@0082: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that block 1 is below")) [score=9.925, prob=0.003]
              Pred@0083: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that block 1 is below")) [score=9.925, prob=0.003]
              Pred@0084: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list (name en.block.46))) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that is left of block 1")) [score=9.921, prob=0.003]
              Pred@0085: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is larger than length of block 1")) [score=9.921, prob=0.003]
              Pred@0086: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and whose height is 3 inches")) [score=9.909, prob=0.003]
              Pred@0087: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that block 1 is right of")) [score=9.896, prob=0.003]
              Pred@0088: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.34) (name en.block.42) (name en.block.45) (name en.block.48))) (type fb:type.any) (canonicalUtterance "block that is below block whose width is 3 inches")) [score=9.895, prob=0.003]
              Pred@0089: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is smaller than 3 inches or 6 inches")) [score=9.892, prob=0.003]
              Pred@0090: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that is above block 1")) [score=9.891, prob=0.003]
              Pred@0091: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.28) (name en.block.32) (name en.block.36) (name en.block.4) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block that is left of block whose width is 3 inches")) [score=9.838, prob=0.003]
              Pred@0092: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list (name en.block.30) (name en.block.33) (name en.block.38))) (type fb:type.any) (canonicalUtterance "block that is below block 1 and whose color is red")) [score=9.838, prob=0.003]
              Pred@0093: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list (name en.block.46))) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that block 1 is above")) [score=9.818, prob=0.003]
              Pred@0094: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list (name en.block.43) (name en.block.50))) (type fb:type.any) (canonicalUtterance "block that is above block that is right of block 1")) [score=9.815, prob=0.003]
              Pred@0095: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose color is red and that is left of block 1")) [score=9.806, prob=0.003]
              Pred@0096: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.23) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.31) (name en.block.32) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.54) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose length is larger than width of block 1")) [score=9.801, prob=0.003]
              Pred@0097: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and whose shape is a pyramid")) [score=9.800, prob=0.003]
              Pred@0098: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list (name en.block.11) (name en.block.13))) (type fb:type.any) (canonicalUtterance "block that is above block that block 1 is right of")) [score=9.795, prob=0.003]
              Pred@0099: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that is right of block 1")) [score=9.783, prob=0.003]
              Pred@0100: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and whose width is 3 inches")) [score=9.774, prob=0.003]
              Pred@0101: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))) (value (list (name en.block.30) (name en.block.38))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that is below block 1")) [score=9.762, prob=0.003]
              Pred@0102: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is at least 3 inches or 6 inches")) [score=9.761, prob=0.003]
              Pred@0103: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that block 1 is left of")) [score=9.749, prob=0.003]
              Pred@0104: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and whose shape is a pyramid")) [score=9.749, prob=0.003]
              Pred@0105: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and whose height is 3 inches")) [score=9.739, prob=0.003]
              Pred@0106: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.11) (name en.block.19) (name en.block.2) (name en.block.25) (name en.block.28) (name en.block.31) (name en.block.43) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.58) (name en.block.8) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is left of block whose height is 3 inches")) [score=9.737, prob=0.003]
              Pred@0107: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that block 1 is left of")) [score=9.726, prob=0.003]
              Pred@0108: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that is right of block 1")) [score=9.707, prob=0.003]
              Pred@0109: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.28) (name en.block.30) (name en.block.36) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is at most 3 inches")) [score=9.698, prob=0.003]
              Pred@0110: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose color is red and that is above block 1")) [score=9.693, prob=0.003]
              Pred@0111: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string color) (string =) en.color.red))) (value (list (name en.block.14) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and whose color is red")) [score=9.686, prob=0.003]
              Pred@0112: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that is above block 1")) [score=9.674, prob=0.003]
              Pred@0113: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is smaller than width of block 1")) [score=9.669, prob=0.003]
              Pred@0114: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.13) (name en.block.18) (name en.block.19) (name en.block.23) (name en.block.24) (name en.block.3) (name en.block.31) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.43) (name en.block.52) (name en.block.57) (name en.block.59) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is right of block whose length is 3 inches")) [score=9.663, prob=0.002]
              Pred@0115: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.54) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is at least width of block 1")) [score=9.661, prob=0.002]
              Pred@0116: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and whose length is 3 inches")) [score=9.651, prob=0.002]
              Pred@0117: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that is right of block 1")) [score=9.649, prob=0.002]
              Pred@0118: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list (name en.block.29))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is right of is right of")) [score=9.647, prob=0.002]
              Pred@0119: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that block 1 is right of")) [score=9.646, prob=0.002]
              Pred@0120: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose color is red and that block 1 is left of")) [score=9.644, prob=0.002]
              Pred@0121: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.13) (name en.block.16) (name en.block.21) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is smaller than height of block 1")) [score=9.617, prob=0.002]
              Pred@0122: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.13) (name en.block.18) (name en.block.23) (name en.block.27) (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.49) (name en.block.55) (name en.block.57))) (type fb:type.any) (canonicalUtterance "block that is below block whose length is 3 inches")) [score=9.610, prob=0.002]
              Pred@0123: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and whose shape is a pyramid")) [score=9.597, prob=0.002]
              Pred@0124: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block that is right of block 1")) [score=9.592, prob=0.002]
              Pred@0125: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and whose height is 3 inches")) [score=9.588, prob=0.002]
              Pred@0126: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.53) (name en.block.54) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose height is smaller than width of block 1")) [score=9.566, prob=0.002]
              Pred@0127: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.38) (name en.block.46))) (type fb:type.any) (canonicalUtterance "block that block that is left of block 1 is above")) [score=9.563, prob=0.002]
              Pred@0128: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))) (value (list (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.49))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that is special")) [score=9.561, prob=0.002]
              Pred@0129: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list (name en.block.16))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is right of is above")) [score=9.560, prob=0.002]
              Pred@0130: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that block that is right of block 1 is above")) [score=9.554, prob=0.002]
              Pred@0131: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.13) (name en.block.22) (name en.block.28) (name en.block.29) (name en.block.31) (name en.block.43) (name en.block.50) (name en.block.53) (name en.block.6))) (type fb:type.any) (canonicalUtterance "block that block whose width is 3 inches is right of")) [score=9.551, prob=0.002]
              Pred@0132: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.19) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.35) (name en.block.38) (name en.block.42) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.6))) (type fb:type.any) (canonicalUtterance "block that block whose shape is a pyramid is right of")) [score=9.545, prob=0.002]
              Pred@0133: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))) (value (list (name en.block.30) (name en.block.55))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that is below block 1")) [score=9.545, prob=0.002]
              Pred@0134: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.21) (name en.block.29) (name en.block.52) (name en.block.54))) (type fb:type.any) (canonicalUtterance "block that block that is below block 1 is above")) [score=9.534, prob=0.002]
              Pred@0135: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that block 1 is below")) [score=9.529, prob=0.002]
              Pred@0136: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.13) (name en.block.16) (name en.block.21) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is at most length of block 1")) [score=9.504, prob=0.002]
              Pred@0137: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is larger than height of block 1")) [score=9.488, prob=0.002]
              Pred@0138: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.30) (name en.block.31) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is at most height of block 1")) [score=9.476, prob=0.002]
              Pred@0139: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.11) (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.40) (name en.block.45) (name en.block.51) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose color is red and whose shape is a pyramid")) [score=9.474, prob=0.002]
              Pred@0140: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.2) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.33) (name en.block.36) (name en.block.4) (name en.block.44) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.58) (name en.block.6) (name en.block.7) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that block whose shape is a pyramid is above")) [score=9.473, prob=0.002]
              Pred@0141: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.14) (name en.block.21) (name en.block.29) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.38) (name en.block.53) (name en.block.56) (name en.block.6) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block whose length is 3 inches is right of")) [score=9.470, prob=0.002]
              Pred@0142: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and whose length is 3 inches")) [score=9.456, prob=0.002]
              Pred@0143: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.2) (name en.block.21) (name en.block.26) (name en.block.29) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.40) (name en.block.42) (name en.block.48) (name en.block.55) (name en.block.58) (name en.block.59))) (type fb:type.any) (canonicalUtterance "block whose width is larger than width of block 1")) [score=9.455, prob=0.002]
              Pred@0144: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches and that block 1 is right of")) [score=9.449, prob=0.002]
              Pred@0145: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string below) (string =) en.block.block1))) (value (list (name en.block.30) (name en.block.33) (name en.block.38))) (type fb:type.any) (canonicalUtterance "block whose color is red and that is below block 1")) [score=9.449, prob=0.002]
              Pred@0146: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list (name en.block.6))) (type fb:type.any) (canonicalUtterance "block that is above block that block 1 is below")) [score=9.440, prob=0.002]
              Pred@0147: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))) (value (list (name en.block.33))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that is below block 1")) [score=9.433, prob=0.002]
              Pred@0148: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.14) (name en.block.16) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.44) (name en.block.48) (name en.block.58) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that block whose height is 3 inches is above")) [score=9.426, prob=0.002]
              Pred@0149: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that is above block 1")) [score=9.422, prob=0.002]
              Pred@0150: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.22) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.34) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.58) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is smaller than height of block 1")) [score=9.419, prob=0.002]
              Pred@0151: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))) (value (list (name en.block.11) (name en.block.12) (name en.block.15) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.5) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.58) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is below block whose shape is a pyramid")) [score=9.419, prob=0.002]
              Pred@0152: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is at least height of block 1")) [score=9.400, prob=0.002]
              Pred@0153: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is at least 3 inches")) [score=9.394, prob=0.002]
              Pred@0154: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list (name en.block.5) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is above block that block 1 is above")) [score=9.387, prob=0.002]
              Pred@0155: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that is above block 1")) [score=9.378, prob=0.002]
              Pred@0156: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.12) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that is left of block whose color is red")) [score=9.377, prob=0.002]
              Pred@0157: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.19) (name en.block.37) (name en.block.52) (name en.block.57) (name en.block.59) (name en.block.6))) (type fb:type.any) (canonicalUtterance "block that is right of block that is below block 1")) [score=9.372, prob=0.002]
              Pred@0158: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.52))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is left of is right of")) [score=9.344, prob=0.002]
              Pred@0159: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.45))) (type fb:type.any) (canonicalUtterance "block that is above block that block 1 is left of")) [score=9.320, prob=0.002]
              Pred@0160: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that block 1 is below")) [score=9.318, prob=0.002]
              Pred@0161: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))) (value (list (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that is special and that is left of block 1")) [score=9.308, prob=0.002]
              Pred@0162: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that is right of block 1")) [score=9.298, prob=0.002]
              Pred@0163: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.48))) (type fb:type.any) (canonicalUtterance "block that is left of block that is below block 1")) [score=9.287, prob=0.002]
              Pred@0164: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that block 1 is right of")) [score=9.258, prob=0.002]
              Pred@0165: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that is below block 1")) [score=9.256, prob=0.002]
              Pred@0166: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string is_special)))) (value (list (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that is left of block 1 and that is special")) [score=9.238, prob=0.002]
              Pred@0167: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that block 1 is below")) [score=9.235, prob=0.002]
              Pred@0168: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and whose height is 3 inches")) [score=9.233, prob=0.002]
              Pred@0169: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that block 1 is above")) [score=9.231, prob=0.002]
              Pred@0170: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.25) (name en.block.3))) (type fb:type.any) (canonicalUtterance "block that block that is left of block 1 is below")) [score=9.227, prob=0.002]
              Pred@0171: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and whose width is 3 inches")) [score=9.219, prob=0.002]
              Pred@0172: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))) (value (list (name en.block.15) (name en.block.19) (name en.block.28) (name en.block.3) (name en.block.49) (name en.block.53) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block whose length is 3 inches is below")) [score=9.213, prob=0.002]
              Pred@0173: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and whose height is 3 inches")) [score=9.203, prob=0.002]
              Pred@0174: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that block 1 is above")) [score=9.197, prob=0.002]
              Pred@0175: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and whose height is 3 inches")) [score=9.187, prob=0.002]
              Pred@0176: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.16) (name en.block.23) (name en.block.26) (name en.block.28) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.48) (name en.block.59) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block that is above block whose height is 3 inches")) [score=9.177, prob=0.002]
              Pred@0177: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is larger than 3 inches")) [score=9.165, prob=0.002]
              Pred@0178: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.26))) (type fb:type.any) (canonicalUtterance "block that is right of block that block 1 is left of")) [score=9.157, prob=0.002]
              Pred@0179: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is at least 3 inches or 6 inches")) [score=9.155, prob=0.002]
              Pred@0180: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that is below block 1")) [score=9.153, prob=0.001]
              Pred@0181: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.18) (name en.block.23) (name en.block.29) (name en.block.3) (name en.block.36) (name en.block.45) (name en.block.52) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block whose width is 3 inches is left of")) [score=9.134, prob=0.001]
              Pred@0182: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string color) (string =) en.color.red))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.23) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.51) (name en.block.53) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose color is red and whose color is red")) [score=9.133, prob=0.001]
              Pred@0183: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that is left of block 1")) [score=9.130, prob=0.001]
              Pred@0184: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.3) (name en.block.4) (name en.block.46))) (type fb:type.any) (canonicalUtterance "block that is above block that is below block 1")) [score=9.126, prob=0.001]
              Pred@0185: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that is right of block 1")) [score=9.121, prob=0.001]
              Pred@0186: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is at least length of block 1")) [score=9.115, prob=0.001]
              Pred@0187: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string height) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.28) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose color is red and whose height is 3 inches")) [score=9.103, prob=0.001]
              Pred@0188: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that block 1 is right of")) [score=9.079, prob=0.001]
              Pred@0189: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose height is smaller than 3 inches or 6 inches")) [score=9.070, prob=0.001]
              Pred@0190: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and whose shape is a pyramid")) [score=9.060, prob=0.001]
              Pred@0191: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.22) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.34) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.58) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is at most 3 inches")) [score=9.046, prob=0.001]
              Pred@0192: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that block 1 is above")) [score=9.027, prob=0.001]
              Pred@0193: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that is special and whose length is 3 inches")) [score=9.026, prob=0.001]
              Pred@0194: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.18) (name en.block.21) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block whose color is red is left of")) [score=9.025, prob=0.001]
              Pred@0195: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.23) (name en.block.53) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block that block that is below block 1 is right of")) [score=9.022, prob=0.001]
              Pred@0196: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is larger than 3 inches or 6 inches")) [score=9.018, prob=0.001]
              Pred@0197: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list (name en.block.39))) (type fb:type.any) (canonicalUtterance "block that is left of block that block 1 is right of")) [score=9.008, prob=0.001]
              Pred@0198: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.41) (name en.block.51))) (type fb:type.any) (canonicalUtterance "block that is below block that block 1 is left of")) [score=9.005, prob=0.001]
              Pred@0199: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list (name en.block.57))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is right of is below")) [score=9.002, prob=0.001]
              Pred@0200: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that block 1 is below")) [score=8.998, prob=0.001]
              Pred@0201: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is larger than 3 inches or 6 inches")) [score=8.985, prob=0.001]
              Pred@0202: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that is left of block 1")) [score=8.981, prob=0.001]
              Pred@0203: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and whose color is red")) [score=8.981, prob=0.001]
              Pred@0204: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and whose color is red")) [score=8.980, prob=0.001]
              Pred@0205: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))) (value (list (name en.block.30) (name en.block.38) (name en.block.55))) (type fb:type.any) (canonicalUtterance "block that is below block 1 and that is special")) [score=8.973, prob=0.001]
              Pred@0206: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.46) (name en.block.5) (name en.block.53))) (type fb:type.any) (canonicalUtterance "block that is left of block 1 or block 2")) [score=8.970, prob=0.001]
              Pred@0207: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.49))) (type fb:type.any) (canonicalUtterance "block that is special and whose width is 3 inches")) [score=8.964, prob=0.001]
              Pred@0208: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is at most width of block 1")) [score=8.963, prob=0.001]
              Pred@0209: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string color) (string =) en.color.red))) (value (list (name en.block.13) (name en.block.28) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and whose color is red")) [score=8.920, prob=0.001]
              Pred@0210: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.14) (name en.block.16) (name en.block.2) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.6) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that at least two block is above")) [score=8.906, prob=0.001]
              Pred@0211: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.2) (name en.block.21) (name en.block.28) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.58) (name en.block.7) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that block whose color is red is above")) [score=8.902, prob=0.001]
              Pred@0212: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and whose shape is a pyramid")) [score=8.895, prob=0.001]
              Pred@0213: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.27) (name en.block.31))) (type fb:type.any) (canonicalUtterance "block that block that is left of block 1 is right of")) [score=8.887, prob=0.001]
              Pred@0214: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block whose color is red and that block 1 is right of")) [score=8.877, prob=0.001]
              Pred@0215: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is larger than length of block 1")) [score=8.873, prob=0.001]
              Pred@0216: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is larger than 3 inches or 6 inches")) [score=8.867, prob=0.001]
              Pred@0217: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block that block 1 is below")) [score=8.864, prob=0.001]
              Pred@0218: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.13) (name en.block.14) (name en.block.23) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.43) (name en.block.47) (name en.block.53))) (type fb:type.any) (canonicalUtterance "block that at least two block is right of")) [score=8.859, prob=0.001]
              Pred@0219: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list (name en.block.9))) (type fb:type.any) (canonicalUtterance "block that block that is right of block 1 is left of")) [score=8.851, prob=0.001]
              Pred@0220: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose color is red and that block 1 is below")) [score=8.847, prob=0.001]
              Pred@0221: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.14) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose color is red and whose length is 3 inches")) [score=8.833, prob=0.001]
              Pred@0222: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and whose length is 3 inches")) [score=8.833, prob=0.001]
              Pred@0223: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that block 1 is above")) [score=8.829, prob=0.001]
              Pred@0224: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and whose height is 3 inches")) [score=8.828, prob=0.001]
              Pred@0225: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose color is red and that block 1 is above")) [score=8.819, prob=0.001]
              Pred@0226: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list (name en.block.4))) (type fb:type.any) (canonicalUtterance "block that is special and that block 1 is left of")) [score=8.813, prob=0.001]
              Pred@0227: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.22) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.34) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.58) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is at most length of block 1")) [score=8.812, prob=0.001]
              Pred@0228: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that block 1 is right of")) [score=8.798, prob=0.001]
              Pred@0229: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.11) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.30) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is special and whose shape is a pyramid")) [score=8.794, prob=0.001]
              Pred@0230: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that is left of block 1")) [score=8.793, prob=0.001]
              Pred@0231: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.12) (name en.block.14) (name en.block.18) (name en.block.19) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.34) (name en.block.4) (name en.block.43) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.53) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block whose color is red is right of")) [score=8.791, prob=0.001]
              Pred@0232: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.18) (name en.block.24) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.43) (name en.block.47) (name en.block.50) (name en.block.55) (name en.block.58) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block that block whose height is 3 inches is right of")) [score=8.782, prob=0.001]
              Pred@0233: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that is right of block 1")) [score=8.781, prob=0.001]
              Pred@0234: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that block 1 is right of")) [score=8.750, prob=0.001]
              Pred@0235: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))) (value (list (name en.block.11) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.30) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that is special")) [score=8.733, prob=9.84e-04]
              Pred@0236: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.33))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is left of is above")) [score=8.723, prob=9.74e-04]
              Pred@0237: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.27))) (type fb:type.any) (canonicalUtterance "block that is below block that is left of block 1")) [score=8.707, prob=9.59e-04]
              Pred@0238: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that is below block 1")) [score=8.706, prob=9.58e-04]
              Pred@0239: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list (name en.block.37))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is right of is left of")) [score=8.663, prob=9.18e-04]
              Pred@0240: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))) (value (list (name en.block.21) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.6))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches and that is special")) [score=8.659, prob=9.14e-04]
              Pred@0241: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that is above block 1")) [score=8.648, prob=9.04e-04]
              Pred@0242: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))))) (value (list (name en.block.16) (name en.block.24) (name en.block.3) (name en.block.38) (name en.block.42) (name en.block.48) (name en.block.59) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block whose height is smaller than length of block 1")) [score=8.632, prob=8.90e-04]
              Pred@0243: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color))))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.23) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.51) (name en.block.53) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose color is color of block 1")) [score=8.622, prob=8.81e-04]
              Pred@0244: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.56))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is left of is below")) [score=8.610, prob=8.71e-04]
              Pred@0245: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that is below block 1")) [score=8.606, prob=8.67e-04]
              Pred@0246: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is below block 1 is below")) [score=8.604, prob=8.65e-04]
              Pred@0247: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list (name en.block.10))) (type fb:type.any) (canonicalUtterance "block that is left of block that block 1 is above")) [score=8.592, prob=8.55e-04]
              Pred@0248: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that block 1 is left of")) [score=8.581, prob=8.45e-04]
              Pred@0249: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1)))) (value (list (name en.block.15) (name en.block.39) (name en.block.59))) (type fb:type.any) (canonicalUtterance "block that is below block that is below block 1")) [score=8.574, prob=8.40e-04]
              Pred@0250: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and whose length is 3 inches")) [score=8.559, prob=8.27e-04]
              Pred@0251: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string is_special)))) (value (list (name en.block.4))) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that is special")) [score=8.546, prob=8.16e-04]
              Pred@0252: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that block 1 is left of")) [score=8.545, prob=8.16e-04]
              Pred@0253: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.15) (name en.block.17) (name en.block.21) (name en.block.25) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.41) (name en.block.44) (name en.block.45) (name en.block.58) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that is right of block whose height is 3 inches")) [score=8.544, prob=8.15e-04]
              Pred@0254: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.22) (name en.block.23) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.44) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.52) (name en.block.54) (name en.block.59) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches or 6 inches")) [score=8.543, prob=8.14e-04]
              Pred@0255: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list (name en.block.56))) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that is above block 1")) [score=8.541, prob=8.12e-04]
              Pred@0256: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1)))) (value (list (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is left of block 1 is left of")) [score=8.530, prob=8.04e-04]
              Pred@0257: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))) (value (list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.5))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches and that is special")) [score=8.517, prob=7.93e-04]
              Pred@0258: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.12) (name en.block.18) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.34) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block whose color is red is below")) [score=8.515, prob=7.92e-04]
              Pred@0259: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list (name en.block.4))) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that block 1 is left of")) [score=8.513, prob=7.90e-04]
              Pred@0260: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and whose color is red")) [score=8.508, prob=7.86e-04]
              Pred@0261: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is above block 1 is above")) [score=8.502, prob=7.81e-04]
              Pred@0262: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is at least 3 inches or 6 inches")) [score=8.497, prob=7.78e-04]
              Pred@0263: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string color) (string =) en.color.red))) (value (list (name en.block.11) (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.40) (name en.block.45) (name en.block.51) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and whose color is red")) [score=8.489, prob=7.71e-04]
              Pred@0264: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block that is above block 1")) [score=8.470, prob=7.57e-04]
              Pred@0265: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string is_special)))) (value (list (name en.block.56))) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that is special")) [score=8.458, prob=7.48e-04]
              Pred@0266: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is at least height of block 1")) [score=8.427, prob=7.25e-04]
              Pred@0267: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list (name en.block.26))) (type fb:type.any) (canonicalUtterance "block that block that is above block 1 is left of")) [score=8.418, prob=7.19e-04]
              Pred@0268: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that is below block 1")) [score=8.393, prob=7.01e-04]
              Pred@0269: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))) (value (list (name en.block.21) (name en.block.32) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.6))) (type fb:type.any) (canonicalUtterance "block that is special and whose height is 3 inches")) [score=8.391, prob=6.99e-04]
              Pred@0270: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that block 1 is above")) [score=8.385, prob=6.95e-04]
              Pred@0271: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that is right of block 1")) [score=8.377, prob=6.89e-04]
              Pred@0272: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.16) (name en.block.17) (name en.block.27) (name en.block.29) (name en.block.5) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.59) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block whose height is 3 inches is left of")) [score=8.374, prob=6.88e-04]
              Pred@0273: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))) (value (list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is length of block 1")) [score=8.356, prob=6.75e-04]
              Pred@0274: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block that block 1 is above")) [score=8.353, prob=6.73e-04]
              Pred@0275: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is at most 3 inches or 6 inches")) [score=8.328, prob=6.56e-04]
              Pred@0276: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and whose length is 3 inches")) [score=8.322, prob=6.53e-04]
              Pred@0277: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is at most height of block 1")) [score=8.312, prob=6.46e-04]
              Pred@0278: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that is above block 1")) [score=8.308, prob=6.44e-04]
              Pred@0279: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose height is at most width of block 1")) [score=8.304, prob=6.41e-04]
              Pred@0280: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid and that block 1 is above")) [score=8.289, prob=6.31e-04]
              Pred@0281: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.53) (name en.block.54) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose height is at most height of block 1")) [score=8.276, prob=6.24e-04]
              Pred@0282: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.28) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that less than two block is left of")) [score=8.269, prob=6.19e-04]
              Pred@0283: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that is right of block 1")) [score=8.262, prob=6.15e-04]
              Pred@0284: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string is_special)))) (value (list (name en.block.11) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.26) (name en.block.30) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.6) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block whose color is red and that is special")) [score=8.260, prob=6.13e-04]
              Pred@0285: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is below the most number of block")) [score=8.256, prob=6.11e-04]
              Pred@0286: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1)))) (value (list (name en.block.17))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is left of is left of")) [score=8.247, prob=6.05e-04]
              Pred@0287: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of more than two block")) [score=8.243, prob=6.03e-04]
              Pred@0288: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list (name en.block.3) (name en.block.31) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is right of block that block 1 is right of")) [score=8.231, prob=5.96e-04]
              Pred@0289: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that block 1 is right of")) [score=8.226, prob=5.93e-04]
              Pred@0290: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that is right of block 1")) [score=8.222, prob=5.91e-04]
              Pred@0291: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))) (value (list (name en.block.56))) (type fb:type.any) (canonicalUtterance "block that is special and that is above block 1")) [score=8.221, prob=5.90e-04]
              Pred@0292: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.11) (name en.block.15) (name en.block.16) (name en.block.2) (name en.block.20) (name en.block.25) (name en.block.26) (name en.block.32) (name en.block.33) (name en.block.37) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.45) (name en.block.46) (name en.block.49) (name en.block.51) (name en.block.54) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that the least number of block is right of")) [score=8.217, prob=5.88e-04]
              Pred@0293: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string color) (string =) en.color.red))) (value (list (name en.block.11) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.26) (name en.block.30) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.6) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block that is special and whose color is red")) [score=8.216, prob=5.87e-04]
              Pred@0294: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that block 1 is below")) [score=8.209, prob=5.83e-04]
              Pred@0295: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block that block 1 is right of")) [score=8.191, prob=5.73e-04]
              Pred@0296: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list (name en.block.40))) (type fb:type.any) (canonicalUtterance "block that is right of block that block 1 is below")) [score=8.190, prob=5.72e-04]
              Pred@0297: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that block 1 is above")) [score=8.187, prob=5.70e-04]
              Pred@0298: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.7) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block whose width is 3 inches is above")) [score=8.186, prob=5.70e-04]
              Pred@0299: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.46) (name en.block.48) (name en.block.50) (name en.block.52) (name en.block.56) (name en.block.58) (name en.block.59) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block that is above block whose color is red")) [score=8.182, prob=5.67e-04]
              Pred@0300: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is at most width of block 1")) [score=8.172, prob=5.62e-04]
              Pred@0301: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.10) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.21) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.8) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is right of block whose color is red")) [score=8.165, prob=5.58e-04]
              Pred@0302: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.18) (name en.block.22) (name en.block.28) (name en.block.3) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.6) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block whose height is 3 inches is below")) [score=8.144, prob=5.46e-04]
              Pred@0303: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that block 1 is below")) [score=8.137, prob=5.43e-04]
              Pred@0304: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.11) (name en.block.16) (name en.block.19) (name en.block.28) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is smaller than 3 inches")) [score=8.134, prob=5.41e-04]
              Pred@0305: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list (name en.block.28))) (type fb:type.any) (canonicalUtterance "block that block that is right of block 1 is below")) [score=8.127, prob=5.37e-04]
              Pred@0306: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that block 1 is right of")) [score=8.107, prob=5.26e-04]
              Pred@0307: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.27) (name en.block.3) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.50) (name en.block.52) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is above block that is special")) [score=8.105, prob=5.25e-04]
              Pred@0308: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is left of the least number of block")) [score=8.100, prob=5.23e-04]
              Pred@0309: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))) (value (list (name en.block.12) (name en.block.17) (name en.block.19) (name en.block.20) (name en.block.3) (name en.block.41) (name en.block.42) (name en.block.51) (name en.block.8) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is width of block 1")) [score=8.096, prob=5.21e-04]
              Pred@0310: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that block 1 is below")) [score=8.085, prob=5.15e-04]
              Pred@0311: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.49) (name en.block.50) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.58) (name en.block.59) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is left of block that is special")) [score=8.082, prob=5.14e-04]
              Pred@0312: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.36) (name en.block.46))) (type fb:type.any) (canonicalUtterance "block that block 1 or block 2 is above")) [score=8.075, prob=5.10e-04]
              Pred@0313: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above block 1 and that block 1 is above")) [score=8.074, prob=5.09e-04]
              Pred@0314: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))) (value (list (name en.block.12) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.34) (name en.block.40) (name en.block.43) (name en.block.53) (name en.block.54) (name en.block.59))) (type fb:type.any) (canonicalUtterance "block that is below block whose height is 3 inches")) [score=8.058, prob=5.01e-04]
              Pred@0315: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))) (value (list (name en.block.12) (name en.block.22) (name en.block.28) (name en.block.29) (name en.block.31) (name en.block.43) (name en.block.52) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block whose width is 3 inches is below")) [score=8.056, prob=5.00e-04]
              Pred@0316: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.14) (name en.block.15) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.36) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is at least width of block 1")) [score=8.047, prob=4.96e-04]
              Pred@0317: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that block 1 is left of")) [score=8.036, prob=4.90e-04]
              Pred@0318: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.18) (name en.block.29) (name en.block.37) (name en.block.59))) (type fb:type.any) (canonicalUtterance "block that the most number of block is left of")) [score=8.015, prob=4.80e-04]
              Pred@0319: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and whose color is red")) [score=8.008, prob=4.77e-04]
              Pred@0320: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that is right of block 1")) [score=8.006, prob=4.76e-04]
              Pred@0321: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red) (string right) (string =) en.block.block1))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block whose color is red and that is right of block 1")) [score=8.000, prob=4.73e-04]
              Pred@0322: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that has at least two color")) [score=7.989, prob=4.68e-04]
              Pred@0323: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is right of block 1 is right of")) [score=7.985, prob=4.66e-04]
              Pred@0324: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is larger than 3 inches")) [score=7.984, prob=4.66e-04]
              Pred@0325: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))) (value (list (name en.block.30) (name en.block.38) (name en.block.55))) (type fb:type.any) (canonicalUtterance "block that is special and that is below block 1")) [score=7.978, prob=4.63e-04]
              Pred@0326: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block that is special and that block 1 is right of")) [score=7.971, prob=4.60e-04]
              Pred@0327: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is at most 3 inches or 6 inches")) [score=7.955, prob=4.52e-04]
              Pred@0328: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.54) (name en.block.56))) (type fb:type.any) (canonicalUtterance "block that is above block 1 or block 2")) [score=7.939, prob=4.45e-04]
              Pred@0329: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.32) (name en.block.4))) (type fb:type.any) (canonicalUtterance "block that block 1 or block 2 is left of")) [score=7.924, prob=4.38e-04]
              Pred@0330: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid or a cube")) [score=7.924, prob=4.38e-04]
              Pred@0331: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list (name en.block.25))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is above is below")) [score=7.923, prob=4.38e-04]
              Pred@0332: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))))) (value (list (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is at most 3 inches or 6 inches")) [score=7.919, prob=4.36e-04]
              Pred@0333: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of block that is above block 1")) [score=7.919, prob=4.36e-04]
              Pred@0334: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >=) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that has at least two shape")) [score=7.914, prob=4.34e-04]
              Pred@0335: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red)))) (value (list (name en.block.12) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.36) (name en.block.38) (name en.block.40) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.58) (name en.block.59) (name en.block.7) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is below block whose color is red")) [score=7.911, prob=4.33e-04]
              Pred@0336: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list (name en.block.13) (name en.block.24))) (type fb:type.any) (canonicalUtterance "block that is right of block that is right of block 1")) [score=7.894, prob=4.25e-04]
              Pred@0337: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1)))) (value (list (name en.block.49))) (type fb:type.any) (canonicalUtterance "block that is below block that is right of block 1")) [score=7.893, prob=4.25e-04]
              Pred@0338: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list (name en.block.27))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is above is right of")) [score=7.883, prob=4.21e-04]
              Pred@0339: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string is_special)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that is special")) [score=7.880, prob=4.20e-04]
              Pred@0340: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list (name en.block.38))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is above is above")) [score=7.877, prob=4.18e-04]
              Pred@0341: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1) (string is_special)))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block that block 1 is right of and that is special")) [score=7.868, prob=4.15e-04]
              Pred@0342: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that is right of block 1")) [score=7.867, prob=4.14e-04]
              Pred@0343: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and whose height is 3 inches")) [score=7.822, prob=3.96e-04]
              Pred@0344: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.19) (name en.block.22) (name en.block.24) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.55) (name en.block.56) (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that the least number of block is left of")) [score=7.818, prob=3.94e-04]
              Pred@0345: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that is special and that is right of block 1")) [score=7.805, prob=3.89e-04]
              Pred@0346: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list (name en.block.53))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is below is right of")) [score=7.805, prob=3.89e-04]
              Pred@0347: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that is below block 1")) [score=7.800, prob=3.87e-04]
              Pred@0348: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is above is left of")) [score=7.780, prob=3.79e-04]
              Pred@0349: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.16) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.37) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is right of block that is special")) [score=7.779, prob=3.79e-04]
              Pred@0350: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that block 1 is left of")) [score=7.777, prob=3.79e-04]
              Pred@0351: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.35) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.56) (name en.block.57))) (type fb:type.any) (canonicalUtterance "block that the least number of block is above")) [score=7.775, prob=3.78e-04]
              Pred@0352: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list (name en.block.46))) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that block 1 is above")) [score=7.749, prob=3.68e-04]
              Pred@0353: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list (name en.block.32))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is below is left of")) [score=7.712, prob=3.55e-04]
              Pred@0354: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is right of the most number of block")) [score=7.702, prob=3.51e-04]
              Pred@0355: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list (name en.block.12))) (type fb:type.any) (canonicalUtterance "block that block that is above block 1 is below")) [score=7.700, prob=3.50e-04]
              Pred@0356: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below at least two block")) [score=7.682, prob=3.44e-04]
              Pred@0357: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that block 1 is right of")) [score=7.671, prob=3.40e-04]
              Pred@0358: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape))))) (value (list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.19) (name en.block.22) (name en.block.23) (name en.block.26) (name en.block.27) (name en.block.33) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.7) (name en.block.8) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose shape is shape of block 1")) [score=7.658, prob=3.36e-04]
              Pred@0359: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list (name en.block.35))) (type fb:type.any) (canonicalUtterance "block that block that is above block 1 is right of")) [score=7.618, prob=3.23e-04]
              Pred@0360: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.2) (name en.block.21) (name en.block.24) (name en.block.26) (name en.block.30) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.50) (name en.block.51) (name en.block.54) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that the least number of block is below")) [score=7.617, prob=3.22e-04]
              Pred@0361: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that block 1 is below")) [score=7.607, prob=3.19e-04]
              Pred@0362: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))))) (value (list (name en.block.10) (name en.block.12) (name en.block.2) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.50) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is larger than height of block 1")) [score=7.598, prob=3.16e-04]
              Pred@0363: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that is above block 1")) [score=7.568, prob=3.07e-04]
              Pred@0364: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is left of and that is above block 1")) [score=7.560, prob=3.05e-04]
              Pred@0365: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and whose color is red")) [score=7.558, prob=3.04e-04]
              Pred@0366: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that block 1 is above")) [score=7.512, prob=2.90e-04]
              Pred@0367: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that less than two block is right of")) [score=7.509, prob=2.90e-04]
              Pred@0368: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below block that block 1 is above")) [score=7.485, prob=2.83e-04]
              Pred@0369: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that block 1 is below")) [score=7.482, prob=2.82e-04]
              Pred@0370: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list (name en.block.48))) (type fb:type.any) (canonicalUtterance "block that is right of block that is above block 1")) [score=7.480, prob=2.81e-04]
              Pred@0371: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that block 1 is right of")) [score=7.454, prob=2.74e-04]
              Pred@0372: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is above at most two block")) [score=7.444, prob=2.71e-04]
              Pred@0373: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that is right of block 1 and that is special")) [score=7.437, prob=2.69e-04]
              Pred@0374: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))) (value (list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is length of block 1")) [score=7.432, prob=2.68e-04]
              Pred@0375: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (string is_special)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.30) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is special and that is special")) [score=7.419, prob=2.65e-04]
              Pred@0376: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <) (number 2)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has less than two shape")) [score=7.418, prob=2.64e-04]
              Pred@0377: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string color) (string =) en.color.red))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and whose color is red")) [score=7.410, prob=2.62e-04]
              Pred@0378: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.17) (name en.block.18) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.32) (name en.block.37) (name en.block.4) (name en.block.41) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that at least two block is left of")) [score=7.388, prob=2.56e-04]
              Pred@0379: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that block 1 is above and that is above block 1")) [score=7.376, prob=2.53e-04]
              Pred@0380: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1)))) (value (list (name en.block.26) (name en.block.4))) (type fb:type.any) (canonicalUtterance "block that is below block that is above block 1")) [score=7.347, prob=2.46e-04]
              Pred@0381: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is above the least number of block")) [score=7.335, prob=2.43e-04]
              Pred@0382: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that has more than two shape")) [score=7.314, prob=2.38e-04]
              Pred@0383: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is at least 3 inches")) [score=7.311, prob=2.37e-04]
              Pred@0384: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.color.red en.color.green)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose color is red or green")) [score=7.310, prob=2.37e-04]
              Pred@0385: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))) (value (list (name en.block.12) (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.21) (name en.block.26) (name en.block.29) (name en.block.30) (name en.block.33) (name en.block.36) (name en.block.37) (name en.block.42) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54) (name en.block.59))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches or 6 inches")) [score=7.297, prob=2.34e-04]
              Pred@0386: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1) (string is_special)))) (value (list (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that block 1 is below and that is special")) [score=7.281, prob=2.30e-04]
              Pred@0387: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.17) (name en.block.27) (name en.block.3) (name en.block.32) (name en.block.4) (name en.block.41) (name en.block.53) (name en.block.6) (name en.block.7) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that two block is left of")) [score=7.266, prob=2.27e-04]
              Pred@0388: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above more than two block")) [score=7.256, prob=2.25e-04]
              Pred@0389: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.13) (name en.block.14) (name en.block.16) (name en.block.2) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.33) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.5) (name en.block.52) (name en.block.54) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is special is above")) [score=7.241, prob=2.21e-04]
              Pred@0390: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.12) (name en.block.20) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.49) (name en.block.55) (name en.block.56) (name en.block.58) (name en.block.6) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that at least two block is below")) [score=7.233, prob=2.20e-04]
              Pred@0391: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.14) (name en.block.2) (name en.block.27) (name en.block.28) (name en.block.43) (name en.block.46) (name en.block.52) (name en.block.54) (name en.block.6) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that two block is above")) [score=7.226, prob=2.18e-04]
              Pred@0392: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is not 3 inches")) [score=7.198, prob=2.12e-04]
              Pred@0393: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.8) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is larger than 3 inches")) [score=7.197, prob=2.12e-04]
              Pred@0394: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.16) (name en.block.29) (name en.block.45) (name en.block.48) (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that more than two block is above")) [score=7.180, prob=2.08e-04]
              Pred@0395: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.14) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.21) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.31) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.41) (name en.block.45) (name en.block.46) (name en.block.48) (name en.block.51) (name en.block.57) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is special is left of")) [score=7.172, prob=2.07e-04]
              Pred@0396: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list (name en.block.29))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is below is above")) [score=7.163, prob=2.05e-04]
              Pred@0397: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.15) (name en.block.18) (name en.block.26) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.58))) (type fb:type.any) (canonicalUtterance "block whose length is smaller than 3 inches")) [score=7.152, prob=2.03e-04]
              Pred@0398: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is above less than two block")) [score=7.097, prob=1.92e-04]
              Pred@0399: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))) (value (list (name en.block.2) (name en.block.21) (name en.block.24) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.47) (name en.block.53) (name en.block.56) (name en.block.57))) (type fb:type.any) (canonicalUtterance "block whose length is height of block 1")) [score=7.097, prob=1.92e-04]
              Pred@0400: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.13) (name en.block.23) (name en.block.24) (name en.block.31) (name en.block.35) (name en.block.38) (name en.block.43) (name en.block.47))) (type fb:type.any) (canonicalUtterance "block that two block is right of")) [score=7.087, prob=1.90e-04]
              Pred@0401: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch))))) (value (list (name en.block.11) (name en.block.13) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.27) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.36) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.50) (name en.block.53) (name en.block.6) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches or 6 inches")) [score=7.071, prob=1.87e-04]
              Pred@0402: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above at least two block")) [score=7.065, prob=1.86e-04]
              Pred@0403: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list (name en.block.16) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is below block that block 1 is below")) [score=7.054, prob=1.84e-04]
              Pred@0404: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1)))) (value (list (name en.block.29))) (type fb:type.any) (canonicalUtterance "block that block that block 1 is below is below")) [score=7.015, prob=1.77e-04]
              Pred@0405: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is special and that block 1 is above")) [score=6.941, prob=1.64e-04]
              Pred@0406: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose width is not 3 inches")) [score=6.940, prob=1.64e-04]
              Pred@0407: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.35) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.45) (name en.block.48) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.56) (name en.block.8) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that is below block that is special")) [score=6.918, prob=1.60e-04]
              Pred@0408: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string right) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is right of the least number of block")) [score=6.869, prob=1.53e-04]
              Pred@0409: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that is special and that block 1 is below")) [score=6.848, prob=1.49e-04]
              Pred@0410: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.10) (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.22) (name en.block.23) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.4) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.47) (name en.block.48) (name en.block.52) (name en.block.53) (name en.block.55) (name en.block.58) (name en.block.6) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is special is right of")) [score=6.820, prob=1.45e-04]
              Pred@0411: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string shape)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has the most number of shape")) [score=6.820, prob=1.45e-04]
              Pred@0412: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose length is not 3 inches")) [score=6.818, prob=1.45e-04]
              Pred@0413: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below more than two block")) [score=6.780, prob=1.40e-04]
              Pred@0414: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is below two block")) [score=6.775, prob=1.39e-04]
              Pred@0415: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))) (value (list (name en.block.23) (name en.block.24) (name en.block.3) (name en.block.34) (name en.block.38) (name en.block.45) (name en.block.46) (name en.block.50) (name en.block.57) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose width is width of block 1")) [score=6.774, prob=1.39e-04]
              Pred@0416: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is right of at most two block")) [score=6.754, prob=1.36e-04]
              Pred@0417: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.29) (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that block 1 or block 2 is below")) [score=6.743, prob=1.35e-04]
              Pred@0418: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.18) (name en.block.29) (name en.block.37) (name en.block.59))) (type fb:type.any) (canonicalUtterance "block that more than two block is left of")) [score=6.737, prob=1.34e-04]
              Pred@0419: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is left of less than two block")) [score=6.730, prob=1.33e-04]
              Pred@0420: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.13) (name en.block.16) (name en.block.21) (name en.block.24) (name en.block.28) (name en.block.3) (name en.block.32) (name en.block.33) (name en.block.38) (name en.block.40) (name en.block.42) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.53) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is at most 3 inches")) [score=6.720, prob=1.32e-04]
              Pred@0421: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.16) (name en.block.24) (name en.block.3) (name en.block.38) (name en.block.42) (name en.block.48) (name en.block.59) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block whose height is smaller than 3 inches")) [score=6.713, prob=1.31e-04]
              Pred@0422: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that is right of block 1 or block 2")) [score=6.685, prob=1.27e-04]
              Pred@0423: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.inch))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose height is at least 3 inches")) [score=6.646, prob=1.22e-04]
              Pred@0424: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is left of at most two block")) [score=6.625, prob=1.20e-04]
              Pred@0425: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special))))) (value (list (name en.block.10) (name en.block.12) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.23) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.33) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.45) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that block that is special is below")) [score=6.591, prob=1.16e-04]
              Pred@0426: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.53) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.7) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that less than two block is above")) [score=6.588, prob=1.15e-04]
              Pred@0427: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is below at most two block")) [score=6.587, prob=1.15e-04]
              Pred@0428: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that at most two block is right of")) [score=6.559, prob=1.12e-04]
              Pred@0429: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.12) (name en.block.25) (name en.block.3) (name en.block.31) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.49) (name en.block.55) (name en.block.56) (name en.block.58) (name en.block.6))) (type fb:type.any) (canonicalUtterance "block that two block is below")) [score=6.556, prob=1.12e-04]
              Pred@0430: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string above) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is above the most number of block")) [score=6.539, prob=1.10e-04]
              Pred@0431: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.14) (name en.block.42))) (type fb:type.any) (canonicalUtterance "block that block 1 or block 2 is right of")) [score=6.530, prob=1.09e-04]
              Pred@0432: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))) (value (list (name en.block.14) (name en.block.15) (name en.block.20) (name en.block.22) (name en.block.25) (name en.block.27) (name en.block.31) (name en.block.39) (name en.block.5) (name en.block.51) (name en.block.6) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block whose width is height of block 1")) [score=6.508, prob=1.06e-04]
              Pred@0433: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54))) (type fb:type.any) (canonicalUtterance "block whose width is 3 inches")) [score=6.452, prob=1.01e-04]
              Pred@0434: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.30) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.57) (name en.block.59) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that less than two block is below")) [score=6.437, prob=9.91e-05]
              Pred@0435: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string >) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that has more than two color")) [score=6.393, prob=9.48e-05]
              Pred@0436: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that not is below block 1")) [score=6.367, prob=9.24e-05]
              Pred@0437: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.53))) (type fb:type.any) (canonicalUtterance "block that the most number of block is right of")) [score=6.365, prob=9.22e-05]
              Pred@0438: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))) (value (list (name en.block.11) (name en.block.13) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.24) (name en.block.25) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.34) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.45) (name en.block.51) (name en.block.52) (name en.block.55) (name en.block.59) (name en.block.6) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose shape is a pyramid")) [score=6.362, prob=9.19e-05]
              Pred@0439: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is below less than two block")) [score=6.351, prob=9.10e-05]
              Pred@0440: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is right of less than two block")) [score=6.335, prob=8.95e-05]
              Pred@0441: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))) (value (list (name en.block.10) (name en.block.12) (name en.block.14) (name en.block.15) (name en.block.19) (name en.block.22) (name en.block.23) (name en.block.26) (name en.block.27) (name en.block.33) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.53) (name en.block.54) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.7) (name en.block.8) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose shape is not a pyramid")) [score=6.331, prob=8.91e-05]
              Pred@0442: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <) (number 2)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has less than two color")) [score=6.311, prob=8.74e-05]
              Pred@0443: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of more than two block")) [score=6.304, prob=8.68e-05]
              Pred@0444: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.29))) (type fb:type.any) (canonicalUtterance "block that the most number of block is below")) [score=6.287, prob=8.53e-05]
              Pred@0445: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string below) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is below the least number of block")) [score=6.268, prob=8.37e-05]
              Pred@0446: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that at most two block is left of")) [score=6.215, prob=7.94e-05]
              Pred@0447: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height))))) (value (list (name en.block.12) (name en.block.17) (name en.block.22) (name en.block.35) (name en.block.37) (name en.block.5) (name en.block.54) (name en.block.58) (name en.block.8) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose height is height of block 1")) [score=6.213, prob=7.92e-05]
              Pred@0448: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.14) (name en.block.28) (name en.block.29) (name en.block.30) (name en.block.36) (name en.block.53))) (type fb:type.any) (canonicalUtterance "block that more than two block is right of")) [score=6.188, prob=7.73e-05]
              Pred@0449: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that not is right of block 1")) [score=6.157, prob=7.49e-05]
              Pred@0450: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width))))) (value (list (name en.block.10) (name en.block.18) (name en.block.19) (name en.block.25) (name en.block.30) (name en.block.39) (name en.block.43) (name en.block.51) (name en.block.55) (name en.block.56) (name en.block.57))) (type fb:type.any) (canonicalUtterance "block whose height is width of block 1")) [score=6.140, prob=7.36e-05]
              Pred@0451: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) en.block.block1))) (value (list (name en.block.46) (name en.block.5))) (type fb:type.any) (canonicalUtterance "block that is left of block 1")) [score=6.137, prob=7.34e-05]
              Pred@0452: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of at least two block")) [score=6.128, prob=7.28e-05]
              Pred@0453: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that at most two block is below")) [score=6.092, prob=7.02e-05]
              Pred@0454: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of at least two block")) [score=6.072, prob=6.88e-05]
              Pred@0455: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.16))) (type fb:type.any) (canonicalUtterance "block that the most number of block is above")) [score=6.051, prob=6.74e-05]
              Pred@0456: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is left of two block")) [score=5.963, prob=6.17e-05]
              Pred@0457: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.20) (name en.block.28) (name en.block.29) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block that more than two block is below")) [score=5.923, prob=5.92e-05]
              Pred@0458: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string color)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has the most number of color")) [score=5.898, prob=5.78e-05]
              Pred@0459: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.46) (name en.block.47) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that at most two block is above")) [score=5.892, prob=5.75e-05]
              Pred@0460: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is above two block")) [score=5.855, prob=5.54e-05]
              Pred@0461: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length))))) (value (list (name en.block.13) (name en.block.17) (name en.block.18) (name en.block.30) (name en.block.36) (name en.block.44) (name en.block.49) (name en.block.53) (name en.block.54))) (type fb:type.any) (canonicalUtterance "block whose width is length of block 1")) [score=5.847, prob=5.50e-05]
              Pred@0462: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2)))) (value (list (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.55) (name en.block.8))) (type fb:type.any) (canonicalUtterance "block that is below block 1 or block 2")) [score=5.784, prob=5.16e-05]
              Pred@0463: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))) (value (list (name en.block.14) (name en.block.22) (name en.block.30) (name en.block.34) (name en.block.38) (name en.block.39) (name en.block.43) (name en.block.48) (name en.block.5) (name en.block.52) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose length is 3 inches")) [score=5.755, prob=5.01e-05]
              Pred@0464: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string <=) (number 2)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has at most two color")) [score=5.690, prob=4.69e-05]
              Pred@0465: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string left) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that not is left of block 1")) [score=5.676, prob=4.63e-05]
              Pred@0466: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list)) (type fb:type.any) (canonicalUtterance "block that is right of two block")) [score=5.659, prob=4.55e-05]
              Pred@0467: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string =) en.block.block1))) (value (list (name en.block.4))) (type fb:type.any) (canonicalUtterance "block that block 1 is left of")) [score=5.610, prob=4.34e-05]
              Pred@0468: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string <=) (number 2)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has at most two shape")) [score=5.583, prob=4.22e-05]
              Pred@0469: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that not is above block 1")) [score=5.527, prob=3.99e-05]
              Pred@0470: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))) (value (list (name en.block.10) (name en.block.2) (name en.block.32) (name en.block.35) (name en.block.40) (name en.block.48) (name en.block.55) (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that has the largest width")) [score=5.490, prob=3.85e-05]
              Pred@0471: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string color)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has the least number of color")) [score=5.482, prob=3.81e-05]
              Pred@0472: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (string left) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is left of the most number of block")) [score=5.412, prob=3.55e-05]
              Pred@0473: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string below) (string =) en.block.block1))) (value (list (name en.block.30) (name en.block.33) (name en.block.38) (name en.block.55))) (type fb:type.any) (canonicalUtterance "block that is below block 1")) [score=5.376, prob=3.43e-05]
              Pred@0474: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string width))))) (value (list (name en.block.11) (name en.block.16) (name en.block.19) (name en.block.28) (name en.block.4) (name en.block.41) (name en.block.43) (name en.block.47) (name en.block.52) (name en.block.56) (name en.block.8) (name en.block.9) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has the smallest width")) [score=5.368, prob=3.40e-05]
              Pred@0475: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block 1 not is above")) [score=5.281, prob=3.12e-05]
              Pred@0476: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string left)) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block 1 not is left of")) [score=5.226, prob=2.95e-05]
              Pred@0477: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))) (value (list (name en.block.15) (name en.block.18) (name en.block.26) (name en.block.29) (name en.block.37) (name en.block.4) (name en.block.40) (name en.block.45) (name en.block.55) (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that has the smallest length")) [score=5.195, prob=2.86e-05]
              Pred@0478: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (string shape)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that has the least number of shape")) [score=5.120, prob=2.65e-05]
              Pred@0479: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))) (value (list (name en.block.14) (name en.block.15) (name en.block.26) (name en.block.29) (name en.block.31) (name en.block.34) (name en.block.46) (name en.block.49) (name en.block.52))) (type fb:type.any) (canonicalUtterance "block that has the largest height")) [score=5.112, prob=2.63e-05]
              Pred@0480: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block 1 not is right of")) [score=5.084, prob=2.56e-05]
              Pred@0481: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string height))))) (value (list (name en.block.16) (name en.block.24) (name en.block.3) (name en.block.38) (name en.block.42) (name en.block.48) (name en.block.59) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block that has the smallest height")) [score=5.010, prob=2.38e-05]
              Pred@0482: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string right)) (string =) en.block.block1))) (value (list (name en.block.14))) (type fb:type.any) (canonicalUtterance "block that block 1 is right of")) [score=4.938, prob=2.21e-05]
              Pred@0483: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length))))) (value (list (number 4.500 en.inch))) (type fb:type.any) (canonicalUtterance "average length of block")) [score=4.874, prob=2.08e-05]
              Pred@0484: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string length))))) (value (list (name en.block.10) (name en.block.16) (name en.block.25) (name en.block.27) (name en.block.28) (name en.block.32) (name en.block.46) (name en.block.6) (name en.block.7))) (type fb:type.any) (canonicalUtterance "block that has the largest length")) [score=4.801, prob=1.93e-05]
              Pred@0485: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string shape) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that has two shape")) [score=4.796, prob=1.92e-05]
              Pred@0486: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string right) (string =) en.block.block1))) (value (list (name en.block.43))) (type fb:type.any) (canonicalUtterance "block that is right of block 1")) [score=4.691, prob=1.73e-05]
              Pred@0487: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string !=) en.color.red))) (value (list (name en.block.10) (name en.block.12) (name en.block.15) (name en.block.16) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.25) (name en.block.27) (name en.block.32) (name en.block.36) (name en.block.37) (name en.block.4) (name en.block.41) (name en.block.42) (name en.block.46) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.52) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block whose color is not red")) [score=4.691, prob=1.73e-05]
              Pred@0488: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string !=) en.block.block1))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.13) (name en.block.14) (name en.block.15) (name en.block.16) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.2) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.23) (name en.block.24) (name en.block.25) (name en.block.26) (name en.block.27) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.32) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.41) (name en.block.42) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.46) (name en.block.47) (name en.block.48) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.51) (name en.block.52) (name en.block.53) (name en.block.54) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that block 1 not is below")) [score=4.573, prob=1.54e-05]
              Pred@0489: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string below)) (string =) en.block.block1))) (value (list (name en.block.58))) (type fb:type.any) (canonicalUtterance "block that block 1 is below")) [score=4.569, prob=1.53e-05]
              Pred@0490: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string above)) (string =) en.block.block1))) (value (list (name en.block.46))) (type fb:type.any) (canonicalUtterance "block that block 1 is above")) [score=4.560, prob=1.52e-05]
              Pred@0491: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string above) (string =) en.block.block1))) (value (list (name en.block.56))) (type fb:type.any) (canonicalUtterance "block that is above block 1")) [score=4.424, prob=1.32e-05]
              Pred@0492: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))) (value (list (number 4.500 en.inch))) (type fb:type.any) (canonicalUtterance "average height of block")) [score=4.424, prob=1.32e-05]
              Pred@0493: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))) (value (list (name en.block.13) (name en.block.21) (name en.block.28) (name en.block.32) (name en.block.33) (name en.block.40) (name en.block.45) (name en.block.47) (name en.block.53) (name en.block.6) (name en.block.9))) (type fb:type.any) (canonicalUtterance "block whose height is 3 inches")) [score=4.367, prob=1.25e-05]
              Pred@0494: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string color)))) (value (list (name en.color.red))) (type fb:type.any) (canonicalUtterance "color of block 1")) [score=4.313, prob=1.19e-05]
              Pred@0495: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string length))))) (value (list (number 27 en.inch))) (type fb:type.any) (canonicalUtterance "total length of block")) [score=4.225, prob=1.09e-05]
              Pred@0496: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string shape)))) (value (list (name en.shape.cube))) (type fb:type.any) (canonicalUtterance "shape of block 1")) [score=4.162, prob=1.02e-05]
              Pred@0497: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.shape.pyramid en.shape.cube))) (value (list (name en.shape.cube) (name en.shape.pyramid))) (type fb:type.any) (canonicalUtterance "a pyramid or a cube")) [score=4.157, prob=1.01e-05]
              Pred@0498: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) en.color.red))) (value (list (name en.block.11) (name en.block.13) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.2) (name en.block.23) (name en.block.26) (name en.block.28) (name en.block.29) (name en.block.3) (name en.block.30) (name en.block.31) (name en.block.33) (name en.block.34) (name en.block.35) (name en.block.38) (name en.block.39) (name en.block.40) (name en.block.43) (name en.block.44) (name en.block.45) (name en.block.47) (name en.block.51) (name en.block.53) (name en.block.6) (name en.block.7) (name en.block.8) (name en.block.9) (name en.block.block1))) (type fb:type.any) (canonicalUtterance "block whose color is red")) [score=4.088, prob=9.46e-06]
              Pred@0499: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.inch) (number 6 en.inch)))) (value (list (number 3 en.inch) (number 6 en.inch))) (type fb:type.any) (canonicalUtterance "3 inches or 6 inches")) [score=3.979, prob=8.49e-06]
              Pred@0500: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string height))))) (value (list (number 27 en.inch))) (type fb:type.any) (canonicalUtterance "total height of block")) [score=3.926, prob=8.04e-06]
              Pred@0501: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string height)))) (value (list (number 4 en.inch))) (type fb:type.any) (canonicalUtterance "height of block 1")) [score=3.922, prob=8.01e-06]
              Pred@0502: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string color) (string =) (number 2)))) (value (list)) (type fb:type.any) (canonicalUtterance "block that has two color")) [score=3.845, prob=7.42e-06]
              Pred@0503: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))) (value (list (number 27 en.inch))) (type fb:type.any) (canonicalUtterance "total width of block")) [score=3.799, prob=7.08e-06]
              Pred@0504: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.block.block1 en.block.block2))) (value (list (name en.block.block1) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block 1 or block 2")) [score=3.787, prob=7.00e-06]
              Pred@0505: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.color.red en.color.green))) (value (list (name en.color.green) (name en.color.red))) (type fb:type.any) (canonicalUtterance "red or green")) [score=3.697, prob=6.40e-06]
              Pred@0506: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string width))))) (value (list (number 4.500 en.inch))) (type fb:type.any) (canonicalUtterance "average width of block")) [score=3.475, prob=5.12e-06]
              Pred@0507: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type)) (string is_special)))) (value (list (name en.block.10) (name en.block.11) (name en.block.12) (name en.block.14) (name en.block.17) (name en.block.18) (name en.block.19) (name en.block.20) (name en.block.21) (name en.block.22) (name en.block.24) (name en.block.26) (name en.block.27) (name en.block.30) (name en.block.32) (name en.block.35) (name en.block.36) (name en.block.37) (name en.block.38) (name en.block.39) (name en.block.4) (name en.block.40) (name en.block.43) (name en.block.45) (name en.block.47) (name en.block.49) (name en.block.5) (name en.block.50) (name en.block.55) (name en.block.56) (name en.block.57) (name en.block.58) (name en.block.59) (name en.block.6) (name en.block.7) (name en.block.block2))) (type fb:type.any) (canonicalUtterance "block that is special")) [score=3.389, prob=4.70e-06]
              Pred@0508: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string length)))) (value (list (number 3 en.inch))) (type fb:type.any) (canonicalUtterance "length of block 1")) [score=3.119, prob=3.59e-06]
              Pred@0509: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.block.block1 (string width)))) (value (list (number 5 en.inch))) (type fb:type.any) (canonicalUtterance "width of block 1")) [score=2.968, prob=3.09e-06]
              Pred@0510: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.block) (string !type))))) (value (list (number 60 count))) (type fb:type.any) (canonicalUtterance "number of block")) [score=2.530, prob=1.99e-06]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=511 parsedNumCandidates=511 timeout=0 numTokens=1 parseTime=781 maxCellSize=212 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=4067 numCells=385
            Cumulative(iter=0.train): correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=511 parsedNumCandidates=511 timeout=0 numTokens=1 parseTime=781 maxCellSize=212 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=4067 numCells=385
          }
        }
        Stats for iter=0.train: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=511 parsedNumCandidates=511 timeout=0 numTokens=1 parseTime=781 maxCellSize=212 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=4067 numCells=385
        Evaluation stats for iter=0.train {
          correct = 0/ << 0 ~ 0 >> /0 (1)
          oracle = 0/ << 0 ~ 0 >> /0 (1)
          partCorrect = 0/ << 0 ~ 0 >> /0 (1)
          partOracle = 0/ << 0 ~ 0 >> /0 (1)
          parsed = 1/ << 1 ~ 0 >> /1 (1)
          numCandidates = 511/ << 511 ~ 0 >> /511 (1)
          parsedNumCandidates = 511/ << 511 ~ 0 >> /511 (1)
          timeout = 0/ << 0 ~ 0 >> /0 (1)
          numTokens = 1/ << 1 ~ 0 >> /1 (1)
          parseTime = 781/ << 781 ~ 0 >> /781 (1)
          maxCellSize = 212@$NP1:8/ << 212 ~ 0 >> /212@$NP1:8 (1)
          fallOffBeam = 0/ << 0 ~ 0 >> /0 (1)
          totalDerivs = 0/ << 0 ~ 0 >> /0 (1)
          numOfFeaturizedDerivs = 4067/ << 4067 ~ 0 >> /4067 (1)
          numCells = 385/ << 385 ~ 0 >> /385 (1)
        }
      }
      StopWatchSet {
        FeatureExtractor.extractLocal	0.066s (0.0s x 4067)
        Executor.execute	0.364s (0.0s x 2659)
        Parser.parse	0.919s (0.919s x 1)
      }
      Params.write(genovernight.out/blocks/params.0) 
      StopWatchSet {
        FeatureExtractor.extractLocal	0.066s (0.0s x 4067)
        Executor.execute	0.364s (0.0s x 2659)
        Parser.parse	0.919s (0.919s x 1)
      }
      Params.write(genovernight.out/blocks/params.0) 
    }
  }
  Execution directory: genovernight.out/blocks
} [1.1s]
